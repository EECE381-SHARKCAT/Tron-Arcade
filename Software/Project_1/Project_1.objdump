
Project_1.elf:     file format elf32-littlenios2
Project_1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000ec24 memsz 0x0000ec24 flags r-x
    LOAD off    0x0000fc44 vaddr 0x0100ec44 paddr 0x01010794 align 2**12
         filesz 0x00001b50 memsz 0x00001b50 flags rw-
    LOAD off    0x000122e4 vaddr 0x010122e4 paddr 0x010122e4 align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e3fc  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000694  0100e5b0  0100e5b0  0000f5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b50  0100ec44  01010794  0000fc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  010122e4  010122e4  000122e4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00011794  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e78  00000000  00000000  000117c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001864  00000000  00000000  00012638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027f39  00000000  00000000  00013e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008ddf  00000000  00000000  0003bdd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015f68  00000000  00000000  00044bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d44  00000000  00000000  0005ab1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002422  00000000  00000000  0005c860  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c974  00000000  00000000  0005ec82  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006b5f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a48  00000000  00000000  0006b658  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006f74d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006f750  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006f75c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006f75d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006f75e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006f769  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006f774  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006f77f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000035  00000000  00000000  0006f78a  2**0
                  CONTENTS, READONLY
 26 .jdi          000057ea  00000000  00000000  0006f7bf  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00084e2b  00000000  00000000  00074fa9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
0100e5b0 l    d  .rodata	00000000 .rodata
0100ec44 l    d  .rwdata	00000000 .rwdata
010122e4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 project_1.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
010014c4 l     F .text	00000058 __sprint_r
0100e9e6 l     O .rodata	00000010 blanks.3452
0100e9d6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01003528 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01004f24 l     F .text	00000058 std
01005030 l     F .text	00000008 __fp_lock
01005038 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0100ec44 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
01010760 l     O .rwdata	00000004 charset
0100ea1c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0100eb64 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
010091c4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100a2f0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100a7d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100a830 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100a930 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100aa50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100ab30 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100ac8c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0100b150 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01010784 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0100b5c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100f600 l     O .rwdata	00001060 jtag_uart_0
01010660 l     O .rwdata	0000002c character_lcd_0
0101068c l     O .rwdata	00000048 character_buffer
010106d4 l     O .rwdata	00000054 buffer_dma
01010728 l     O .rwdata	0000002c sdcard_interface
0100b9a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100bbe8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0100be10 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100c48c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100d2c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100d778 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0100d8b4 l     F .text	000000dc alt_file_locked
0100db18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100e32c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0100e4e0 l     F .text	00000040 alt_sim_halt
01006ce0 g     F .text	00000094 _mprec_log10
01006dcc g     F .text	00000088 __any_on
010084d8 g     F .text	00000070 _isatty_r
0100eb3c g     O .rodata	00000028 __mprec_tinytens
0100acec g     F .text	0000006c alt_main
0100139c g     F .text	000000a0 _puts_r
01012348 g     O .bss	00000100 alt_irq
01008548 g     F .text	00000078 _lseek_r
01010794 g       *ABS*	00000000 __flash_rwdata_start
0100c770 g     F .text	00000034 alt_up_character_lcd_send_cmd
01009ce4 g     F .text	00000088 __eqdf2
010125d8 g       *ABS*	00000000 __alt_heap_start
01001324 g     F .text	00000044 printf
01007fa4 g     F .text	00000068 __sseek
01004f8c g     F .text	000000a4 __sinit
0100e0ac g     F .text	00000130 __swbuf_r
0100cdb8 g     F .text	00000114 alt_up_char_buffer_string
01005c64 g     F .text	00000084 _setlocale_r
0100508c g     F .text	00000068 __sfmoreglue
0100ad78 g     F .text	00000020 __malloc_unlock
01000a10 g     F .text	00000174 __divsf3
0100cce8 g     F .text	000000d0 alt_up_char_buffer_draw
01012318 g     O .bss	00000004 altera_avalon_timer_ts_freq
0100675c g     F .text	000000e0 memmove
0100507c g     F .text	00000010 _cleanup
01006e54 g     F .text	000000bc _Balloc
01009df4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100c6f4 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01008464 g     F .text	00000074 _fstat_r
010122fc g     O .bss	00000004 errno
01000d30 g     F .text	00000038 __make_dp
01012304 g     O .bss	00000004 alt_argv
01018754 g       *ABS*	00000000 _gp
0100b470 g     F .text	00000030 usleep
0100f480 g     O .rwdata	00000180 alt_fd_list
0100d3e8 g     F .text	00000094 alt_find_dev
010066bc g     F .text	000000a0 memcpy
0100c908 g     F .text	0000004c alt_up_character_lcd_write_fd
0100cecc g     F .text	0000005c alt_up_char_buffer_clear
01005070 g     F .text	0000000c _cleanup_r
01009f8c g     F .text	000000f8 __floatsidf
0100d83c g     F .text	00000078 alt_io_redirect
01009f04 g     F .text	00000088 __ltdf2
0100e5b0 g       *ABS*	00000000 __DTOR_END__
0100143c g     F .text	00000014 puts
01006c30 g     F .text	000000b0 __ratio
0100c028 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01001368 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100a42c g     F .text	00000008 __udivsi3
0100a990 g     F .text	000000c0 isatty
0100ea4c g     O .rodata	000000c8 __mprec_tens
01005c40 g     F .text	00000008 __locale_charset
0100dd70 g     F .text	00000090 alt_icache_flush
010122f0 g     O .bss	00000004 __malloc_top_pad
0101075c g     O .rwdata	00000004 __mb_cur_max
01005c48 g     F .text	0000000c _localeconv_r
0100754c g     F .text	0000003c __i2b
01005624 g     F .text	0000049c __sfvwrite_r
01000608 g     F .text	000002a4 timer_test
01007f2c g     F .text	00000070 _sbrk_r
010085c0 g     F .text	00000078 _read_r
0100f044 g     O .rwdata	0000000c __lc_ctype
0101077c g     O .rwdata	00000004 alt_max_fd
0100a4d4 g     F .text	00000138 __unpack_d
01008340 g     F .text	00000110 _fclose_r
01004ef0 g     F .text	00000034 fflush
010122f4 g     O .bss	00000004 __malloc_max_sbrked_mem
01000c1c g     F .text	00000054 __extendsfdf2
01009654 g     F .text	00000074 __adddf3
01006b10 g     F .text	00000120 __b2d
01008c14 g     F .text	000005b0 __umoddi3
0100ab9c g     F .text	000000f0 lseek
01010758 g     O .rwdata	00000004 _global_impure_ptr
0100090c g     F .text	00000104 lcd_to_key
010078c8 g     F .text	000005f4 _realloc_r
010125d8 g       *ABS*	00000000 __bss_end
0100d680 g     F .text	000000f8 alt_iic_isr_register
0100b364 g     F .text	0000010c alt_tick
01008638 g     F .text	000005dc __udivdi3
0100eb14 g     O .rodata	00000028 __mprec_bigtens
010077a8 g     F .text	00000120 __s2b
0100a15c g     F .text	00000194 __floatunsidf
01006a30 g     F .text	00000060 __mcmp
01005058 g     F .text	00000018 __fp_lock_all
0100d638 g     F .text	00000048 alt_ic_irq_enabled
0100b2cc g     F .text	00000098 alt_alarm_stop
0101231c g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
0100f458 g     O .rwdata	00000028 alt_dev_null
01000f48 g     F .text	000000c8 __unpack_f
0100cbf0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0100d1c8 g     F .text	00000044 alt_dcache_flush_all
010068fc g     F .text	00000070 __hi0bits
0100a084 g     F .text	000000d8 __fixdfsi
01010794 g       *ABS*	00000000 __ram_rwdata_end
01010774 g     O .rwdata	00000008 alt_dev_list
0100b4a0 g     F .text	00000120 write
0100dfc4 g     F .text	000000e8 _putc_r
0100c6cc g     F .text	00000028 alt_timestamp_freq
0100ec44 g       *ABS*	00000000 __ram_rodata_end
0100a85c g     F .text	000000d4 fstat
01007688 g     F .text	00000120 __pow5mult
010122e4 g     O .bss	00000004 __nlocale_changed
0100a434 g     F .text	00000008 __umodsi3
010125d8 g       *ABS*	00000000 end
01000de8 g     F .text	00000160 __pack_f
0100cc24 g     F .text	00000084 alt_up_char_buffer_init
0100bb28 g     F .text	000000c0 altera_avalon_jtag_uart_init
0100e5ac g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100c4fc g     F .text	00000090 alt_avalon_timer_sc_init
01000d68 g     F .text	00000080 __clzsi2
0100c24c g     F .text	00000240 altera_avalon_jtag_uart_write
01004f7c g     F .text	00000004 __sfp_lock_acquire
010065d8 g     F .text	000000e4 memchr
0100c818 g     F .text	00000078 alt_up_character_lcd_write
0100151c g     F .text	00001eac ___vfprintf_internal_r
01005310 g     F .text	00000314 _free_r
0100ad98 g     F .text	00000258 alt_printf
0100e330 g     F .text	000001b0 __call_exitprocs
010122e8 g     O .bss	00000004 __mlocale_changed
01010768 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000004c _start
0101230c g     O .bss	00000004 _alt_tick_rate
01007218 g     F .text	0000014c __lshift
01012310 g     O .bss	00000004 _alt_nticks
0100b030 g     F .text	00000120 read
0100b654 g     F .text	00000354 alt_sys_init
0100ca7c g     F .text	000000b0 alt_up_character_lcd_shift_display
01000b84 g     F .text	00000098 __floatsisf
0100e1f8 g     F .text	00000134 __register_exitproc
01007364 g     F .text	000001e8 __multiply
0100cb2c g     F .text	00000090 alt_up_character_lcd_erase_pos
0100bec0 g     F .text	00000074 altera_avalon_jtag_uart_close
0100ec44 g       *ABS*	00000000 __ram_rwdata_start
0100e5b0 g       *ABS*	00000000 __ram_rodata_start
01012320 g     O .bss	00000028 __malloc_current_mallinfo
01006f10 g     F .text	0000017c __d2b
0100b9e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100dcb8 g     F .text	000000b8 alt_get_fd
0100d07c g     F .text	0000014c alt_busy_sleep
0100a60c g     F .text	000000c8 __fpcmp_parts_d
010082d0 g     F .text	00000070 _close_r
0100de4c g     F .text	00000074 memcmp
0100ba90 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
010125d8 g       *ABS*	00000000 __alt_stack_base
0100bad8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010033ec g     F .text	0000013c __swsetup_r
01009a8c g     F .text	00000258 __divdf3
010050f4 g     F .text	000000f0 __sfp
01006d74 g     F .text	00000058 __copybits
0100f050 g     O .rwdata	00000408 __malloc_av_
01004f88 g     F .text	00000004 __sinit_lock_release
010096c8 g     F .text	000003c4 __muldf3
01008088 g     F .text	00000060 __sread
0100e864 g     O .rodata	00000010 __thenan_sf
0100db98 g     F .text	00000120 alt_find_file
0100d20c g     F .text	000000b4 alt_dev_llist_insert
0100ad58 g     F .text	00000020 __malloc_lock
0100b210 g     F .text	000000bc sbrk
01004cf4 g     F .text	000001fc _fflush_r
0100821c g     F .text	000000b4 _calloc_r
010122e4 g       *ABS*	00000000 __bss_start
0100683c g     F .text	00000098 memset
01000200 g     F .text	00000088 main
01012308 g     O .bss	00000004 alt_envp
010122f8 g     O .bss	00000004 __malloc_max_total_mem
0100cca8 g     F .text	00000040 alt_up_char_buffer_open_dev
0100ba38 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100e1dc g     F .text	0000001c __swbuf
0100c9cc g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01007f9c g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01008450 g     F .text	00000014 fclose
0100c58c g     F .text	000000a4 alt_timestamp_start
01012448 g     O .bss	00000190 _atexit0
01003740 g     F .text	000015b4 _dtoa_r
01005e98 g     F .text	00000740 _malloc_r
01010780 g     O .rwdata	00000004 alt_errno
01000288 g     F .text	00000380 multiply_matrix
01005b88 g     F .text	000000b8 _fwalk
0100dec0 g     F .text	00000104 putc
0100a36c g     F .text	00000060 __divsi3
0100eb70 g     O .rodata	00000014 __thenan_df
0100c7d8 g     F .text	00000040 alt_up_character_lcd_open_dev
010051e4 g     F .text	0000012c _malloc_trim_r
0100e5b0 g       *ABS*	00000000 __CTOR_END__
0100c7a4 g     F .text	00000034 alt_up_character_lcd_init
010080e8 g     F .text	000000bc strcmp
0100e5b0 g       *ABS*	00000000 __flash_rodata_start
0100e5b0 g       *ABS*	00000000 __DTOR_LIST__
01009d6c g     F .text	00000088 __nedf2
0100b620 g     F .text	00000034 alt_irq_init
0100b1b0 g     F .text	00000060 alt_release_fd
0100cbbc g     F .text	00000034 alt_up_character_lcd_cursor_off
0100e874 g     O .rodata	00000100 __clz_tab
010122ec g     O .bss	00000004 _PathLocale
0100de00 g     F .text	00000014 atexit
010081a4 g     F .text	00000078 _write_r
01005ce8 g     F .text	0000001c setlocale
01010754 g     O .rwdata	00000004 _impure_ptr
01012300 g     O .bss	00000004 alt_argc
01012314 g     O .bss	00000004 altera_avalon_timer_ts_base
0100d384 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01006a90 g     F .text	00000080 __ulp
01007ebc g     F .text	00000040 __isinfd
01005040 g     F .text	00000018 __fp_unlock_all
0101076c g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01005c54 g     F .text	00000010 localeconv
0100c630 g     F .text	0000009c alt_timestamp
0100d4ac g     F .text	00000050 alt_ic_isr_register
01010794 g       *ABS*	00000000 _edata
010125d8 g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
0100bf34 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100d598 g     F .text	000000a0 alt_ic_irq_disable
0100800c g     F .text	0000007c __swrite
01010764 g     O .rwdata	00000004 __malloc_trim_threshold
0100db78 g     F .text	00000020 altera_nios2_qsys_irq_init
0100de14 g     F .text	00000038 exit
01005ac0 g     F .text	000000c8 _fwalk_reent
01000c70 g     F .text	000000c0 __floatunsisf
0100708c g     F .text	0000018c __mdiff
0100a3cc g     F .text	00000060 __modsi3
010008ac g     F .text	00000060 init_lcd
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01004f80 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100c890 g     F .text	00000078 alt_up_character_lcd_string
0100e520 g     F .text	00000020 _exit
01007efc g     F .text	00000030 __isnand
0100cf28 g     F .text	00000154 alt_alarm_start
0100a43c g     F .text	00000098 __muldi3
01005d04 g     F .text	00000194 __smakebuf_r
01001450 g     F .text	00000074 strlen
0100d990 g     F .text	00000188 open
01009e7c g     F .text	00000088 __gedf2
0100aff0 g     F .text	00000040 alt_putchar
0100d47c g     F .text	00000030 alt_icache_flush_all
0100c954 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01010790 g     O .rwdata	00000004 alt_priority_mask
0100d4fc g     F .text	0000009c alt_ic_irq_enable
010033c8 g     F .text	00000024 __vfprintf_internal
010095d4 g     F .text	00000080 __subdf3
0100696c g     F .text	000000c4 __lo0bits
01010788 g     O .rwdata	00000008 alt_alarm_list
0100d320 g     F .text	00000064 _do_ctors
0100a6d4 g     F .text	000000fc close
0100aab0 g     F .text	00000080 alt_load
01001010 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
01004f84 g     F .text	00000004 __sinit_lock_acquire
01007588 g     F .text	00000100 __multadd
010068d4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406d14 	ori	at,at,436
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18c8d204 	addi	r3,r3,9032
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18c8d204 	addi	r3,r3,9032
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c0:	00bffd16 	blt	zero,r2,10001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001cc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d0:	d6a1d514 	ori	gp,gp,34644
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001d8:	1088b914 	ori	r2,r2,8932

    movhi r3, %hi(__bss_end)
 10001dc:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001e0:	18c97614 	ori	r3,r3,9688

    beq r2, r3, 1f
 10001e4:	10c00326 	beq	r2,r3,10001f4 <_start+0x40>

0:
    stw zero, (r2)
 10001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f0:	10fffd36 	bltu	r2,r3,10001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f4:	100aab00 	call	100aab0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001f8:	100acec0 	call	100acec <alt_main>

010001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001fc:	003fff06 	br	10001fc <alt_after_alt_main>

01000200 <main>:

void multiply_matrix();
alt_up_character_lcd_dev* init_lcd();
void lcd_to_key(alt_up_character_lcd_dev* char_lcd_dev);

int main(void) {
 1000200:	defffd04 	addi	sp,sp,-12
 1000204:	dfc00215 	stw	ra,8(sp)
 1000208:	df000115 	stw	fp,4(sp)
 100020c:	dc000015 	stw	r16,0(sp)
 1000210:	d839883a 	mov	fp,sp

	printf("Starting Matrix Multiplication\n");
 1000214:	01004074 	movhi	r4,257
 1000218:	21396c04 	addi	r4,r4,-6736
 100021c:	100143c0 	call	100143c <puts>
	alt_timestamp_start();
 1000220:	100c58c0 	call	100c58c <alt_timestamp_start>
	multiply_matrix();
 1000224:	10002880 	call	1000288 <multiply_matrix>
	printf("Done! Time Elapsed : %f seconds\n" , (float) alt_timestamp() / (float) alt_timestamp_freq());
 1000228:	100c6300 	call	100c630 <alt_timestamp>
 100022c:	1009883a 	mov	r4,r2
 1000230:	1000c700 	call	1000c70 <__floatunsisf>
 1000234:	1021883a 	mov	r16,r2
 1000238:	100c6cc0 	call	100c6cc <alt_timestamp_freq>
 100023c:	1009883a 	mov	r4,r2
 1000240:	1000c700 	call	1000c70 <__floatunsisf>
 1000244:	8009883a 	mov	r4,r16
 1000248:	100b883a 	mov	r5,r2
 100024c:	1000a100 	call	1000a10 <__divsf3>
 1000250:	1009883a 	mov	r4,r2
 1000254:	1000c1c0 	call	1000c1c <__extendsfdf2>
 1000258:	100d883a 	mov	r6,r2
 100025c:	180f883a 	mov	r7,r3
 1000260:	01004074 	movhi	r4,257
 1000264:	21397404 	addi	r4,r4,-6704
 1000268:	300b883a 	mov	r5,r6
 100026c:	380d883a 	mov	r6,r7
 1000270:	10013240 	call	1001324 <printf>

	while(1){
		*leds = *switches;
 1000274:	00880004 	movi	r2,8192
 1000278:	00c80404 	movi	r3,8208
 100027c:	18c00003 	ldbu	r3,0(r3)
 1000280:	10c00005 	stb	r3,0(r2)
	}
 1000284:	003ffb06 	br	1000274 <main+0x74>

01000288 <multiply_matrix>:

	return 0;
}

void multiply_matrix(){
 1000288:	deffff04 	addi	sp,sp,-4
 100028c:	df000015 	stw	fp,0(sp)
 1000290:	d839883a 	mov	fp,sp
 1000294:	023fffb4 	movhi	r8,65534
 1000298:	420acc04 	addi	r8,r8,11056
 100029c:	da37883a 	add	sp,sp,r8
	//declare variables
	int a[100][100], b[100][100], c[100][100];
	int i,j,k,sum;

	//initialize arrays with 1s
	for (i=0; i<100; i++){
 10002a0:	00bfffb4 	movhi	r2,65534
 10002a4:	108acf04 	addi	r2,r2,11068
 10002a8:	1705883a 	add	r2,r2,fp
 10002ac:	10000015 	stw	zero,0(r2)
 10002b0:	00004406 	br	10003c4 <multiply_matrix+0x13c>
		for(j=0; j<100; j++){
 10002b4:	00ffffb4 	movhi	r3,65534
 10002b8:	18cace04 	addi	r3,r3,11064
 10002bc:	1f07883a 	add	r3,r3,fp
 10002c0:	18000015 	stw	zero,0(r3)
 10002c4:	00003006 	br	1000388 <multiply_matrix+0x100>
			a[i][j] = 1;
 10002c8:	013fffb4 	movhi	r4,65534
 10002cc:	210acf04 	addi	r4,r4,11068
 10002d0:	2709883a 	add	r4,r4,fp
 10002d4:	20800017 	ldw	r2,0(r4)
 10002d8:	01bfffb4 	movhi	r6,65534
 10002dc:	318ace04 	addi	r6,r6,11064
 10002e0:	370d883a 	add	r6,r6,fp
 10002e4:	30c00017 	ldw	r3,0(r6)
 10002e8:	10801924 	muli	r2,r2,100
 10002ec:	10c5883a 	add	r2,r2,r3
 10002f0:	1085883a 	add	r2,r2,r2
 10002f4:	1085883a 	add	r2,r2,r2
 10002f8:	01ffffb4 	movhi	r7,65534
 10002fc:	39cacc04 	addi	r7,r7,11056
 1000300:	3f0f883a 	add	r7,r7,fp
 1000304:	11c5883a 	add	r2,r2,r7
 1000308:	10c00404 	addi	r3,r2,16
 100030c:	00800044 	movi	r2,1
 1000310:	18800015 	stw	r2,0(r3)
			b[i][j] = 1;
 1000314:	00bfffb4 	movhi	r2,65534
 1000318:	108acf04 	addi	r2,r2,11068
 100031c:	1705883a 	add	r2,r2,fp
 1000320:	10c00017 	ldw	r3,0(r2)
 1000324:	01bfffb4 	movhi	r6,65534
 1000328:	318ace04 	addi	r6,r6,11064
 100032c:	370d883a 	add	r6,r6,fp
 1000330:	31000017 	ldw	r4,0(r6)
 1000334:	00a71414 	movui	r2,40016
 1000338:	01ffffb4 	movhi	r7,65534
 100033c:	39cacc04 	addi	r7,r7,11056
 1000340:	3f0f883a 	add	r7,r7,fp
 1000344:	388b883a 	add	r5,r7,r2
 1000348:	18801924 	muli	r2,r3,100
 100034c:	1105883a 	add	r2,r2,r4
 1000350:	1085883a 	add	r2,r2,r2
 1000354:	1085883a 	add	r2,r2,r2
 1000358:	1147883a 	add	r3,r2,r5
 100035c:	00800044 	movi	r2,1
 1000360:	18800015 	stw	r2,0(r3)
	int a[100][100], b[100][100], c[100][100];
	int i,j,k,sum;

	//initialize arrays with 1s
	for (i=0; i<100; i++){
		for(j=0; j<100; j++){
 1000364:	00ffffb4 	movhi	r3,65534
 1000368:	18cace04 	addi	r3,r3,11064
 100036c:	1f07883a 	add	r3,r3,fp
 1000370:	18800017 	ldw	r2,0(r3)
 1000374:	10800044 	addi	r2,r2,1
 1000378:	013fffb4 	movhi	r4,65534
 100037c:	210ace04 	addi	r4,r4,11064
 1000380:	2709883a 	add	r4,r4,fp
 1000384:	20800015 	stw	r2,0(r4)
 1000388:	01bfffb4 	movhi	r6,65534
 100038c:	318ace04 	addi	r6,r6,11064
 1000390:	370d883a 	add	r6,r6,fp
 1000394:	30800017 	ldw	r2,0(r6)
 1000398:	10801910 	cmplti	r2,r2,100
 100039c:	103fca1e 	bne	r2,zero,10002c8 <multiply_matrix+0x40>
	//declare variables
	int a[100][100], b[100][100], c[100][100];
	int i,j,k,sum;

	//initialize arrays with 1s
	for (i=0; i<100; i++){
 10003a0:	01ffffb4 	movhi	r7,65534
 10003a4:	39cacf04 	addi	r7,r7,11068
 10003a8:	3f0f883a 	add	r7,r7,fp
 10003ac:	38800017 	ldw	r2,0(r7)
 10003b0:	10800044 	addi	r2,r2,1
 10003b4:	00ffffb4 	movhi	r3,65534
 10003b8:	18cacf04 	addi	r3,r3,11068
 10003bc:	1f07883a 	add	r3,r3,fp
 10003c0:	18800015 	stw	r2,0(r3)
 10003c4:	013fffb4 	movhi	r4,65534
 10003c8:	210acf04 	addi	r4,r4,11068
 10003cc:	2709883a 	add	r4,r4,fp
 10003d0:	20800017 	ldw	r2,0(r4)
 10003d4:	10801910 	cmplti	r2,r2,100
 10003d8:	103fb61e 	bne	r2,zero,10002b4 <multiply_matrix+0x2c>
			b[i][j] = 1;
		}
	}

	//multiply matrix
	for (i=0; i<100; i++){
 10003dc:	01bfffb4 	movhi	r6,65534
 10003e0:	318acf04 	addi	r6,r6,11068
 10003e4:	370d883a 	add	r6,r6,fp
 10003e8:	30000015 	stw	zero,0(r6)
 10003ec:	00007c06 	br	10005e0 <multiply_matrix+0x358>
			for(j=0; j<100; j++){
 10003f0:	01ffffb4 	movhi	r7,65534
 10003f4:	39cace04 	addi	r7,r7,11064
 10003f8:	3f0f883a 	add	r7,r7,fp
 10003fc:	38000015 	stw	zero,0(r7)
 1000400:	00006806 	br	10005a4 <multiply_matrix+0x31c>
				sum = 0;
 1000404:	00bfffb4 	movhi	r2,65534
 1000408:	108acc04 	addi	r2,r2,11056
 100040c:	1705883a 	add	r2,r2,fp
 1000410:	10000015 	stw	zero,0(r2)
				for(k=0; k<100; k++){
 1000414:	00ffffb4 	movhi	r3,65534
 1000418:	18cacd04 	addi	r3,r3,11060
 100041c:	1f07883a 	add	r3,r3,fp
 1000420:	18000015 	stw	zero,0(r3)
 1000424:	00003806 	br	1000508 <multiply_matrix+0x280>
					sum = sum + a[i][k] * b[k][j];
 1000428:	013fffb4 	movhi	r4,65534
 100042c:	210acf04 	addi	r4,r4,11068
 1000430:	2709883a 	add	r4,r4,fp
 1000434:	20800017 	ldw	r2,0(r4)
 1000438:	01bfffb4 	movhi	r6,65534
 100043c:	318acd04 	addi	r6,r6,11060
 1000440:	370d883a 	add	r6,r6,fp
 1000444:	30c00017 	ldw	r3,0(r6)
 1000448:	10801924 	muli	r2,r2,100
 100044c:	10c5883a 	add	r2,r2,r3
 1000450:	1085883a 	add	r2,r2,r2
 1000454:	1085883a 	add	r2,r2,r2
 1000458:	01ffffb4 	movhi	r7,65534
 100045c:	39cacc04 	addi	r7,r7,11056
 1000460:	3f0f883a 	add	r7,r7,fp
 1000464:	11c5883a 	add	r2,r2,r7
 1000468:	10800404 	addi	r2,r2,16
 100046c:	11800017 	ldw	r6,0(r2)
 1000470:	00bfffb4 	movhi	r2,65534
 1000474:	108acd04 	addi	r2,r2,11060
 1000478:	1705883a 	add	r2,r2,fp
 100047c:	10c00017 	ldw	r3,0(r2)
 1000480:	01ffffb4 	movhi	r7,65534
 1000484:	39cace04 	addi	r7,r7,11064
 1000488:	3f0f883a 	add	r7,r7,fp
 100048c:	39000017 	ldw	r4,0(r7)
 1000490:	00a71414 	movui	r2,40016
 1000494:	01ffffb4 	movhi	r7,65534
 1000498:	39cacc04 	addi	r7,r7,11056
 100049c:	3f0f883a 	add	r7,r7,fp
 10004a0:	388b883a 	add	r5,r7,r2
 10004a4:	18801924 	muli	r2,r3,100
 10004a8:	1105883a 	add	r2,r2,r4
 10004ac:	1085883a 	add	r2,r2,r2
 10004b0:	1085883a 	add	r2,r2,r2
 10004b4:	1145883a 	add	r2,r2,r5
 10004b8:	10800017 	ldw	r2,0(r2)
 10004bc:	3087383a 	mul	r3,r6,r2
 10004c0:	013fffb4 	movhi	r4,65534
 10004c4:	210acc04 	addi	r4,r4,11056
 10004c8:	2709883a 	add	r4,r4,fp
 10004cc:	20800017 	ldw	r2,0(r4)
 10004d0:	10c5883a 	add	r2,r2,r3
 10004d4:	01bfffb4 	movhi	r6,65534
 10004d8:	318acc04 	addi	r6,r6,11056
 10004dc:	370d883a 	add	r6,r6,fp
 10004e0:	30800015 	stw	r2,0(r6)

	//multiply matrix
	for (i=0; i<100; i++){
			for(j=0; j<100; j++){
				sum = 0;
				for(k=0; k<100; k++){
 10004e4:	01ffffb4 	movhi	r7,65534
 10004e8:	39cacd04 	addi	r7,r7,11060
 10004ec:	3f0f883a 	add	r7,r7,fp
 10004f0:	38800017 	ldw	r2,0(r7)
 10004f4:	10800044 	addi	r2,r2,1
 10004f8:	00ffffb4 	movhi	r3,65534
 10004fc:	18cacd04 	addi	r3,r3,11060
 1000500:	1f07883a 	add	r3,r3,fp
 1000504:	18800015 	stw	r2,0(r3)
 1000508:	013fffb4 	movhi	r4,65534
 100050c:	210acd04 	addi	r4,r4,11060
 1000510:	2709883a 	add	r4,r4,fp
 1000514:	20800017 	ldw	r2,0(r4)
 1000518:	10801910 	cmplti	r2,r2,100
 100051c:	103fc21e 	bne	r2,zero,1000428 <multiply_matrix+0x1a0>
					sum = sum + a[i][k] * b[k][j];
				}
				c[i][j] = sum;
 1000520:	01bfffb4 	movhi	r6,65534
 1000524:	318acf04 	addi	r6,r6,11068
 1000528:	370d883a 	add	r6,r6,fp
 100052c:	30c00017 	ldw	r3,0(r6)
 1000530:	01ffffb4 	movhi	r7,65534
 1000534:	39cace04 	addi	r7,r7,11064
 1000538:	3f0f883a 	add	r7,r7,fp
 100053c:	39000017 	ldw	r4,0(r7)
 1000540:	00800074 	movhi	r2,1
 1000544:	108e2404 	addi	r2,r2,14480
 1000548:	01bfffb4 	movhi	r6,65534
 100054c:	318acc04 	addi	r6,r6,11056
 1000550:	370d883a 	add	r6,r6,fp
 1000554:	308b883a 	add	r5,r6,r2
 1000558:	18801924 	muli	r2,r3,100
 100055c:	1105883a 	add	r2,r2,r4
 1000560:	1085883a 	add	r2,r2,r2
 1000564:	1085883a 	add	r2,r2,r2
 1000568:	1147883a 	add	r3,r2,r5
 100056c:	01ffffb4 	movhi	r7,65534
 1000570:	39cacc04 	addi	r7,r7,11056
 1000574:	3f0f883a 	add	r7,r7,fp
 1000578:	38800017 	ldw	r2,0(r7)
 100057c:	18800015 	stw	r2,0(r3)
		}
	}

	//multiply matrix
	for (i=0; i<100; i++){
			for(j=0; j<100; j++){
 1000580:	00ffffb4 	movhi	r3,65534
 1000584:	18cace04 	addi	r3,r3,11064
 1000588:	1f07883a 	add	r3,r3,fp
 100058c:	18800017 	ldw	r2,0(r3)
 1000590:	10800044 	addi	r2,r2,1
 1000594:	013fffb4 	movhi	r4,65534
 1000598:	210ace04 	addi	r4,r4,11064
 100059c:	2709883a 	add	r4,r4,fp
 10005a0:	20800015 	stw	r2,0(r4)
 10005a4:	01bfffb4 	movhi	r6,65534
 10005a8:	318ace04 	addi	r6,r6,11064
 10005ac:	370d883a 	add	r6,r6,fp
 10005b0:	30800017 	ldw	r2,0(r6)
 10005b4:	10801910 	cmplti	r2,r2,100
 10005b8:	103f921e 	bne	r2,zero,1000404 <multiply_matrix+0x17c>
			b[i][j] = 1;
		}
	}

	//multiply matrix
	for (i=0; i<100; i++){
 10005bc:	01ffffb4 	movhi	r7,65534
 10005c0:	39cacf04 	addi	r7,r7,11068
 10005c4:	3f0f883a 	add	r7,r7,fp
 10005c8:	38800017 	ldw	r2,0(r7)
 10005cc:	10800044 	addi	r2,r2,1
 10005d0:	00ffffb4 	movhi	r3,65534
 10005d4:	18cacf04 	addi	r3,r3,11068
 10005d8:	1f07883a 	add	r3,r3,fp
 10005dc:	18800015 	stw	r2,0(r3)
 10005e0:	013fffb4 	movhi	r4,65534
 10005e4:	210acf04 	addi	r4,r4,11068
 10005e8:	2709883a 	add	r4,r4,fp
 10005ec:	20800017 	ldw	r2,0(r4)
 10005f0:	10801910 	cmplti	r2,r2,100
 10005f4:	103f7e1e 	bne	r2,zero,10003f0 <multiply_matrix+0x168>
					sum = sum + a[i][k] * b[k][j];
				}
				c[i][j] = sum;
			}
		}
}
 10005f8:	e037883a 	mov	sp,fp
 10005fc:	df000017 	ldw	fp,0(sp)
 1000600:	dec00104 	addi	sp,sp,4
 1000604:	f800283a 	ret

01000608 <timer_test>:

void timer_test(void) {
 1000608:	defff304 	addi	sp,sp,-52
 100060c:	dfc00c15 	stw	ra,48(sp)
 1000610:	df000b15 	stw	fp,44(sp)
 1000614:	dc000a15 	stw	r16,40(sp)
 1000618:	df000a04 	addi	fp,sp,40
	int ticks_duration;
	int timer_period;
	int status;
	int done;

	printf("Timers\n");
 100061c:	01004074 	movhi	r4,257
 1000620:	21397d04 	addi	r4,r4,-6668
 1000624:	100143c0 	call	100143c <puts>

	//TEST SYSTEM CLOCK
	printf(" Sys Clock Timer\n");
 1000628:	01004074 	movhi	r4,257
 100062c:	21397f04 	addi	r4,r4,-6660
 1000630:	100143c0 	call	100143c <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1000634:	00804074 	movhi	r2,257
 1000638:	1088c304 	addi	r2,r2,8972
 100063c:	10800017 	ldw	r2,0(r2)
	ticks_per_s = alt_ticks_per_second();
 1000640:	e0bffa15 	stw	r2,-24(fp)
	printf(" Tick Freq: %d\n", ticks_per_s);
 1000644:	01004074 	movhi	r4,257
 1000648:	21398404 	addi	r4,r4,-6640
 100064c:	e17ffa17 	ldw	r5,-24(fp)
 1000650:	10013240 	call	1001324 <printf>
	printf(" Recording starting ticks\n");
 1000654:	01004074 	movhi	r4,257
 1000658:	21398804 	addi	r4,r4,-6624
 100065c:	100143c0 	call	100143c <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1000660:	00804074 	movhi	r2,257
 1000664:	1088c404 	addi	r2,r2,8976
 1000668:	10800017 	ldw	r2,0(r2)
	ticks_start = alt_nticks();
 100066c:	e0bffc15 	stw	r2,-16(fp)
	printf(" Sleeping for 5 seconds\n");
 1000670:	01004074 	movhi	r4,257
 1000674:	21398f04 	addi	r4,r4,-6596
 1000678:	100143c0 	call	100143c <puts>
	usleep(5000000);
 100067c:	01001334 	movhi	r4,76
 1000680:	2112d004 	addi	r4,r4,19264
 1000684:	100b4700 	call	100b470 <usleep>
	printf(" Recording ending ticks\n");
 1000688:	01004074 	movhi	r4,257
 100068c:	21399504 	addi	r4,r4,-6572
 1000690:	100143c0 	call	100143c <puts>
 1000694:	00804074 	movhi	r2,257
 1000698:	1088c404 	addi	r2,r2,8976
 100069c:	10800017 	ldw	r2,0(r2)
	ticks_end = alt_nticks();
 10006a0:	e0bffb15 	stw	r2,-20(fp)
	ticks_duration = ticks_end - ticks_start;
 10006a4:	e0fffb17 	ldw	r3,-20(fp)
 10006a8:	e0bffc17 	ldw	r2,-16(fp)
 10006ac:	1885c83a 	sub	r2,r3,r2
 10006b0:	e0bff915 	stw	r2,-28(fp)
	duration = (float) ticks_duration / (float) ticks_per_s;
 10006b4:	e13ff917 	ldw	r4,-28(fp)
 10006b8:	1000b840 	call	1000b84 <__floatsisf>
 10006bc:	1021883a 	mov	r16,r2
 10006c0:	e13ffa17 	ldw	r4,-24(fp)
 10006c4:	1000b840 	call	1000b84 <__floatsisf>
 10006c8:	8009883a 	mov	r4,r16
 10006cc:	100b883a 	mov	r5,r2
 10006d0:	1000a100 	call	1000a10 <__divsf3>
 10006d4:	e0bffd15 	stw	r2,-12(fp)
	printf(" The program slept for %d ticks (%f seconds)\n\n", ticks_duration, duration);
 10006d8:	e13ffd17 	ldw	r4,-12(fp)
 10006dc:	1000c1c0 	call	1000c1c <__extendsfdf2>
 10006e0:	100f883a 	mov	r7,r2
 10006e4:	1811883a 	mov	r8,r3
 10006e8:	01004074 	movhi	r4,257
 10006ec:	21399b04 	addi	r4,r4,-6548
 10006f0:	e17ff917 	ldw	r5,-28(fp)
 10006f4:	380d883a 	mov	r6,r7
 10006f8:	400f883a 	mov	r7,r8
 10006fc:	10013240 	call	1001324 <printf>

	//TEST TIMESTAMP TIMER
	printf(" Timestamp Timer\n");
 1000700:	01004074 	movhi	r4,257
 1000704:	2139a704 	addi	r4,r4,-6500
 1000708:	100143c0 	call	100143c <puts>
	freq = alt_timestamp_freq();
 100070c:	100c6cc0 	call	100c6cc <alt_timestamp_freq>
 1000710:	e0bfff15 	stw	r2,-4(fp)
	printf(" CPU Freq: %.2fMHz\n", (float) freq / (float) 1000000);
 1000714:	e13fff17 	ldw	r4,-4(fp)
 1000718:	1000b840 	call	1000b84 <__floatsisf>
 100071c:	1009883a 	mov	r4,r2
 1000720:	01525d34 	movhi	r5,18804
 1000724:	29490004 	addi	r5,r5,9216
 1000728:	1000a100 	call	1000a10 <__divsf3>
 100072c:	1009883a 	mov	r4,r2
 1000730:	1000c1c0 	call	1000c1c <__extendsfdf2>
 1000734:	100d883a 	mov	r6,r2
 1000738:	180f883a 	mov	r7,r3
 100073c:	01004074 	movhi	r4,257
 1000740:	2139ac04 	addi	r4,r4,-6480
 1000744:	300b883a 	mov	r5,r6
 1000748:	380d883a 	mov	r6,r7
 100074c:	10013240 	call	1001324 <printf>
	printf(" Resetting Timestamp timer\n");
 1000750:	01004074 	movhi	r4,257
 1000754:	2139b104 	addi	r4,r4,-6460
 1000758:	100143c0 	call	100143c <puts>
	alt_timestamp_start();
 100075c:	100c58c0 	call	100c58c <alt_timestamp_start>
	printf(" ...Timing the print of this statement...\n");
 1000760:	01004074 	movhi	r4,257
 1000764:	2139b804 	addi	r4,r4,-6432
 1000768:	100143c0 	call	100143c <puts>
	cycles = alt_timestamp();
 100076c:	100c6300 	call	100c630 <alt_timestamp>
 1000770:	e0bffe15 	stw	r2,-8(fp)
	duration = (float) cycles / (float) freq;
 1000774:	e13ffe17 	ldw	r4,-8(fp)
 1000778:	1000b840 	call	1000b84 <__floatsisf>
 100077c:	1021883a 	mov	r16,r2
 1000780:	e13fff17 	ldw	r4,-4(fp)
 1000784:	1000b840 	call	1000b84 <__floatsisf>
 1000788:	8009883a 	mov	r4,r16
 100078c:	100b883a 	mov	r5,r2
 1000790:	1000a100 	call	1000a10 <__divsf3>
 1000794:	e0bffd15 	stw	r2,-12(fp)
	printf(" It took %d cycles (%f seconds) to print the statement\n\n", cycles, duration);
 1000798:	e13ffd17 	ldw	r4,-12(fp)
 100079c:	1000c1c0 	call	1000c1c <__extendsfdf2>
 10007a0:	100f883a 	mov	r7,r2
 10007a4:	1811883a 	mov	r8,r3
 10007a8:	01004074 	movhi	r4,257
 10007ac:	2139c304 	addi	r4,r4,-6388
 10007b0:	e17ffe17 	ldw	r5,-8(fp)
 10007b4:	380d883a 	mov	r6,r7
 10007b8:	400f883a 	mov	r7,r8
 10007bc:	10013240 	call	1001324 <printf>

	//TEST HARDWARE ONLY TIMER
	printf(" Hardware-Only Timer\n");
 10007c0:	01004074 	movhi	r4,257
 10007c4:	2139d204 	addi	r4,r4,-6328
 10007c8:	100143c0 	call	100143c <puts>
	printf(" Setting timer period to 5 seconds.\n");
 10007cc:	01004074 	movhi	r4,257
 10007d0:	2139d804 	addi	r4,r4,-6304
 10007d4:	100143c0 	call	100143c <puts>
	timer_period = 5 * 50000000;
 10007d8:	0083b9f4 	movhi	r2,3815
 10007dc:	10aca004 	addi	r2,r2,-19840
 10007e0:	e0bff815 	stw	r2,-32(fp)
	IOWR_16DIRECT(HARDWARE_TIMER_BASE, 8, timer_period & 0xFFFF);
 10007e4:	e0bff817 	ldw	r2,-32(fp)
 10007e8:	10ffffcc 	andi	r3,r2,65535
 10007ec:	00882204 	movi	r2,8328
 10007f0:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(HARDWARE_TIMER_BASE, 12, timer_period >> 16);
 10007f4:	e0bff817 	ldw	r2,-32(fp)
 10007f8:	1007d43a 	srai	r3,r2,16
 10007fc:	00882304 	movi	r2,8332
 1000800:	10c0002d 	sthio	r3,0(r2)
	printf(" Stopping Timer\n");
 1000804:	01004074 	movhi	r4,257
 1000808:	2139e104 	addi	r4,r4,-6268
 100080c:	100143c0 	call	100143c <puts>
	status = IORD_16DIRECT(HARDWARE_TIMER_BASE, 0);
 1000810:	00882004 	movi	r2,8320
 1000814:	1080002b 	ldhuio	r2,0(r2)
 1000818:	e0bff715 	stw	r2,-36(fp)
	if (status & 0x2) {
 100081c:	e0bff717 	ldw	r2,-36(fp)
 1000820:	1080008c 	andi	r2,r2,2
 1000824:	1005003a 	cmpeq	r2,r2,zero
 1000828:	1000031e 	bne	r2,zero,1000838 <timer_test+0x230>
	IOWR_16DIRECT(HARDWARE_TIMER_BASE, 4, 1 << 3);
 100082c:	00c82104 	movi	r3,8324
 1000830:	00800204 	movi	r2,8
 1000834:	1880002d 	sthio	r2,0(r3)
	}
	printf(" Starting Timer\n");
 1000838:	01004074 	movhi	r4,257
 100083c:	2139e504 	addi	r4,r4,-6252
 1000840:	100143c0 	call	100143c <puts>
	IOWR_16DIRECT(HARDWARE_TIMER_BASE, 4, 1 << 2);
 1000844:	00c82104 	movi	r3,8324
 1000848:	00800104 	movi	r2,4
 100084c:	1880002d 	sthio	r2,0(r3)
	printf(" Waiting for timer to expire...\n");
 1000850:	01004074 	movhi	r4,257
 1000854:	2139e904 	addi	r4,r4,-6236
 1000858:	100143c0 	call	100143c <puts>
	done = 0;
 100085c:	e03ff615 	stw	zero,-40(fp)
	while (! done) {
 1000860:	00000606 	br	100087c <timer_test+0x274>
	status = IORD_16DIRECT(HARDWARE_TIMER_BASE, 0);
 1000864:	00882004 	movi	r2,8320
 1000868:	1080002b 	ldhuio	r2,0(r2)
 100086c:	e0bff715 	stw	r2,-36(fp)
	done = status & 0x1;
 1000870:	e0bff717 	ldw	r2,-36(fp)
 1000874:	1080004c 	andi	r2,r2,1
 1000878:	e0bff615 	stw	r2,-40(fp)
	}
	printf(" Starting Timer\n");
	IOWR_16DIRECT(HARDWARE_TIMER_BASE, 4, 1 << 2);
	printf(" Waiting for timer to expire...\n");
	done = 0;
	while (! done) {
 100087c:	e0bff617 	ldw	r2,-40(fp)
 1000880:	1005003a 	cmpeq	r2,r2,zero
 1000884:	103ff71e 	bne	r2,zero,1000864 <timer_test+0x25c>
	status = IORD_16DIRECT(HARDWARE_TIMER_BASE, 0);
	done = status & 0x1;
	}
	printf(" 5 seconds timer is done\n");
 1000888:	01004074 	movhi	r4,257
 100088c:	2139f104 	addi	r4,r4,-6204
 1000890:	100143c0 	call	100143c <puts>
}
 1000894:	e037883a 	mov	sp,fp
 1000898:	dfc00217 	ldw	ra,8(sp)
 100089c:	df000117 	ldw	fp,4(sp)
 10008a0:	dc000017 	ldw	r16,0(sp)
 10008a4:	dec00304 	addi	sp,sp,12
 10008a8:	f800283a 	ret

010008ac <init_lcd>:

alt_up_character_lcd_dev* init_lcd(){
 10008ac:	defffd04 	addi	sp,sp,-12
 10008b0:	dfc00215 	stw	ra,8(sp)
 10008b4:	df000115 	stw	fp,4(sp)
 10008b8:	df000104 	addi	fp,sp,4
	// open the Character LCD port
	alt_up_character_lcd_dev* char_lcd_dev;
	char_lcd_dev = alt_up_character_lcd_open_dev (CHARACTER_LCD_0_NAME);
 10008bc:	01004074 	movhi	r4,257
 10008c0:	2139f804 	addi	r4,r4,-6176
 10008c4:	100c7d80 	call	100c7d8 <alt_up_character_lcd_open_dev>
 10008c8:	e0bfff15 	stw	r2,-4(fp)
	if ( char_lcd_dev == NULL)
 10008cc:	e0bfff17 	ldw	r2,-4(fp)
 10008d0:	1004c03a 	cmpne	r2,r2,zero
 10008d4:	1000041e 	bne	r2,zero,10008e8 <init_lcd+0x3c>
	  alt_printf ("Error: could not open character LCD device\n");
 10008d8:	01004074 	movhi	r4,257
 10008dc:	2139fe04 	addi	r4,r4,-6152
 10008e0:	100ad980 	call	100ad98 <alt_printf>
 10008e4:	00000306 	br	10008f4 <init_lcd+0x48>
	else
	  alt_printf ("Opened character LCD device\n");
 10008e8:	01004074 	movhi	r4,257
 10008ec:	213a0904 	addi	r4,r4,-6108
 10008f0:	100ad980 	call	100ad98 <alt_printf>
	return char_lcd_dev;
 10008f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10008f8:	e037883a 	mov	sp,fp
 10008fc:	dfc00117 	ldw	ra,4(sp)
 1000900:	df000017 	ldw	fp,0(sp)
 1000904:	dec00204 	addi	sp,sp,8
 1000908:	f800283a 	ret

0100090c <lcd_to_key>:

void lcd_to_key(alt_up_character_lcd_dev* char_lcd_dev){
 100090c:	defffd04 	addi	sp,sp,-12
 1000910:	dfc00215 	stw	ra,8(sp)
 1000914:	df000115 	stw	fp,4(sp)
 1000918:	df000104 	addi	fp,sp,4
 100091c:	e13fff15 	stw	r4,-4(fp)
	//KEY 0 is pressed
	if ((*keys) == 0xE){
 1000920:	00880804 	movi	r2,8224
 1000924:	10800003 	ldbu	r2,0(r2)
 1000928:	10803fcc 	andi	r2,r2,255
 100092c:	1080201c 	xori	r2,r2,128
 1000930:	10bfe004 	addi	r2,r2,-128
 1000934:	10800398 	cmpnei	r2,r2,14
 1000938:	1000071e 	bne	r2,zero,1000958 <lcd_to_key+0x4c>
		//Initialize LCD - clears display
		alt_up_character_lcd_init (char_lcd_dev);
 100093c:	e13fff17 	ldw	r4,-4(fp)
 1000940:	100c7a40 	call	100c7a4 <alt_up_character_lcd_init>
		//Print
		alt_up_character_lcd_string(char_lcd_dev, "KEY0");
 1000944:	e13fff17 	ldw	r4,-4(fp)
 1000948:	01404074 	movhi	r5,257
 100094c:	297a1104 	addi	r5,r5,-6076
 1000950:	100c8900 	call	100c890 <alt_up_character_lcd_string>
 1000954:	00002906 	br	10009fc <lcd_to_key+0xf0>
	}
	//KEY 1 is pressed
	else if ((*keys) == 0xD){
 1000958:	00880804 	movi	r2,8224
 100095c:	10800003 	ldbu	r2,0(r2)
 1000960:	10803fcc 	andi	r2,r2,255
 1000964:	1080201c 	xori	r2,r2,128
 1000968:	10bfe004 	addi	r2,r2,-128
 100096c:	10800358 	cmpnei	r2,r2,13
 1000970:	1000071e 	bne	r2,zero,1000990 <lcd_to_key+0x84>
		//Initialize LCD - clears display
		alt_up_character_lcd_init (char_lcd_dev);
 1000974:	e13fff17 	ldw	r4,-4(fp)
 1000978:	100c7a40 	call	100c7a4 <alt_up_character_lcd_init>
		//Print
		alt_up_character_lcd_string(char_lcd_dev, "KEY1");
 100097c:	e13fff17 	ldw	r4,-4(fp)
 1000980:	01404074 	movhi	r5,257
 1000984:	297a1304 	addi	r5,r5,-6068
 1000988:	100c8900 	call	100c890 <alt_up_character_lcd_string>
 100098c:	00001b06 	br	10009fc <lcd_to_key+0xf0>
	}
	//KEY 2 is pressed
	else if ((*keys) == 0xB){
 1000990:	00880804 	movi	r2,8224
 1000994:	10800003 	ldbu	r2,0(r2)
 1000998:	10803fcc 	andi	r2,r2,255
 100099c:	1080201c 	xori	r2,r2,128
 10009a0:	10bfe004 	addi	r2,r2,-128
 10009a4:	108002d8 	cmpnei	r2,r2,11
 10009a8:	1000071e 	bne	r2,zero,10009c8 <lcd_to_key+0xbc>
		//Initialize LCD - clears display
		alt_up_character_lcd_init (char_lcd_dev);
 10009ac:	e13fff17 	ldw	r4,-4(fp)
 10009b0:	100c7a40 	call	100c7a4 <alt_up_character_lcd_init>
		//Print
		alt_up_character_lcd_string(char_lcd_dev, "KEY2");
 10009b4:	e13fff17 	ldw	r4,-4(fp)
 10009b8:	01404074 	movhi	r5,257
 10009bc:	297a1504 	addi	r5,r5,-6060
 10009c0:	100c8900 	call	100c890 <alt_up_character_lcd_string>
 10009c4:	00000d06 	br	10009fc <lcd_to_key+0xf0>
	}
	//KEY 3 is pressed
	else if ((*keys) == 0x7){
 10009c8:	00880804 	movi	r2,8224
 10009cc:	10800003 	ldbu	r2,0(r2)
 10009d0:	10803fcc 	andi	r2,r2,255
 10009d4:	1080201c 	xori	r2,r2,128
 10009d8:	10bfe004 	addi	r2,r2,-128
 10009dc:	108001d8 	cmpnei	r2,r2,7
 10009e0:	1000061e 	bne	r2,zero,10009fc <lcd_to_key+0xf0>
		//Initialize LCD - clears display
		alt_up_character_lcd_init (char_lcd_dev);
 10009e4:	e13fff17 	ldw	r4,-4(fp)
 10009e8:	100c7a40 	call	100c7a4 <alt_up_character_lcd_init>
		//Print
		alt_up_character_lcd_string(char_lcd_dev, "KEY3");
 10009ec:	e13fff17 	ldw	r4,-4(fp)
 10009f0:	01404074 	movhi	r5,257
 10009f4:	297a1704 	addi	r5,r5,-6052
 10009f8:	100c8900 	call	100c890 <alt_up_character_lcd_string>
	}
}
 10009fc:	e037883a 	mov	sp,fp
 1000a00:	dfc00117 	ldw	ra,4(sp)
 1000a04:	df000017 	ldw	fp,0(sp)
 1000a08:	dec00204 	addi	sp,sp,8
 1000a0c:	f800283a 	ret

01000a10 <__divsf3>:
 1000a10:	defff304 	addi	sp,sp,-52
 1000a14:	dc400b15 	stw	r17,44(sp)
 1000a18:	dc400204 	addi	r17,sp,8
 1000a1c:	dc000a15 	stw	r16,40(sp)
 1000a20:	d9000015 	stw	r4,0(sp)
 1000a24:	d9400115 	stw	r5,4(sp)
 1000a28:	d809883a 	mov	r4,sp
 1000a2c:	880b883a 	mov	r5,r17
 1000a30:	dc000604 	addi	r16,sp,24
 1000a34:	dfc00c15 	stw	ra,48(sp)
 1000a38:	1000f480 	call	1000f48 <__unpack_f>
 1000a3c:	d9000104 	addi	r4,sp,4
 1000a40:	800b883a 	mov	r5,r16
 1000a44:	1000f480 	call	1000f48 <__unpack_f>
 1000a48:	d9000217 	ldw	r4,8(sp)
 1000a4c:	00800044 	movi	r2,1
 1000a50:	01800104 	movi	r6,4
 1000a54:	11000a2e 	bgeu	r2,r4,1000a80 <__divsf3+0x70>
 1000a58:	d9400617 	ldw	r5,24(sp)
 1000a5c:	1140432e 	bgeu	r2,r5,1000b6c <__divsf3+0x15c>
 1000a60:	d8800317 	ldw	r2,12(sp)
 1000a64:	d8c00717 	ldw	r3,28(sp)
 1000a68:	10c4f03a 	xor	r2,r2,r3
 1000a6c:	d8800315 	stw	r2,12(sp)
 1000a70:	21800226 	beq	r4,r6,1000a7c <__divsf3+0x6c>
 1000a74:	00800084 	movi	r2,2
 1000a78:	2080101e 	bne	r4,r2,1000abc <__divsf3+0xac>
 1000a7c:	29000726 	beq	r5,r4,1000a9c <__divsf3+0x8c>
 1000a80:	8809883a 	mov	r4,r17
 1000a84:	1000de80 	call	1000de8 <__pack_f>
 1000a88:	dfc00c17 	ldw	ra,48(sp)
 1000a8c:	dc400b17 	ldw	r17,44(sp)
 1000a90:	dc000a17 	ldw	r16,40(sp)
 1000a94:	dec00d04 	addi	sp,sp,52
 1000a98:	f800283a 	ret
 1000a9c:	01004074 	movhi	r4,257
 1000aa0:	213a1904 	addi	r4,r4,-6044
 1000aa4:	1000de80 	call	1000de8 <__pack_f>
 1000aa8:	dfc00c17 	ldw	ra,48(sp)
 1000aac:	dc400b17 	ldw	r17,44(sp)
 1000ab0:	dc000a17 	ldw	r16,40(sp)
 1000ab4:	dec00d04 	addi	sp,sp,52
 1000ab8:	f800283a 	ret
 1000abc:	29802d26 	beq	r5,r6,1000b74 <__divsf3+0x164>
 1000ac0:	28801a26 	beq	r5,r2,1000b2c <__divsf3+0x11c>
 1000ac4:	d8c00417 	ldw	r3,16(sp)
 1000ac8:	d8800817 	ldw	r2,32(sp)
 1000acc:	d9000517 	ldw	r4,20(sp)
 1000ad0:	d9800917 	ldw	r6,36(sp)
 1000ad4:	1885c83a 	sub	r2,r3,r2
 1000ad8:	d8800415 	stw	r2,16(sp)
 1000adc:	2180032e 	bgeu	r4,r6,1000aec <__divsf3+0xdc>
 1000ae0:	10bfffc4 	addi	r2,r2,-1
 1000ae4:	d8800415 	stw	r2,16(sp)
 1000ae8:	2109883a 	add	r4,r4,r4
 1000aec:	01500034 	movhi	r5,16384
 1000af0:	0007883a 	mov	r3,zero
 1000af4:	0005883a 	mov	r2,zero
 1000af8:	01c007c4 	movi	r7,31
 1000afc:	10800044 	addi	r2,r2,1
 1000b00:	21800236 	bltu	r4,r6,1000b0c <__divsf3+0xfc>
 1000b04:	1946b03a 	or	r3,r3,r5
 1000b08:	2189c83a 	sub	r4,r4,r6
 1000b0c:	280ad07a 	srli	r5,r5,1
 1000b10:	2109883a 	add	r4,r4,r4
 1000b14:	11fff91e 	bne	r2,r7,1000afc <__divsf3+0xec>
 1000b18:	19401fcc 	andi	r5,r3,127
 1000b1c:	00801004 	movi	r2,64
 1000b20:	28800a26 	beq	r5,r2,1000b4c <__divsf3+0x13c>
 1000b24:	d8c00515 	stw	r3,20(sp)
 1000b28:	003fd506 	br	1000a80 <__divsf3+0x70>
 1000b2c:	8809883a 	mov	r4,r17
 1000b30:	d9800215 	stw	r6,8(sp)
 1000b34:	1000de80 	call	1000de8 <__pack_f>
 1000b38:	dfc00c17 	ldw	ra,48(sp)
 1000b3c:	dc400b17 	ldw	r17,44(sp)
 1000b40:	dc000a17 	ldw	r16,40(sp)
 1000b44:	dec00d04 	addi	sp,sp,52
 1000b48:	f800283a 	ret
 1000b4c:	1880200c 	andi	r2,r3,128
 1000b50:	103ff41e 	bne	r2,zero,1000b24 <__divsf3+0x114>
 1000b54:	203ff326 	beq	r4,zero,1000b24 <__divsf3+0x114>
 1000b58:	1947883a 	add	r3,r3,r5
 1000b5c:	00bfe004 	movi	r2,-128
 1000b60:	1886703a 	and	r3,r3,r2
 1000b64:	d8c00515 	stw	r3,20(sp)
 1000b68:	003fc506 	br	1000a80 <__divsf3+0x70>
 1000b6c:	8009883a 	mov	r4,r16
 1000b70:	003fc406 	br	1000a84 <__divsf3+0x74>
 1000b74:	8809883a 	mov	r4,r17
 1000b78:	d8000515 	stw	zero,20(sp)
 1000b7c:	d8000415 	stw	zero,16(sp)
 1000b80:	003fc006 	br	1000a84 <__divsf3+0x74>

01000b84 <__floatsisf>:
 1000b84:	2006d7fa 	srli	r3,r4,31
 1000b88:	defffa04 	addi	sp,sp,-24
 1000b8c:	008000c4 	movi	r2,3
 1000b90:	dfc00515 	stw	ra,20(sp)
 1000b94:	dc000415 	stw	r16,16(sp)
 1000b98:	d8800015 	stw	r2,0(sp)
 1000b9c:	d8c00115 	stw	r3,4(sp)
 1000ba0:	2000081e 	bne	r4,zero,1000bc4 <__floatsisf+0x40>
 1000ba4:	00800084 	movi	r2,2
 1000ba8:	d8800015 	stw	r2,0(sp)
 1000bac:	d809883a 	mov	r4,sp
 1000bb0:	1000de80 	call	1000de8 <__pack_f>
 1000bb4:	dfc00517 	ldw	ra,20(sp)
 1000bb8:	dc000417 	ldw	r16,16(sp)
 1000bbc:	dec00604 	addi	sp,sp,24
 1000bc0:	f800283a 	ret
 1000bc4:	00800784 	movi	r2,30
 1000bc8:	1807003a 	cmpeq	r3,r3,zero
 1000bcc:	d8800215 	stw	r2,8(sp)
 1000bd0:	18000e1e 	bne	r3,zero,1000c0c <__floatsisf+0x88>
 1000bd4:	00a00034 	movhi	r2,32768
 1000bd8:	20800e26 	beq	r4,r2,1000c14 <__floatsisf+0x90>
 1000bdc:	0121c83a 	sub	r16,zero,r4
 1000be0:	8009883a 	mov	r4,r16
 1000be4:	dc000315 	stw	r16,12(sp)
 1000be8:	1000d680 	call	1000d68 <__clzsi2>
 1000bec:	117fffc4 	addi	r5,r2,-1
 1000bf0:	017fee0e 	bge	zero,r5,1000bac <__floatsisf+0x28>
 1000bf4:	d8800217 	ldw	r2,8(sp)
 1000bf8:	8146983a 	sll	r3,r16,r5
 1000bfc:	1145c83a 	sub	r2,r2,r5
 1000c00:	d8c00315 	stw	r3,12(sp)
 1000c04:	d8800215 	stw	r2,8(sp)
 1000c08:	003fe806 	br	1000bac <__floatsisf+0x28>
 1000c0c:	2021883a 	mov	r16,r4
 1000c10:	003ff306 	br	1000be0 <__floatsisf+0x5c>
 1000c14:	00b3c034 	movhi	r2,52992
 1000c18:	003fe606 	br	1000bb4 <__floatsisf+0x30>

01000c1c <__extendsfdf2>:
 1000c1c:	defff904 	addi	sp,sp,-28
 1000c20:	d9000115 	stw	r4,4(sp)
 1000c24:	d9400204 	addi	r5,sp,8
 1000c28:	d9000104 	addi	r4,sp,4
 1000c2c:	dfc00615 	stw	ra,24(sp)
 1000c30:	1000f480 	call	1000f48 <__unpack_f>
 1000c34:	d9c00517 	ldw	r7,20(sp)
 1000c38:	0011883a 	mov	r8,zero
 1000c3c:	400697ba 	slli	r3,r8,30
 1000c40:	3812d0ba 	srli	r9,r7,2
 1000c44:	380497ba 	slli	r2,r7,30
 1000c48:	d9000217 	ldw	r4,8(sp)
 1000c4c:	d9400317 	ldw	r5,12(sp)
 1000c50:	d9800417 	ldw	r6,16(sp)
 1000c54:	48c6b03a 	or	r3,r9,r3
 1000c58:	100f883a 	mov	r7,r2
 1000c5c:	d8c00015 	stw	r3,0(sp)
 1000c60:	1000d300 	call	1000d30 <__make_dp>
 1000c64:	dfc00617 	ldw	ra,24(sp)
 1000c68:	dec00704 	addi	sp,sp,28
 1000c6c:	f800283a 	ret

01000c70 <__floatunsisf>:
 1000c70:	defff904 	addi	sp,sp,-28
 1000c74:	dc400515 	stw	r17,20(sp)
 1000c78:	dc000415 	stw	r16,16(sp)
 1000c7c:	dfc00615 	stw	ra,24(sp)
 1000c80:	04400784 	movi	r17,30
 1000c84:	2021883a 	mov	r16,r4
 1000c88:	d8000115 	stw	zero,4(sp)
 1000c8c:	2000091e 	bne	r4,zero,1000cb4 <__floatunsisf+0x44>
 1000c90:	00800084 	movi	r2,2
 1000c94:	d8800015 	stw	r2,0(sp)
 1000c98:	d809883a 	mov	r4,sp
 1000c9c:	1000de80 	call	1000de8 <__pack_f>
 1000ca0:	dfc00617 	ldw	ra,24(sp)
 1000ca4:	dc400517 	ldw	r17,20(sp)
 1000ca8:	dc000417 	ldw	r16,16(sp)
 1000cac:	dec00704 	addi	sp,sp,28
 1000cb0:	f800283a 	ret
 1000cb4:	008000c4 	movi	r2,3
 1000cb8:	d9000315 	stw	r4,12(sp)
 1000cbc:	d8800015 	stw	r2,0(sp)
 1000cc0:	dc400215 	stw	r17,8(sp)
 1000cc4:	1000d680 	call	1000d68 <__clzsi2>
 1000cc8:	117fffc4 	addi	r5,r2,-1
 1000ccc:	0147c83a 	sub	r3,zero,r5
 1000cd0:	00800044 	movi	r2,1
 1000cd4:	10c4983a 	sll	r2,r2,r3
 1000cd8:	80c6d83a 	srl	r3,r16,r3
 1000cdc:	8949c83a 	sub	r4,r17,r5
 1000ce0:	10bfffc4 	addi	r2,r2,-1
 1000ce4:	8084703a 	and	r2,r16,r2
 1000ce8:	1004c03a 	cmpne	r2,r2,zero
 1000cec:	1886b03a 	or	r3,r3,r2
 1000cf0:	28000c16 	blt	r5,zero,1000d24 <__floatunsisf+0xb4>
 1000cf4:	8144983a 	sll	r2,r16,r5
 1000cf8:	8947c83a 	sub	r3,r17,r5
 1000cfc:	283fe626 	beq	r5,zero,1000c98 <__floatunsisf+0x28>
 1000d00:	d809883a 	mov	r4,sp
 1000d04:	d8800315 	stw	r2,12(sp)
 1000d08:	d8c00215 	stw	r3,8(sp)
 1000d0c:	1000de80 	call	1000de8 <__pack_f>
 1000d10:	dfc00617 	ldw	ra,24(sp)
 1000d14:	dc400517 	ldw	r17,20(sp)
 1000d18:	dc000417 	ldw	r16,16(sp)
 1000d1c:	dec00704 	addi	sp,sp,28
 1000d20:	f800283a 	ret
 1000d24:	d8c00315 	stw	r3,12(sp)
 1000d28:	d9000215 	stw	r4,8(sp)
 1000d2c:	003fda06 	br	1000c98 <__floatunsisf+0x28>

01000d30 <__make_dp>:
 1000d30:	defff904 	addi	sp,sp,-28
 1000d34:	d8c00717 	ldw	r3,28(sp)
 1000d38:	d9000015 	stw	r4,0(sp)
 1000d3c:	d809883a 	mov	r4,sp
 1000d40:	dfc00515 	stw	ra,20(sp)
 1000d44:	d9c00615 	stw	r7,24(sp)
 1000d48:	d9400115 	stw	r5,4(sp)
 1000d4c:	d9800215 	stw	r6,8(sp)
 1000d50:	d8c00415 	stw	r3,16(sp)
 1000d54:	d9c00315 	stw	r7,12(sp)
 1000d58:	10010100 	call	1001010 <__pack_d>
 1000d5c:	dfc00517 	ldw	ra,20(sp)
 1000d60:	dec00704 	addi	sp,sp,28
 1000d64:	f800283a 	ret

01000d68 <__clzsi2>:
 1000d68:	00bfffd4 	movui	r2,65535
 1000d6c:	11000e36 	bltu	r2,r4,1000da8 <__clzsi2+0x40>
 1000d70:	00803fc4 	movi	r2,255
 1000d74:	01400204 	movi	r5,8
 1000d78:	0007883a 	mov	r3,zero
 1000d7c:	11001036 	bltu	r2,r4,1000dc0 <__clzsi2+0x58>
 1000d80:	000b883a 	mov	r5,zero
 1000d84:	20c6d83a 	srl	r3,r4,r3
 1000d88:	00804074 	movhi	r2,257
 1000d8c:	10ba1d04 	addi	r2,r2,-6028
 1000d90:	1887883a 	add	r3,r3,r2
 1000d94:	18800003 	ldbu	r2,0(r3)
 1000d98:	00c00804 	movi	r3,32
 1000d9c:	2885883a 	add	r2,r5,r2
 1000da0:	1885c83a 	sub	r2,r3,r2
 1000da4:	f800283a 	ret
 1000da8:	01400404 	movi	r5,16
 1000dac:	00804034 	movhi	r2,256
 1000db0:	10bfffc4 	addi	r2,r2,-1
 1000db4:	2807883a 	mov	r3,r5
 1000db8:	113ff22e 	bgeu	r2,r4,1000d84 <__clzsi2+0x1c>
 1000dbc:	01400604 	movi	r5,24
 1000dc0:	2807883a 	mov	r3,r5
 1000dc4:	20c6d83a 	srl	r3,r4,r3
 1000dc8:	00804074 	movhi	r2,257
 1000dcc:	10ba1d04 	addi	r2,r2,-6028
 1000dd0:	1887883a 	add	r3,r3,r2
 1000dd4:	18800003 	ldbu	r2,0(r3)
 1000dd8:	00c00804 	movi	r3,32
 1000ddc:	2885883a 	add	r2,r5,r2
 1000de0:	1885c83a 	sub	r2,r3,r2
 1000de4:	f800283a 	ret

01000de8 <__pack_f>:
 1000de8:	20c00017 	ldw	r3,0(r4)
 1000dec:	01c00044 	movi	r7,1
 1000df0:	21800317 	ldw	r6,12(r4)
 1000df4:	21400117 	ldw	r5,4(r4)
 1000df8:	38c02d2e 	bgeu	r7,r3,1000eb0 <__pack_f+0xc8>
 1000dfc:	00800104 	movi	r2,4
 1000e00:	18802826 	beq	r3,r2,1000ea4 <__pack_f+0xbc>
 1000e04:	00800084 	movi	r2,2
 1000e08:	18800126 	beq	r3,r2,1000e10 <__pack_f+0x28>
 1000e0c:	3000101e 	bne	r6,zero,1000e50 <__pack_f+0x68>
 1000e10:	000d883a 	mov	r6,zero
 1000e14:	0007883a 	mov	r3,zero
 1000e18:	19003fcc 	andi	r4,r3,255
 1000e1c:	200895fa 	slli	r4,r4,23
 1000e20:	00c02034 	movhi	r3,128
 1000e24:	18ffffc4 	addi	r3,r3,-1
 1000e28:	30c6703a 	and	r3,r6,r3
 1000e2c:	10a0002c 	andhi	r2,r2,32768
 1000e30:	10c4b03a 	or	r2,r2,r3
 1000e34:	280a97fa 	slli	r5,r5,31
 1000e38:	1104b03a 	or	r2,r2,r4
 1000e3c:	00e00034 	movhi	r3,32768
 1000e40:	18ffffc4 	addi	r3,r3,-1
 1000e44:	10c4703a 	and	r2,r2,r3
 1000e48:	1144b03a 	or	r2,r2,r5
 1000e4c:	f800283a 	ret
 1000e50:	21000217 	ldw	r4,8(r4)
 1000e54:	00bfe084 	movi	r2,-126
 1000e58:	20801b16 	blt	r4,r2,1000ec8 <__pack_f+0xe0>
 1000e5c:	00801fc4 	movi	r2,127
 1000e60:	11001016 	blt	r2,r4,1000ea4 <__pack_f+0xbc>
 1000e64:	308e703a 	and	r7,r6,r2
 1000e68:	2087883a 	add	r3,r4,r2
 1000e6c:	00801004 	movi	r2,64
 1000e70:	38800526 	beq	r7,r2,1000e88 <__pack_f+0xa0>
 1000e74:	31800fc4 	addi	r6,r6,63
 1000e78:	30000716 	blt	r6,zero,1000e98 <__pack_f+0xb0>
 1000e7c:	300490ba 	slli	r2,r6,2
 1000e80:	100cd27a 	srli	r6,r2,9
 1000e84:	003fe406 	br	1000e18 <__pack_f+0x30>
 1000e88:	3080200c 	andi	r2,r6,128
 1000e8c:	103ffa26 	beq	r2,zero,1000e78 <__pack_f+0x90>
 1000e90:	31cd883a 	add	r6,r6,r7
 1000e94:	003ff806 	br	1000e78 <__pack_f+0x90>
 1000e98:	300cd07a 	srli	r6,r6,1
 1000e9c:	18c00044 	addi	r3,r3,1
 1000ea0:	003ff606 	br	1000e7c <__pack_f+0x94>
 1000ea4:	000d883a 	mov	r6,zero
 1000ea8:	00ffffc4 	movi	r3,-1
 1000eac:	003fda06 	br	1000e18 <__pack_f+0x30>
 1000eb0:	31800434 	orhi	r6,r6,16
 1000eb4:	00802034 	movhi	r2,128
 1000eb8:	10bfffc4 	addi	r2,r2,-1
 1000ebc:	308c703a 	and	r6,r6,r2
 1000ec0:	00ffffc4 	movi	r3,-1
 1000ec4:	003fd406 	br	1000e18 <__pack_f+0x30>
 1000ec8:	1109c83a 	sub	r4,r2,r4
 1000ecc:	00800644 	movi	r2,25
 1000ed0:	11001216 	blt	r2,r4,1000f1c <__pack_f+0x134>
 1000ed4:	3904983a 	sll	r2,r7,r4
 1000ed8:	3106d83a 	srl	r3,r6,r4
 1000edc:	10bfffc4 	addi	r2,r2,-1
 1000ee0:	3084703a 	and	r2,r6,r2
 1000ee4:	1004c03a 	cmpne	r2,r2,zero
 1000ee8:	1886b03a 	or	r3,r3,r2
 1000eec:	19001fcc 	andi	r4,r3,127
 1000ef0:	00801004 	movi	r2,64
 1000ef4:	20800c26 	beq	r4,r2,1000f28 <__pack_f+0x140>
 1000ef8:	18c00fc4 	addi	r3,r3,63
 1000efc:	00900034 	movhi	r2,16384
 1000f00:	10bfffc4 	addi	r2,r2,-1
 1000f04:	180cd1fa 	srli	r6,r3,7
 1000f08:	10c7803a 	cmpltu	r3,r2,r3
 1000f0c:	00802034 	movhi	r2,128
 1000f10:	10bfffc4 	addi	r2,r2,-1
 1000f14:	308c703a 	and	r6,r6,r2
 1000f18:	003fbf06 	br	1000e18 <__pack_f+0x30>
 1000f1c:	0007883a 	mov	r3,zero
 1000f20:	000d883a 	mov	r6,zero
 1000f24:	003ff906 	br	1000f0c <__pack_f+0x124>
 1000f28:	1880200c 	andi	r2,r3,128
 1000f2c:	10000126 	beq	r2,zero,1000f34 <__pack_f+0x14c>
 1000f30:	1907883a 	add	r3,r3,r4
 1000f34:	180cd1fa 	srli	r6,r3,7
 1000f38:	00900034 	movhi	r2,16384
 1000f3c:	10bfffc4 	addi	r2,r2,-1
 1000f40:	10c7803a 	cmpltu	r3,r2,r3
 1000f44:	003ff106 	br	1000f0c <__pack_f+0x124>

01000f48 <__unpack_f>:
 1000f48:	21800017 	ldw	r6,0(r4)
 1000f4c:	00c02034 	movhi	r3,128
 1000f50:	18ffffc4 	addi	r3,r3,-1
 1000f54:	3004d5fa 	srli	r2,r6,23
 1000f58:	3008d7fa 	srli	r4,r6,31
 1000f5c:	30ce703a 	and	r7,r6,r3
 1000f60:	10c03fcc 	andi	r3,r2,255
 1000f64:	29000115 	stw	r4,4(r5)
 1000f68:	1800131e 	bne	r3,zero,1000fb8 <__unpack_f+0x70>
 1000f6c:	38000f26 	beq	r7,zero,1000fac <__unpack_f+0x64>
 1000f70:	380691fa 	slli	r3,r7,7
 1000f74:	01bfe084 	movi	r6,-126
 1000f78:	008000c4 	movi	r2,3
 1000f7c:	01100034 	movhi	r4,16384
 1000f80:	213fffc4 	addi	r4,r4,-1
 1000f84:	28800015 	stw	r2,0(r5)
 1000f88:	29800215 	stw	r6,8(r5)
 1000f8c:	20c00536 	bltu	r4,r3,1000fa4 <__unpack_f+0x5c>
 1000f90:	3005883a 	mov	r2,r6
 1000f94:	18c7883a 	add	r3,r3,r3
 1000f98:	10bfffc4 	addi	r2,r2,-1
 1000f9c:	20fffd2e 	bgeu	r4,r3,1000f94 <__unpack_f+0x4c>
 1000fa0:	28800215 	stw	r2,8(r5)
 1000fa4:	28c00315 	stw	r3,12(r5)
 1000fa8:	f800283a 	ret
 1000fac:	00800084 	movi	r2,2
 1000fb0:	28800015 	stw	r2,0(r5)
 1000fb4:	f800283a 	ret
 1000fb8:	00803fc4 	movi	r2,255
 1000fbc:	18800826 	beq	r3,r2,1000fe0 <__unpack_f+0x98>
 1000fc0:	380491fa 	slli	r2,r7,7
 1000fc4:	18ffe044 	addi	r3,r3,-127
 1000fc8:	28c00215 	stw	r3,8(r5)
 1000fcc:	10900034 	orhi	r2,r2,16384
 1000fd0:	28800315 	stw	r2,12(r5)
 1000fd4:	008000c4 	movi	r2,3
 1000fd8:	28800015 	stw	r2,0(r5)
 1000fdc:	f800283a 	ret
 1000fe0:	3800031e 	bne	r7,zero,1000ff0 <__unpack_f+0xa8>
 1000fe4:	00800104 	movi	r2,4
 1000fe8:	28800015 	stw	r2,0(r5)
 1000fec:	f800283a 	ret
 1000ff0:	3080042c 	andhi	r2,r6,16
 1000ff4:	10000426 	beq	r2,zero,1001008 <__unpack_f+0xc0>
 1000ff8:	00800044 	movi	r2,1
 1000ffc:	28800015 	stw	r2,0(r5)
 1001000:	29c00315 	stw	r7,12(r5)
 1001004:	f800283a 	ret
 1001008:	28000015 	stw	zero,0(r5)
 100100c:	003ffc06 	br	1001000 <__unpack_f+0xb8>

01001010 <__pack_d>:
 1001010:	20c00017 	ldw	r3,0(r4)
 1001014:	defffd04 	addi	sp,sp,-12
 1001018:	dc000015 	stw	r16,0(sp)
 100101c:	dc800215 	stw	r18,8(sp)
 1001020:	dc400115 	stw	r17,4(sp)
 1001024:	00800044 	movi	r2,1
 1001028:	22000317 	ldw	r8,12(r4)
 100102c:	001f883a 	mov	r15,zero
 1001030:	22400417 	ldw	r9,16(r4)
 1001034:	24000117 	ldw	r16,4(r4)
 1001038:	10c0552e 	bgeu	r2,r3,1001190 <__pack_d+0x180>
 100103c:	00800104 	movi	r2,4
 1001040:	18804f26 	beq	r3,r2,1001180 <__pack_d+0x170>
 1001044:	00800084 	movi	r2,2
 1001048:	18800226 	beq	r3,r2,1001054 <__pack_d+0x44>
 100104c:	4244b03a 	or	r2,r8,r9
 1001050:	10001a1e 	bne	r2,zero,10010bc <__pack_d+0xac>
 1001054:	000d883a 	mov	r6,zero
 1001058:	000f883a 	mov	r7,zero
 100105c:	0011883a 	mov	r8,zero
 1001060:	00800434 	movhi	r2,16
 1001064:	10bfffc4 	addi	r2,r2,-1
 1001068:	301d883a 	mov	r14,r6
 100106c:	3884703a 	and	r2,r7,r2
 1001070:	400a953a 	slli	r5,r8,20
 1001074:	79bffc2c 	andhi	r6,r15,65520
 1001078:	308cb03a 	or	r6,r6,r2
 100107c:	00e00434 	movhi	r3,32784
 1001080:	18ffffc4 	addi	r3,r3,-1
 1001084:	800497fa 	slli	r2,r16,31
 1001088:	30c6703a 	and	r3,r6,r3
 100108c:	1946b03a 	or	r3,r3,r5
 1001090:	01600034 	movhi	r5,32768
 1001094:	297fffc4 	addi	r5,r5,-1
 1001098:	194a703a 	and	r5,r3,r5
 100109c:	288ab03a 	or	r5,r5,r2
 10010a0:	2807883a 	mov	r3,r5
 10010a4:	7005883a 	mov	r2,r14
 10010a8:	dc800217 	ldw	r18,8(sp)
 10010ac:	dc400117 	ldw	r17,4(sp)
 10010b0:	dc000017 	ldw	r16,0(sp)
 10010b4:	dec00304 	addi	sp,sp,12
 10010b8:	f800283a 	ret
 10010bc:	21000217 	ldw	r4,8(r4)
 10010c0:	00bf0084 	movi	r2,-1022
 10010c4:	20803f16 	blt	r4,r2,10011c4 <__pack_d+0x1b4>
 10010c8:	0080ffc4 	movi	r2,1023
 10010cc:	11002c16 	blt	r2,r4,1001180 <__pack_d+0x170>
 10010d0:	00803fc4 	movi	r2,255
 10010d4:	408c703a 	and	r6,r8,r2
 10010d8:	00802004 	movi	r2,128
 10010dc:	0007883a 	mov	r3,zero
 10010e0:	000f883a 	mov	r7,zero
 10010e4:	2280ffc4 	addi	r10,r4,1023
 10010e8:	30801e26 	beq	r6,r2,1001164 <__pack_d+0x154>
 10010ec:	00801fc4 	movi	r2,127
 10010f0:	4089883a 	add	r4,r8,r2
 10010f4:	220d803a 	cmpltu	r6,r4,r8
 10010f8:	324d883a 	add	r6,r6,r9
 10010fc:	2011883a 	mov	r8,r4
 1001100:	3013883a 	mov	r9,r6
 1001104:	00880034 	movhi	r2,8192
 1001108:	10bfffc4 	addi	r2,r2,-1
 100110c:	12400d36 	bltu	r2,r9,1001144 <__pack_d+0x134>
 1001110:	4804963a 	slli	r2,r9,24
 1001114:	400cd23a 	srli	r6,r8,8
 1001118:	480ed23a 	srli	r7,r9,8
 100111c:	013fffc4 	movi	r4,-1
 1001120:	118cb03a 	or	r6,r2,r6
 1001124:	01400434 	movhi	r5,16
 1001128:	297fffc4 	addi	r5,r5,-1
 100112c:	3104703a 	and	r2,r6,r4
 1001130:	3946703a 	and	r3,r7,r5
 1001134:	5201ffcc 	andi	r8,r10,2047
 1001138:	100d883a 	mov	r6,r2
 100113c:	180f883a 	mov	r7,r3
 1001140:	003fc706 	br	1001060 <__pack_d+0x50>
 1001144:	480897fa 	slli	r4,r9,31
 1001148:	4004d07a 	srli	r2,r8,1
 100114c:	4806d07a 	srli	r3,r9,1
 1001150:	52800044 	addi	r10,r10,1
 1001154:	2084b03a 	or	r2,r4,r2
 1001158:	1011883a 	mov	r8,r2
 100115c:	1813883a 	mov	r9,r3
 1001160:	003feb06 	br	1001110 <__pack_d+0x100>
 1001164:	383fe11e 	bne	r7,zero,10010ec <__pack_d+0xdc>
 1001168:	01004004 	movi	r4,256
 100116c:	4104703a 	and	r2,r8,r4
 1001170:	10c4b03a 	or	r2,r2,r3
 1001174:	103fe326 	beq	r2,zero,1001104 <__pack_d+0xf4>
 1001178:	3005883a 	mov	r2,r6
 100117c:	003fdc06 	br	10010f0 <__pack_d+0xe0>
 1001180:	000d883a 	mov	r6,zero
 1001184:	000f883a 	mov	r7,zero
 1001188:	0201ffc4 	movi	r8,2047
 100118c:	003fb406 	br	1001060 <__pack_d+0x50>
 1001190:	0005883a 	mov	r2,zero
 1001194:	00c00234 	movhi	r3,8
 1001198:	408cb03a 	or	r6,r8,r2
 100119c:	48ceb03a 	or	r7,r9,r3
 10011a0:	013fffc4 	movi	r4,-1
 10011a4:	01400434 	movhi	r5,16
 10011a8:	297fffc4 	addi	r5,r5,-1
 10011ac:	3104703a 	and	r2,r6,r4
 10011b0:	3946703a 	and	r3,r7,r5
 10011b4:	100d883a 	mov	r6,r2
 10011b8:	180f883a 	mov	r7,r3
 10011bc:	0201ffc4 	movi	r8,2047
 10011c0:	003fa706 	br	1001060 <__pack_d+0x50>
 10011c4:	1109c83a 	sub	r4,r2,r4
 10011c8:	00800e04 	movi	r2,56
 10011cc:	11004316 	blt	r2,r4,10012dc <__pack_d+0x2cc>
 10011d0:	21fff804 	addi	r7,r4,-32
 10011d4:	38004516 	blt	r7,zero,10012ec <__pack_d+0x2dc>
 10011d8:	49d8d83a 	srl	r12,r9,r7
 10011dc:	001b883a 	mov	r13,zero
 10011e0:	0023883a 	mov	r17,zero
 10011e4:	01400044 	movi	r5,1
 10011e8:	0025883a 	mov	r18,zero
 10011ec:	38004716 	blt	r7,zero,100130c <__pack_d+0x2fc>
 10011f0:	29d6983a 	sll	r11,r5,r7
 10011f4:	0015883a 	mov	r10,zero
 10011f8:	00bfffc4 	movi	r2,-1
 10011fc:	5089883a 	add	r4,r10,r2
 1001200:	588b883a 	add	r5,r11,r2
 1001204:	228d803a 	cmpltu	r6,r4,r10
 1001208:	314b883a 	add	r5,r6,r5
 100120c:	4104703a 	and	r2,r8,r4
 1001210:	4946703a 	and	r3,r9,r5
 1001214:	10c4b03a 	or	r2,r2,r3
 1001218:	10000226 	beq	r2,zero,1001224 <__pack_d+0x214>
 100121c:	04400044 	movi	r17,1
 1001220:	0025883a 	mov	r18,zero
 1001224:	00803fc4 	movi	r2,255
 1001228:	644eb03a 	or	r7,r12,r17
 100122c:	3892703a 	and	r9,r7,r2
 1001230:	00802004 	movi	r2,128
 1001234:	6c90b03a 	or	r8,r13,r18
 1001238:	0015883a 	mov	r10,zero
 100123c:	48801626 	beq	r9,r2,1001298 <__pack_d+0x288>
 1001240:	01001fc4 	movi	r4,127
 1001244:	3905883a 	add	r2,r7,r4
 1001248:	11cd803a 	cmpltu	r6,r2,r7
 100124c:	320d883a 	add	r6,r6,r8
 1001250:	100f883a 	mov	r7,r2
 1001254:	00840034 	movhi	r2,4096
 1001258:	10bfffc4 	addi	r2,r2,-1
 100125c:	3011883a 	mov	r8,r6
 1001260:	0007883a 	mov	r3,zero
 1001264:	11801b36 	bltu	r2,r6,10012d4 <__pack_d+0x2c4>
 1001268:	4004963a 	slli	r2,r8,24
 100126c:	3808d23a 	srli	r4,r7,8
 1001270:	400ad23a 	srli	r5,r8,8
 1001274:	1813883a 	mov	r9,r3
 1001278:	1108b03a 	or	r4,r2,r4
 100127c:	00bfffc4 	movi	r2,-1
 1001280:	00c00434 	movhi	r3,16
 1001284:	18ffffc4 	addi	r3,r3,-1
 1001288:	208c703a 	and	r6,r4,r2
 100128c:	28ce703a 	and	r7,r5,r3
 1001290:	4a01ffcc 	andi	r8,r9,2047
 1001294:	003f7206 	br	1001060 <__pack_d+0x50>
 1001298:	503fe91e 	bne	r10,zero,1001240 <__pack_d+0x230>
 100129c:	01004004 	movi	r4,256
 10012a0:	3904703a 	and	r2,r7,r4
 10012a4:	0007883a 	mov	r3,zero
 10012a8:	10c4b03a 	or	r2,r2,r3
 10012ac:	10000626 	beq	r2,zero,10012c8 <__pack_d+0x2b8>
 10012b0:	3a45883a 	add	r2,r7,r9
 10012b4:	11cd803a 	cmpltu	r6,r2,r7
 10012b8:	320d883a 	add	r6,r6,r8
 10012bc:	100f883a 	mov	r7,r2
 10012c0:	3011883a 	mov	r8,r6
 10012c4:	0007883a 	mov	r3,zero
 10012c8:	00840034 	movhi	r2,4096
 10012cc:	10bfffc4 	addi	r2,r2,-1
 10012d0:	123fe52e 	bgeu	r2,r8,1001268 <__pack_d+0x258>
 10012d4:	00c00044 	movi	r3,1
 10012d8:	003fe306 	br	1001268 <__pack_d+0x258>
 10012dc:	0009883a 	mov	r4,zero
 10012e0:	0013883a 	mov	r9,zero
 10012e4:	000b883a 	mov	r5,zero
 10012e8:	003fe406 	br	100127c <__pack_d+0x26c>
 10012ec:	4a47883a 	add	r3,r9,r9
 10012f0:	008007c4 	movi	r2,31
 10012f4:	1105c83a 	sub	r2,r2,r4
 10012f8:	1886983a 	sll	r3,r3,r2
 10012fc:	4118d83a 	srl	r12,r8,r4
 1001300:	491ad83a 	srl	r13,r9,r4
 1001304:	1b18b03a 	or	r12,r3,r12
 1001308:	003fb506 	br	10011e0 <__pack_d+0x1d0>
 100130c:	2806d07a 	srli	r3,r5,1
 1001310:	008007c4 	movi	r2,31
 1001314:	1105c83a 	sub	r2,r2,r4
 1001318:	1896d83a 	srl	r11,r3,r2
 100131c:	2914983a 	sll	r10,r5,r4
 1001320:	003fb506 	br	10011f8 <__pack_d+0x1e8>

01001324 <printf>:
 1001324:	defffb04 	addi	sp,sp,-20
 1001328:	dfc00115 	stw	ra,4(sp)
 100132c:	d9400215 	stw	r5,8(sp)
 1001330:	d9800315 	stw	r6,12(sp)
 1001334:	d9c00415 	stw	r7,16(sp)
 1001338:	00804074 	movhi	r2,257
 100133c:	1081d504 	addi	r2,r2,1876
 1001340:	10c00017 	ldw	r3,0(r2)
 1001344:	200b883a 	mov	r5,r4
 1001348:	d8800204 	addi	r2,sp,8
 100134c:	19000217 	ldw	r4,8(r3)
 1001350:	100d883a 	mov	r6,r2
 1001354:	d8800015 	stw	r2,0(sp)
 1001358:	10033c80 	call	10033c8 <__vfprintf_internal>
 100135c:	dfc00117 	ldw	ra,4(sp)
 1001360:	dec00504 	addi	sp,sp,20
 1001364:	f800283a 	ret

01001368 <_printf_r>:
 1001368:	defffc04 	addi	sp,sp,-16
 100136c:	dfc00115 	stw	ra,4(sp)
 1001370:	d9800215 	stw	r6,8(sp)
 1001374:	d9c00315 	stw	r7,12(sp)
 1001378:	280d883a 	mov	r6,r5
 100137c:	21400217 	ldw	r5,8(r4)
 1001380:	d8c00204 	addi	r3,sp,8
 1001384:	180f883a 	mov	r7,r3
 1001388:	d8c00015 	stw	r3,0(sp)
 100138c:	100151c0 	call	100151c <___vfprintf_internal_r>
 1001390:	dfc00117 	ldw	ra,4(sp)
 1001394:	dec00404 	addi	sp,sp,16
 1001398:	f800283a 	ret

0100139c <_puts_r>:
 100139c:	defff604 	addi	sp,sp,-40
 10013a0:	dc400715 	stw	r17,28(sp)
 10013a4:	2023883a 	mov	r17,r4
 10013a8:	2809883a 	mov	r4,r5
 10013ac:	dfc00915 	stw	ra,36(sp)
 10013b0:	dcc00815 	stw	r19,32(sp)
 10013b4:	2827883a 	mov	r19,r5
 10013b8:	10014500 	call	1001450 <strlen>
 10013bc:	89400217 	ldw	r5,8(r17)
 10013c0:	00c04074 	movhi	r3,257
 10013c4:	18fa5d04 	addi	r3,r3,-5772
 10013c8:	01c00044 	movi	r7,1
 10013cc:	12000044 	addi	r8,r2,1
 10013d0:	d8c00515 	stw	r3,20(sp)
 10013d4:	d9c00615 	stw	r7,24(sp)
 10013d8:	d8c00304 	addi	r3,sp,12
 10013dc:	01c00084 	movi	r7,2
 10013e0:	8809883a 	mov	r4,r17
 10013e4:	d80d883a 	mov	r6,sp
 10013e8:	d8c00015 	stw	r3,0(sp)
 10013ec:	dcc00315 	stw	r19,12(sp)
 10013f0:	da000215 	stw	r8,8(sp)
 10013f4:	d9c00115 	stw	r7,4(sp)
 10013f8:	d8800415 	stw	r2,16(sp)
 10013fc:	10056240 	call	1005624 <__sfvwrite_r>
 1001400:	00ffffc4 	movi	r3,-1
 1001404:	10000626 	beq	r2,zero,1001420 <_puts_r+0x84>
 1001408:	1805883a 	mov	r2,r3
 100140c:	dfc00917 	ldw	ra,36(sp)
 1001410:	dcc00817 	ldw	r19,32(sp)
 1001414:	dc400717 	ldw	r17,28(sp)
 1001418:	dec00a04 	addi	sp,sp,40
 100141c:	f800283a 	ret
 1001420:	00c00284 	movi	r3,10
 1001424:	1805883a 	mov	r2,r3
 1001428:	dfc00917 	ldw	ra,36(sp)
 100142c:	dcc00817 	ldw	r19,32(sp)
 1001430:	dc400717 	ldw	r17,28(sp)
 1001434:	dec00a04 	addi	sp,sp,40
 1001438:	f800283a 	ret

0100143c <puts>:
 100143c:	00804074 	movhi	r2,257
 1001440:	1081d504 	addi	r2,r2,1876
 1001444:	200b883a 	mov	r5,r4
 1001448:	11000017 	ldw	r4,0(r2)
 100144c:	100139c1 	jmpi	100139c <_puts_r>

01001450 <strlen>:
 1001450:	208000cc 	andi	r2,r4,3
 1001454:	2011883a 	mov	r8,r4
 1001458:	1000161e 	bne	r2,zero,10014b4 <strlen+0x64>
 100145c:	20c00017 	ldw	r3,0(r4)
 1001460:	017fbff4 	movhi	r5,65279
 1001464:	297fbfc4 	addi	r5,r5,-257
 1001468:	01e02074 	movhi	r7,32897
 100146c:	39e02004 	addi	r7,r7,-32640
 1001470:	1945883a 	add	r2,r3,r5
 1001474:	11c4703a 	and	r2,r2,r7
 1001478:	00c6303a 	nor	r3,zero,r3
 100147c:	1886703a 	and	r3,r3,r2
 1001480:	18000c1e 	bne	r3,zero,10014b4 <strlen+0x64>
 1001484:	280d883a 	mov	r6,r5
 1001488:	380b883a 	mov	r5,r7
 100148c:	21000104 	addi	r4,r4,4
 1001490:	20800017 	ldw	r2,0(r4)
 1001494:	1187883a 	add	r3,r2,r6
 1001498:	1946703a 	and	r3,r3,r5
 100149c:	0084303a 	nor	r2,zero,r2
 10014a0:	10c4703a 	and	r2,r2,r3
 10014a4:	103ff926 	beq	r2,zero,100148c <strlen+0x3c>
 10014a8:	20800007 	ldb	r2,0(r4)
 10014ac:	10000326 	beq	r2,zero,10014bc <strlen+0x6c>
 10014b0:	21000044 	addi	r4,r4,1
 10014b4:	20800007 	ldb	r2,0(r4)
 10014b8:	103ffd1e 	bne	r2,zero,10014b0 <strlen+0x60>
 10014bc:	2205c83a 	sub	r2,r4,r8
 10014c0:	f800283a 	ret

010014c4 <__sprint_r>:
 10014c4:	30800217 	ldw	r2,8(r6)
 10014c8:	defffe04 	addi	sp,sp,-8
 10014cc:	dc000015 	stw	r16,0(sp)
 10014d0:	dfc00115 	stw	ra,4(sp)
 10014d4:	3021883a 	mov	r16,r6
 10014d8:	0007883a 	mov	r3,zero
 10014dc:	1000061e 	bne	r2,zero,10014f8 <__sprint_r+0x34>
 10014e0:	1805883a 	mov	r2,r3
 10014e4:	30000115 	stw	zero,4(r6)
 10014e8:	dfc00117 	ldw	ra,4(sp)
 10014ec:	dc000017 	ldw	r16,0(sp)
 10014f0:	dec00204 	addi	sp,sp,8
 10014f4:	f800283a 	ret
 10014f8:	10056240 	call	1005624 <__sfvwrite_r>
 10014fc:	1007883a 	mov	r3,r2
 1001500:	1805883a 	mov	r2,r3
 1001504:	80000115 	stw	zero,4(r16)
 1001508:	80000215 	stw	zero,8(r16)
 100150c:	dfc00117 	ldw	ra,4(sp)
 1001510:	dc000017 	ldw	r16,0(sp)
 1001514:	dec00204 	addi	sp,sp,8
 1001518:	f800283a 	ret

0100151c <___vfprintf_internal_r>:
 100151c:	defea404 	addi	sp,sp,-1392
 1001520:	dd815815 	stw	r22,1376(sp)
 1001524:	dc015215 	stw	r16,1352(sp)
 1001528:	d9c15115 	stw	r7,1348(sp)
 100152c:	dfc15b15 	stw	ra,1388(sp)
 1001530:	df015a15 	stw	fp,1384(sp)
 1001534:	ddc15915 	stw	r23,1380(sp)
 1001538:	dd415715 	stw	r21,1372(sp)
 100153c:	dd015615 	stw	r20,1368(sp)
 1001540:	dcc15515 	stw	r19,1364(sp)
 1001544:	dc815415 	stw	r18,1360(sp)
 1001548:	dc415315 	stw	r17,1356(sp)
 100154c:	282d883a 	mov	r22,r5
 1001550:	3021883a 	mov	r16,r6
 1001554:	d9014f15 	stw	r4,1340(sp)
 1001558:	1005c480 	call	1005c48 <_localeconv_r>
 100155c:	10800017 	ldw	r2,0(r2)
 1001560:	d9c15117 	ldw	r7,1348(sp)
 1001564:	d8814915 	stw	r2,1316(sp)
 1001568:	d8814f17 	ldw	r2,1340(sp)
 100156c:	10000226 	beq	r2,zero,1001578 <___vfprintf_internal_r+0x5c>
 1001570:	10800e17 	ldw	r2,56(r2)
 1001574:	10020d26 	beq	r2,zero,1001dac <___vfprintf_internal_r+0x890>
 1001578:	b080030b 	ldhu	r2,12(r22)
 100157c:	1080020c 	andi	r2,r2,8
 1001580:	10020e26 	beq	r2,zero,1001dbc <___vfprintf_internal_r+0x8a0>
 1001584:	b0800417 	ldw	r2,16(r22)
 1001588:	10020c26 	beq	r2,zero,1001dbc <___vfprintf_internal_r+0x8a0>
 100158c:	b200030b 	ldhu	r8,12(r22)
 1001590:	00800284 	movi	r2,10
 1001594:	40c0068c 	andi	r3,r8,26
 1001598:	18802f1e 	bne	r3,r2,1001658 <___vfprintf_internal_r+0x13c>
 100159c:	b080038f 	ldh	r2,14(r22)
 10015a0:	10002d16 	blt	r2,zero,1001658 <___vfprintf_internal_r+0x13c>
 10015a4:	b240038b 	ldhu	r9,14(r22)
 10015a8:	b2800717 	ldw	r10,28(r22)
 10015ac:	b2c00917 	ldw	r11,36(r22)
 10015b0:	d9014f17 	ldw	r4,1340(sp)
 10015b4:	dc402904 	addi	r17,sp,164
 10015b8:	d8804004 	addi	r2,sp,256
 10015bc:	00c10004 	movi	r3,1024
 10015c0:	423fff4c 	andi	r8,r8,65533
 10015c4:	800d883a 	mov	r6,r16
 10015c8:	880b883a 	mov	r5,r17
 10015cc:	da002c0d 	sth	r8,176(sp)
 10015d0:	da402c8d 	sth	r9,178(sp)
 10015d4:	da803015 	stw	r10,192(sp)
 10015d8:	dac03215 	stw	r11,200(sp)
 10015dc:	d8802d15 	stw	r2,180(sp)
 10015e0:	d8c02e15 	stw	r3,184(sp)
 10015e4:	d8802915 	stw	r2,164(sp)
 10015e8:	d8c02b15 	stw	r3,172(sp)
 10015ec:	d8002f15 	stw	zero,188(sp)
 10015f0:	100151c0 	call	100151c <___vfprintf_internal_r>
 10015f4:	d8814b15 	stw	r2,1324(sp)
 10015f8:	10000416 	blt	r2,zero,100160c <___vfprintf_internal_r+0xf0>
 10015fc:	d9014f17 	ldw	r4,1340(sp)
 1001600:	880b883a 	mov	r5,r17
 1001604:	1004cf40 	call	1004cf4 <_fflush_r>
 1001608:	1002321e 	bne	r2,zero,1001ed4 <___vfprintf_internal_r+0x9b8>
 100160c:	d8802c0b 	ldhu	r2,176(sp)
 1001610:	1080100c 	andi	r2,r2,64
 1001614:	10000326 	beq	r2,zero,1001624 <___vfprintf_internal_r+0x108>
 1001618:	b080030b 	ldhu	r2,12(r22)
 100161c:	10801014 	ori	r2,r2,64
 1001620:	b080030d 	sth	r2,12(r22)
 1001624:	d8814b17 	ldw	r2,1324(sp)
 1001628:	dfc15b17 	ldw	ra,1388(sp)
 100162c:	df015a17 	ldw	fp,1384(sp)
 1001630:	ddc15917 	ldw	r23,1380(sp)
 1001634:	dd815817 	ldw	r22,1376(sp)
 1001638:	dd415717 	ldw	r21,1372(sp)
 100163c:	dd015617 	ldw	r20,1368(sp)
 1001640:	dcc15517 	ldw	r19,1364(sp)
 1001644:	dc815417 	ldw	r18,1360(sp)
 1001648:	dc415317 	ldw	r17,1356(sp)
 100164c:	dc015217 	ldw	r16,1352(sp)
 1001650:	dec15c04 	addi	sp,sp,1392
 1001654:	f800283a 	ret
 1001658:	0005883a 	mov	r2,zero
 100165c:	0007883a 	mov	r3,zero
 1001660:	dd401904 	addi	r21,sp,100
 1001664:	d8814215 	stw	r2,1288(sp)
 1001668:	802f883a 	mov	r23,r16
 100166c:	d8c14315 	stw	r3,1292(sp)
 1001670:	d8014b15 	stw	zero,1324(sp)
 1001674:	d8014815 	stw	zero,1312(sp)
 1001678:	d8014415 	stw	zero,1296(sp)
 100167c:	d8014715 	stw	zero,1308(sp)
 1001680:	dd400c15 	stw	r21,48(sp)
 1001684:	d8000e15 	stw	zero,56(sp)
 1001688:	d8000d15 	stw	zero,52(sp)
 100168c:	b8800007 	ldb	r2,0(r23)
 1001690:	10001926 	beq	r2,zero,10016f8 <___vfprintf_internal_r+0x1dc>
 1001694:	00c00944 	movi	r3,37
 1001698:	10c01726 	beq	r2,r3,10016f8 <___vfprintf_internal_r+0x1dc>
 100169c:	b821883a 	mov	r16,r23
 10016a0:	00000106 	br	10016a8 <___vfprintf_internal_r+0x18c>
 10016a4:	10c00326 	beq	r2,r3,10016b4 <___vfprintf_internal_r+0x198>
 10016a8:	84000044 	addi	r16,r16,1
 10016ac:	80800007 	ldb	r2,0(r16)
 10016b0:	103ffc1e 	bne	r2,zero,10016a4 <___vfprintf_internal_r+0x188>
 10016b4:	85e7c83a 	sub	r19,r16,r23
 10016b8:	98000e26 	beq	r19,zero,10016f4 <___vfprintf_internal_r+0x1d8>
 10016bc:	dc800e17 	ldw	r18,56(sp)
 10016c0:	dc400d17 	ldw	r17,52(sp)
 10016c4:	008001c4 	movi	r2,7
 10016c8:	94e5883a 	add	r18,r18,r19
 10016cc:	8c400044 	addi	r17,r17,1
 10016d0:	adc00015 	stw	r23,0(r21)
 10016d4:	dc800e15 	stw	r18,56(sp)
 10016d8:	acc00115 	stw	r19,4(r21)
 10016dc:	dc400d15 	stw	r17,52(sp)
 10016e0:	14428b16 	blt	r2,r17,1002110 <___vfprintf_internal_r+0xbf4>
 10016e4:	ad400204 	addi	r21,r21,8
 10016e8:	d9014b17 	ldw	r4,1324(sp)
 10016ec:	24c9883a 	add	r4,r4,r19
 10016f0:	d9014b15 	stw	r4,1324(sp)
 10016f4:	802f883a 	mov	r23,r16
 10016f8:	b8800007 	ldb	r2,0(r23)
 10016fc:	10013c26 	beq	r2,zero,1001bf0 <___vfprintf_internal_r+0x6d4>
 1001700:	bdc00044 	addi	r23,r23,1
 1001704:	d8000405 	stb	zero,16(sp)
 1001708:	b8c00007 	ldb	r3,0(r23)
 100170c:	04ffffc4 	movi	r19,-1
 1001710:	d8014c15 	stw	zero,1328(sp)
 1001714:	d8014a15 	stw	zero,1320(sp)
 1001718:	d8c14d15 	stw	r3,1332(sp)
 100171c:	bdc00044 	addi	r23,r23,1
 1001720:	d9414d17 	ldw	r5,1332(sp)
 1001724:	00801604 	movi	r2,88
 1001728:	28fff804 	addi	r3,r5,-32
 100172c:	10c06036 	bltu	r2,r3,10018b0 <___vfprintf_internal_r+0x394>
 1001730:	18c5883a 	add	r2,r3,r3
 1001734:	1085883a 	add	r2,r2,r2
 1001738:	00c04034 	movhi	r3,256
 100173c:	18c5d304 	addi	r3,r3,5964
 1001740:	10c5883a 	add	r2,r2,r3
 1001744:	11000017 	ldw	r4,0(r2)
 1001748:	2000683a 	jmp	r4
 100174c:	010026c0 	call	10026c <__alt_mem_onchip_memory2_0+0x10026c>
 1001750:	010018b0 	cmpltui	r4,zero,98
 1001754:	010018b0 	cmpltui	r4,zero,98
 1001758:	010026ac 	andhi	r4,zero,154
 100175c:	010018b0 	cmpltui	r4,zero,98
 1001760:	010018b0 	cmpltui	r4,zero,98
 1001764:	010018b0 	cmpltui	r4,zero,98
 1001768:	010018b0 	cmpltui	r4,zero,98
 100176c:	010018b0 	cmpltui	r4,zero,98
 1001770:	010018b0 	cmpltui	r4,zero,98
 1001774:	0100248c 	andi	r4,zero,146
 1001778:	0100269c 	xori	r4,zero,154
 100177c:	010018b0 	cmpltui	r4,zero,98
 1001780:	010024a4 	muli	r4,zero,146
 1001784:	01002738 	rdprs	r4,zero,156
 1001788:	010018b0 	cmpltui	r4,zero,98
 100178c:	01002724 	muli	r4,zero,156
 1001790:	010026ec 	andhi	r4,zero,155
 1001794:	010026ec 	andhi	r4,zero,155
 1001798:	010026ec 	andhi	r4,zero,155
 100179c:	010026ec 	andhi	r4,zero,155
 10017a0:	010026ec 	andhi	r4,zero,155
 10017a4:	010026ec 	andhi	r4,zero,155
 10017a8:	010026ec 	andhi	r4,zero,155
 10017ac:	010026ec 	andhi	r4,zero,155
 10017b0:	010026ec 	andhi	r4,zero,155
 10017b4:	010018b0 	cmpltui	r4,zero,98
 10017b8:	010018b0 	cmpltui	r4,zero,98
 10017bc:	010018b0 	cmpltui	r4,zero,98
 10017c0:	010018b0 	cmpltui	r4,zero,98
 10017c4:	010018b0 	cmpltui	r4,zero,98
 10017c8:	010018b0 	cmpltui	r4,zero,98
 10017cc:	010018b0 	cmpltui	r4,zero,98
 10017d0:	010018b0 	cmpltui	r4,zero,98
 10017d4:	010018b0 	cmpltui	r4,zero,98
 10017d8:	010018b0 	cmpltui	r4,zero,98
 10017dc:	01001f08 	cmpgei	r4,zero,124
 10017e0:	01002574 	movhi	r4,149
 10017e4:	010018b0 	cmpltui	r4,zero,98
 10017e8:	01002574 	movhi	r4,149
 10017ec:	010018b0 	cmpltui	r4,zero,98
 10017f0:	010018b0 	cmpltui	r4,zero,98
 10017f4:	010018b0 	cmpltui	r4,zero,98
 10017f8:	010018b0 	cmpltui	r4,zero,98
 10017fc:	010026d8 	cmpnei	r4,zero,155
 1001800:	010018b0 	cmpltui	r4,zero,98
 1001804:	010018b0 	cmpltui	r4,zero,98
 1001808:	01001fbc 	xorhi	r4,zero,126
 100180c:	010018b0 	cmpltui	r4,zero,98
 1001810:	010018b0 	cmpltui	r4,zero,98
 1001814:	010018b0 	cmpltui	r4,zero,98
 1001818:	010018b0 	cmpltui	r4,zero,98
 100181c:	010018b0 	cmpltui	r4,zero,98
 1001820:	01002008 	cmpgei	r4,zero,128
 1001824:	010018b0 	cmpltui	r4,zero,98
 1001828:	010018b0 	cmpltui	r4,zero,98
 100182c:	01002628 	cmpgeui	r4,zero,152
 1001830:	010018b0 	cmpltui	r4,zero,98
 1001834:	010018b0 	cmpltui	r4,zero,98
 1001838:	010018b0 	cmpltui	r4,zero,98
 100183c:	010018b0 	cmpltui	r4,zero,98
 1001840:	010018b0 	cmpltui	r4,zero,98
 1001844:	010018b0 	cmpltui	r4,zero,98
 1001848:	010018b0 	cmpltui	r4,zero,98
 100184c:	010018b0 	cmpltui	r4,zero,98
 1001850:	010018b0 	cmpltui	r4,zero,98
 1001854:	010018b0 	cmpltui	r4,zero,98
 1001858:	010025fc 	xorhi	r4,zero,151
 100185c:	01001f14 	movui	r4,124
 1001860:	01002574 	movhi	r4,149
 1001864:	01002574 	movhi	r4,149
 1001868:	01002574 	movhi	r4,149
 100186c:	01002560 	cmpeqi	r4,zero,149
 1001870:	01001f14 	movui	r4,124
 1001874:	010018b0 	cmpltui	r4,zero,98
 1001878:	010018b0 	cmpltui	r4,zero,98
 100187c:	010024e8 	cmpgeui	r4,zero,147
 1001880:	010018b0 	cmpltui	r4,zero,98
 1001884:	010024b8 	rdprs	r4,zero,146
 1001888:	01001fc8 	cmpgei	r4,zero,127
 100188c:	01002518 	cmpnei	r4,zero,148
 1001890:	01002504 	movi	r4,148
 1001894:	010018b0 	cmpltui	r4,zero,98
 1001898:	01002794 	movui	r4,158
 100189c:	010018b0 	cmpltui	r4,zero,98
 10018a0:	01002014 	movui	r4,128
 10018a4:	010018b0 	cmpltui	r4,zero,98
 10018a8:	010018b0 	cmpltui	r4,zero,98
 10018ac:	0100268c 	andi	r4,zero,154
 10018b0:	d9014d17 	ldw	r4,1332(sp)
 10018b4:	2000ce26 	beq	r4,zero,1001bf0 <___vfprintf_internal_r+0x6d4>
 10018b8:	01400044 	movi	r5,1
 10018bc:	d9800f04 	addi	r6,sp,60
 10018c0:	d9c14015 	stw	r7,1280(sp)
 10018c4:	d9414515 	stw	r5,1300(sp)
 10018c8:	d9814115 	stw	r6,1284(sp)
 10018cc:	280f883a 	mov	r7,r5
 10018d0:	d9000f05 	stb	r4,60(sp)
 10018d4:	d8000405 	stb	zero,16(sp)
 10018d8:	d8014615 	stw	zero,1304(sp)
 10018dc:	d8c14c17 	ldw	r3,1328(sp)
 10018e0:	1880008c 	andi	r2,r3,2
 10018e4:	1005003a 	cmpeq	r2,r2,zero
 10018e8:	d8815015 	stw	r2,1344(sp)
 10018ec:	1000031e 	bne	r2,zero,10018fc <___vfprintf_internal_r+0x3e0>
 10018f0:	d9014517 	ldw	r4,1300(sp)
 10018f4:	21000084 	addi	r4,r4,2
 10018f8:	d9014515 	stw	r4,1300(sp)
 10018fc:	d9414c17 	ldw	r5,1328(sp)
 1001900:	2940210c 	andi	r5,r5,132
 1001904:	d9414e15 	stw	r5,1336(sp)
 1001908:	28002d1e 	bne	r5,zero,10019c0 <___vfprintf_internal_r+0x4a4>
 100190c:	d9814a17 	ldw	r6,1320(sp)
 1001910:	d8814517 	ldw	r2,1300(sp)
 1001914:	30a1c83a 	sub	r16,r6,r2
 1001918:	0400290e 	bge	zero,r16,10019c0 <___vfprintf_internal_r+0x4a4>
 100191c:	00800404 	movi	r2,16
 1001920:	1404580e 	bge	r2,r16,1002a84 <___vfprintf_internal_r+0x1568>
 1001924:	dc800e17 	ldw	r18,56(sp)
 1001928:	dc400d17 	ldw	r17,52(sp)
 100192c:	1027883a 	mov	r19,r2
 1001930:	07004074 	movhi	fp,257
 1001934:	e73a7984 	addi	fp,fp,-5658
 1001938:	050001c4 	movi	r20,7
 100193c:	00000306 	br	100194c <___vfprintf_internal_r+0x430>
 1001940:	843ffc04 	addi	r16,r16,-16
 1001944:	ad400204 	addi	r21,r21,8
 1001948:	9c00130e 	bge	r19,r16,1001998 <___vfprintf_internal_r+0x47c>
 100194c:	94800404 	addi	r18,r18,16
 1001950:	8c400044 	addi	r17,r17,1
 1001954:	af000015 	stw	fp,0(r21)
 1001958:	acc00115 	stw	r19,4(r21)
 100195c:	dc800e15 	stw	r18,56(sp)
 1001960:	dc400d15 	stw	r17,52(sp)
 1001964:	a47ff60e 	bge	r20,r17,1001940 <___vfprintf_internal_r+0x424>
 1001968:	d9014f17 	ldw	r4,1340(sp)
 100196c:	b00b883a 	mov	r5,r22
 1001970:	d9800c04 	addi	r6,sp,48
 1001974:	d9c15115 	stw	r7,1348(sp)
 1001978:	10014c40 	call	10014c4 <__sprint_r>
 100197c:	d9c15117 	ldw	r7,1348(sp)
 1001980:	10009e1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1001984:	843ffc04 	addi	r16,r16,-16
 1001988:	dc800e17 	ldw	r18,56(sp)
 100198c:	dc400d17 	ldw	r17,52(sp)
 1001990:	dd401904 	addi	r21,sp,100
 1001994:	9c3fed16 	blt	r19,r16,100194c <___vfprintf_internal_r+0x430>
 1001998:	9425883a 	add	r18,r18,r16
 100199c:	8c400044 	addi	r17,r17,1
 10019a0:	008001c4 	movi	r2,7
 10019a4:	af000015 	stw	fp,0(r21)
 10019a8:	ac000115 	stw	r16,4(r21)
 10019ac:	dc800e15 	stw	r18,56(sp)
 10019b0:	dc400d15 	stw	r17,52(sp)
 10019b4:	1441f516 	blt	r2,r17,100218c <___vfprintf_internal_r+0xc70>
 10019b8:	ad400204 	addi	r21,r21,8
 10019bc:	00000206 	br	10019c8 <___vfprintf_internal_r+0x4ac>
 10019c0:	dc800e17 	ldw	r18,56(sp)
 10019c4:	dc400d17 	ldw	r17,52(sp)
 10019c8:	d8800407 	ldb	r2,16(sp)
 10019cc:	10000b26 	beq	r2,zero,10019fc <___vfprintf_internal_r+0x4e0>
 10019d0:	00800044 	movi	r2,1
 10019d4:	94800044 	addi	r18,r18,1
 10019d8:	8c400044 	addi	r17,r17,1
 10019dc:	a8800115 	stw	r2,4(r21)
 10019e0:	d8c00404 	addi	r3,sp,16
 10019e4:	008001c4 	movi	r2,7
 10019e8:	a8c00015 	stw	r3,0(r21)
 10019ec:	dc800e15 	stw	r18,56(sp)
 10019f0:	dc400d15 	stw	r17,52(sp)
 10019f4:	1441da16 	blt	r2,r17,1002160 <___vfprintf_internal_r+0xc44>
 10019f8:	ad400204 	addi	r21,r21,8
 10019fc:	d9015017 	ldw	r4,1344(sp)
 1001a00:	20000b1e 	bne	r4,zero,1001a30 <___vfprintf_internal_r+0x514>
 1001a04:	d8800444 	addi	r2,sp,17
 1001a08:	94800084 	addi	r18,r18,2
 1001a0c:	8c400044 	addi	r17,r17,1
 1001a10:	a8800015 	stw	r2,0(r21)
 1001a14:	00c00084 	movi	r3,2
 1001a18:	008001c4 	movi	r2,7
 1001a1c:	a8c00115 	stw	r3,4(r21)
 1001a20:	dc800e15 	stw	r18,56(sp)
 1001a24:	dc400d15 	stw	r17,52(sp)
 1001a28:	1441c216 	blt	r2,r17,1002134 <___vfprintf_internal_r+0xc18>
 1001a2c:	ad400204 	addi	r21,r21,8
 1001a30:	d9414e17 	ldw	r5,1336(sp)
 1001a34:	00802004 	movi	r2,128
 1001a38:	2880b126 	beq	r5,r2,1001d00 <___vfprintf_internal_r+0x7e4>
 1001a3c:	d8c14617 	ldw	r3,1304(sp)
 1001a40:	19e1c83a 	sub	r16,r3,r7
 1001a44:	0400260e 	bge	zero,r16,1001ae0 <___vfprintf_internal_r+0x5c4>
 1001a48:	00800404 	movi	r2,16
 1001a4c:	1403c90e 	bge	r2,r16,1002974 <___vfprintf_internal_r+0x1458>
 1001a50:	1027883a 	mov	r19,r2
 1001a54:	07004074 	movhi	fp,257
 1001a58:	e73a7584 	addi	fp,fp,-5674
 1001a5c:	050001c4 	movi	r20,7
 1001a60:	00000306 	br	1001a70 <___vfprintf_internal_r+0x554>
 1001a64:	843ffc04 	addi	r16,r16,-16
 1001a68:	ad400204 	addi	r21,r21,8
 1001a6c:	9c00130e 	bge	r19,r16,1001abc <___vfprintf_internal_r+0x5a0>
 1001a70:	94800404 	addi	r18,r18,16
 1001a74:	8c400044 	addi	r17,r17,1
 1001a78:	af000015 	stw	fp,0(r21)
 1001a7c:	acc00115 	stw	r19,4(r21)
 1001a80:	dc800e15 	stw	r18,56(sp)
 1001a84:	dc400d15 	stw	r17,52(sp)
 1001a88:	a47ff60e 	bge	r20,r17,1001a64 <___vfprintf_internal_r+0x548>
 1001a8c:	d9014f17 	ldw	r4,1340(sp)
 1001a90:	b00b883a 	mov	r5,r22
 1001a94:	d9800c04 	addi	r6,sp,48
 1001a98:	d9c15115 	stw	r7,1348(sp)
 1001a9c:	10014c40 	call	10014c4 <__sprint_r>
 1001aa0:	d9c15117 	ldw	r7,1348(sp)
 1001aa4:	1000551e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1001aa8:	843ffc04 	addi	r16,r16,-16
 1001aac:	dc800e17 	ldw	r18,56(sp)
 1001ab0:	dc400d17 	ldw	r17,52(sp)
 1001ab4:	dd401904 	addi	r21,sp,100
 1001ab8:	9c3fed16 	blt	r19,r16,1001a70 <___vfprintf_internal_r+0x554>
 1001abc:	9425883a 	add	r18,r18,r16
 1001ac0:	8c400044 	addi	r17,r17,1
 1001ac4:	008001c4 	movi	r2,7
 1001ac8:	af000015 	stw	fp,0(r21)
 1001acc:	ac000115 	stw	r16,4(r21)
 1001ad0:	dc800e15 	stw	r18,56(sp)
 1001ad4:	dc400d15 	stw	r17,52(sp)
 1001ad8:	14418216 	blt	r2,r17,10020e4 <___vfprintf_internal_r+0xbc8>
 1001adc:	ad400204 	addi	r21,r21,8
 1001ae0:	d9014c17 	ldw	r4,1328(sp)
 1001ae4:	2080400c 	andi	r2,r4,256
 1001ae8:	10004a1e 	bne	r2,zero,1001c14 <___vfprintf_internal_r+0x6f8>
 1001aec:	d9414117 	ldw	r5,1284(sp)
 1001af0:	91e5883a 	add	r18,r18,r7
 1001af4:	8c400044 	addi	r17,r17,1
 1001af8:	008001c4 	movi	r2,7
 1001afc:	a9400015 	stw	r5,0(r21)
 1001b00:	a9c00115 	stw	r7,4(r21)
 1001b04:	dc800e15 	stw	r18,56(sp)
 1001b08:	dc400d15 	stw	r17,52(sp)
 1001b0c:	14416716 	blt	r2,r17,10020ac <___vfprintf_internal_r+0xb90>
 1001b10:	a8c00204 	addi	r3,r21,8
 1001b14:	d9814c17 	ldw	r6,1328(sp)
 1001b18:	3080010c 	andi	r2,r6,4
 1001b1c:	10002826 	beq	r2,zero,1001bc0 <___vfprintf_internal_r+0x6a4>
 1001b20:	d8814a17 	ldw	r2,1320(sp)
 1001b24:	d9014517 	ldw	r4,1300(sp)
 1001b28:	1121c83a 	sub	r16,r2,r4
 1001b2c:	0400240e 	bge	zero,r16,1001bc0 <___vfprintf_internal_r+0x6a4>
 1001b30:	00800404 	movi	r2,16
 1001b34:	14044f0e 	bge	r2,r16,1002c74 <___vfprintf_internal_r+0x1758>
 1001b38:	dc400d17 	ldw	r17,52(sp)
 1001b3c:	1027883a 	mov	r19,r2
 1001b40:	07004074 	movhi	fp,257
 1001b44:	e73a7984 	addi	fp,fp,-5658
 1001b48:	050001c4 	movi	r20,7
 1001b4c:	00000306 	br	1001b5c <___vfprintf_internal_r+0x640>
 1001b50:	843ffc04 	addi	r16,r16,-16
 1001b54:	18c00204 	addi	r3,r3,8
 1001b58:	9c00110e 	bge	r19,r16,1001ba0 <___vfprintf_internal_r+0x684>
 1001b5c:	94800404 	addi	r18,r18,16
 1001b60:	8c400044 	addi	r17,r17,1
 1001b64:	1f000015 	stw	fp,0(r3)
 1001b68:	1cc00115 	stw	r19,4(r3)
 1001b6c:	dc800e15 	stw	r18,56(sp)
 1001b70:	dc400d15 	stw	r17,52(sp)
 1001b74:	a47ff60e 	bge	r20,r17,1001b50 <___vfprintf_internal_r+0x634>
 1001b78:	d9014f17 	ldw	r4,1340(sp)
 1001b7c:	b00b883a 	mov	r5,r22
 1001b80:	d9800c04 	addi	r6,sp,48
 1001b84:	10014c40 	call	10014c4 <__sprint_r>
 1001b88:	10001c1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1001b8c:	843ffc04 	addi	r16,r16,-16
 1001b90:	dc800e17 	ldw	r18,56(sp)
 1001b94:	dc400d17 	ldw	r17,52(sp)
 1001b98:	d8c01904 	addi	r3,sp,100
 1001b9c:	9c3fef16 	blt	r19,r16,1001b5c <___vfprintf_internal_r+0x640>
 1001ba0:	9425883a 	add	r18,r18,r16
 1001ba4:	8c400044 	addi	r17,r17,1
 1001ba8:	008001c4 	movi	r2,7
 1001bac:	1f000015 	stw	fp,0(r3)
 1001bb0:	1c000115 	stw	r16,4(r3)
 1001bb4:	dc800e15 	stw	r18,56(sp)
 1001bb8:	dc400d15 	stw	r17,52(sp)
 1001bbc:	1440cb16 	blt	r2,r17,1001eec <___vfprintf_internal_r+0x9d0>
 1001bc0:	d8814a17 	ldw	r2,1320(sp)
 1001bc4:	d9414517 	ldw	r5,1300(sp)
 1001bc8:	1140010e 	bge	r2,r5,1001bd0 <___vfprintf_internal_r+0x6b4>
 1001bcc:	2805883a 	mov	r2,r5
 1001bd0:	d9814b17 	ldw	r6,1324(sp)
 1001bd4:	308d883a 	add	r6,r6,r2
 1001bd8:	d9814b15 	stw	r6,1324(sp)
 1001bdc:	90013b1e 	bne	r18,zero,10020cc <___vfprintf_internal_r+0xbb0>
 1001be0:	d9c14017 	ldw	r7,1280(sp)
 1001be4:	dd401904 	addi	r21,sp,100
 1001be8:	d8000d15 	stw	zero,52(sp)
 1001bec:	003ea706 	br	100168c <___vfprintf_internal_r+0x170>
 1001bf0:	d8800e17 	ldw	r2,56(sp)
 1001bf4:	10053f1e 	bne	r2,zero,10030f4 <___vfprintf_internal_r+0x1bd8>
 1001bf8:	d8000d15 	stw	zero,52(sp)
 1001bfc:	b080030b 	ldhu	r2,12(r22)
 1001c00:	1080100c 	andi	r2,r2,64
 1001c04:	103e8726 	beq	r2,zero,1001624 <___vfprintf_internal_r+0x108>
 1001c08:	00bfffc4 	movi	r2,-1
 1001c0c:	d8814b15 	stw	r2,1324(sp)
 1001c10:	003e8406 	br	1001624 <___vfprintf_internal_r+0x108>
 1001c14:	d9814d17 	ldw	r6,1332(sp)
 1001c18:	00801944 	movi	r2,101
 1001c1c:	11806e16 	blt	r2,r6,1001dd8 <___vfprintf_internal_r+0x8bc>
 1001c20:	d9414717 	ldw	r5,1308(sp)
 1001c24:	00c00044 	movi	r3,1
 1001c28:	1943430e 	bge	r3,r5,1002938 <___vfprintf_internal_r+0x141c>
 1001c2c:	d8814117 	ldw	r2,1284(sp)
 1001c30:	94800044 	addi	r18,r18,1
 1001c34:	8c400044 	addi	r17,r17,1
 1001c38:	a8800015 	stw	r2,0(r21)
 1001c3c:	008001c4 	movi	r2,7
 1001c40:	a8c00115 	stw	r3,4(r21)
 1001c44:	dc800e15 	stw	r18,56(sp)
 1001c48:	dc400d15 	stw	r17,52(sp)
 1001c4c:	1441ca16 	blt	r2,r17,1002378 <___vfprintf_internal_r+0xe5c>
 1001c50:	a8c00204 	addi	r3,r21,8
 1001c54:	d9014917 	ldw	r4,1316(sp)
 1001c58:	00800044 	movi	r2,1
 1001c5c:	94800044 	addi	r18,r18,1
 1001c60:	8c400044 	addi	r17,r17,1
 1001c64:	18800115 	stw	r2,4(r3)
 1001c68:	008001c4 	movi	r2,7
 1001c6c:	19000015 	stw	r4,0(r3)
 1001c70:	dc800e15 	stw	r18,56(sp)
 1001c74:	dc400d15 	stw	r17,52(sp)
 1001c78:	1441b616 	blt	r2,r17,1002354 <___vfprintf_internal_r+0xe38>
 1001c7c:	1cc00204 	addi	r19,r3,8
 1001c80:	d9014217 	ldw	r4,1288(sp)
 1001c84:	d9414317 	ldw	r5,1292(sp)
 1001c88:	000d883a 	mov	r6,zero
 1001c8c:	000f883a 	mov	r7,zero
 1001c90:	1009d6c0 	call	1009d6c <__nedf2>
 1001c94:	10017426 	beq	r2,zero,1002268 <___vfprintf_internal_r+0xd4c>
 1001c98:	d9414717 	ldw	r5,1308(sp)
 1001c9c:	d9814117 	ldw	r6,1284(sp)
 1001ca0:	8c400044 	addi	r17,r17,1
 1001ca4:	2c85883a 	add	r2,r5,r18
 1001ca8:	14bfffc4 	addi	r18,r2,-1
 1001cac:	28bfffc4 	addi	r2,r5,-1
 1001cb0:	30c00044 	addi	r3,r6,1
 1001cb4:	98800115 	stw	r2,4(r19)
 1001cb8:	008001c4 	movi	r2,7
 1001cbc:	98c00015 	stw	r3,0(r19)
 1001cc0:	dc800e15 	stw	r18,56(sp)
 1001cc4:	dc400d15 	stw	r17,52(sp)
 1001cc8:	14418e16 	blt	r2,r17,1002304 <___vfprintf_internal_r+0xde8>
 1001ccc:	9cc00204 	addi	r19,r19,8
 1001cd0:	d9414817 	ldw	r5,1312(sp)
 1001cd4:	d8800804 	addi	r2,sp,32
 1001cd8:	8c400044 	addi	r17,r17,1
 1001cdc:	9165883a 	add	r18,r18,r5
 1001ce0:	98800015 	stw	r2,0(r19)
 1001ce4:	008001c4 	movi	r2,7
 1001ce8:	99400115 	stw	r5,4(r19)
 1001cec:	dc800e15 	stw	r18,56(sp)
 1001cf0:	dc400d15 	stw	r17,52(sp)
 1001cf4:	1440ed16 	blt	r2,r17,10020ac <___vfprintf_internal_r+0xb90>
 1001cf8:	98c00204 	addi	r3,r19,8
 1001cfc:	003f8506 	br	1001b14 <___vfprintf_internal_r+0x5f8>
 1001d00:	d9814a17 	ldw	r6,1320(sp)
 1001d04:	d8814517 	ldw	r2,1300(sp)
 1001d08:	30a1c83a 	sub	r16,r6,r2
 1001d0c:	043f4b0e 	bge	zero,r16,1001a3c <___vfprintf_internal_r+0x520>
 1001d10:	00800404 	movi	r2,16
 1001d14:	1404340e 	bge	r2,r16,1002de8 <___vfprintf_internal_r+0x18cc>
 1001d18:	1027883a 	mov	r19,r2
 1001d1c:	07004074 	movhi	fp,257
 1001d20:	e73a7584 	addi	fp,fp,-5674
 1001d24:	050001c4 	movi	r20,7
 1001d28:	00000306 	br	1001d38 <___vfprintf_internal_r+0x81c>
 1001d2c:	843ffc04 	addi	r16,r16,-16
 1001d30:	ad400204 	addi	r21,r21,8
 1001d34:	9c00130e 	bge	r19,r16,1001d84 <___vfprintf_internal_r+0x868>
 1001d38:	94800404 	addi	r18,r18,16
 1001d3c:	8c400044 	addi	r17,r17,1
 1001d40:	af000015 	stw	fp,0(r21)
 1001d44:	acc00115 	stw	r19,4(r21)
 1001d48:	dc800e15 	stw	r18,56(sp)
 1001d4c:	dc400d15 	stw	r17,52(sp)
 1001d50:	a47ff60e 	bge	r20,r17,1001d2c <___vfprintf_internal_r+0x810>
 1001d54:	d9014f17 	ldw	r4,1340(sp)
 1001d58:	b00b883a 	mov	r5,r22
 1001d5c:	d9800c04 	addi	r6,sp,48
 1001d60:	d9c15115 	stw	r7,1348(sp)
 1001d64:	10014c40 	call	10014c4 <__sprint_r>
 1001d68:	d9c15117 	ldw	r7,1348(sp)
 1001d6c:	103fa31e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1001d70:	843ffc04 	addi	r16,r16,-16
 1001d74:	dc800e17 	ldw	r18,56(sp)
 1001d78:	dc400d17 	ldw	r17,52(sp)
 1001d7c:	dd401904 	addi	r21,sp,100
 1001d80:	9c3fed16 	blt	r19,r16,1001d38 <___vfprintf_internal_r+0x81c>
 1001d84:	9425883a 	add	r18,r18,r16
 1001d88:	8c400044 	addi	r17,r17,1
 1001d8c:	008001c4 	movi	r2,7
 1001d90:	af000015 	stw	fp,0(r21)
 1001d94:	ac000115 	stw	r16,4(r21)
 1001d98:	dc800e15 	stw	r18,56(sp)
 1001d9c:	dc400d15 	stw	r17,52(sp)
 1001da0:	14416116 	blt	r2,r17,1002328 <___vfprintf_internal_r+0xe0c>
 1001da4:	ad400204 	addi	r21,r21,8
 1001da8:	003f2406 	br	1001a3c <___vfprintf_internal_r+0x520>
 1001dac:	d9014f17 	ldw	r4,1340(sp)
 1001db0:	1004f8c0 	call	1004f8c <__sinit>
 1001db4:	d9c15117 	ldw	r7,1348(sp)
 1001db8:	003def06 	br	1001578 <___vfprintf_internal_r+0x5c>
 1001dbc:	d9014f17 	ldw	r4,1340(sp)
 1001dc0:	b00b883a 	mov	r5,r22
 1001dc4:	d9c15115 	stw	r7,1348(sp)
 1001dc8:	10033ec0 	call	10033ec <__swsetup_r>
 1001dcc:	d9c15117 	ldw	r7,1348(sp)
 1001dd0:	103dee26 	beq	r2,zero,100158c <___vfprintf_internal_r+0x70>
 1001dd4:	003f8c06 	br	1001c08 <___vfprintf_internal_r+0x6ec>
 1001dd8:	d9014217 	ldw	r4,1288(sp)
 1001ddc:	d9414317 	ldw	r5,1292(sp)
 1001de0:	000d883a 	mov	r6,zero
 1001de4:	000f883a 	mov	r7,zero
 1001de8:	1009ce40 	call	1009ce4 <__eqdf2>
 1001dec:	1000f21e 	bne	r2,zero,10021b8 <___vfprintf_internal_r+0xc9c>
 1001df0:	00804074 	movhi	r2,257
 1001df4:	10ba7504 	addi	r2,r2,-5676
 1001df8:	94800044 	addi	r18,r18,1
 1001dfc:	8c400044 	addi	r17,r17,1
 1001e00:	a8800015 	stw	r2,0(r21)
 1001e04:	00c00044 	movi	r3,1
 1001e08:	008001c4 	movi	r2,7
 1001e0c:	a8c00115 	stw	r3,4(r21)
 1001e10:	dc800e15 	stw	r18,56(sp)
 1001e14:	dc400d15 	stw	r17,52(sp)
 1001e18:	1442fa16 	blt	r2,r17,1002a04 <___vfprintf_internal_r+0x14e8>
 1001e1c:	a8c00204 	addi	r3,r21,8
 1001e20:	d8800517 	ldw	r2,20(sp)
 1001e24:	d9014717 	ldw	r4,1308(sp)
 1001e28:	11015c0e 	bge	r2,r4,100239c <___vfprintf_internal_r+0xe80>
 1001e2c:	dc400d17 	ldw	r17,52(sp)
 1001e30:	d9814917 	ldw	r6,1316(sp)
 1001e34:	00800044 	movi	r2,1
 1001e38:	94800044 	addi	r18,r18,1
 1001e3c:	8c400044 	addi	r17,r17,1
 1001e40:	18800115 	stw	r2,4(r3)
 1001e44:	008001c4 	movi	r2,7
 1001e48:	19800015 	stw	r6,0(r3)
 1001e4c:	dc800e15 	stw	r18,56(sp)
 1001e50:	dc400d15 	stw	r17,52(sp)
 1001e54:	14431016 	blt	r2,r17,1002a98 <___vfprintf_internal_r+0x157c>
 1001e58:	18c00204 	addi	r3,r3,8
 1001e5c:	d8814717 	ldw	r2,1308(sp)
 1001e60:	143fffc4 	addi	r16,r2,-1
 1001e64:	043f2b0e 	bge	zero,r16,1001b14 <___vfprintf_internal_r+0x5f8>
 1001e68:	00800404 	movi	r2,16
 1001e6c:	1402a20e 	bge	r2,r16,10028f8 <___vfprintf_internal_r+0x13dc>
 1001e70:	dc400d17 	ldw	r17,52(sp)
 1001e74:	1027883a 	mov	r19,r2
 1001e78:	07004074 	movhi	fp,257
 1001e7c:	e73a7584 	addi	fp,fp,-5674
 1001e80:	050001c4 	movi	r20,7
 1001e84:	00000306 	br	1001e94 <___vfprintf_internal_r+0x978>
 1001e88:	18c00204 	addi	r3,r3,8
 1001e8c:	843ffc04 	addi	r16,r16,-16
 1001e90:	9c029c0e 	bge	r19,r16,1002904 <___vfprintf_internal_r+0x13e8>
 1001e94:	94800404 	addi	r18,r18,16
 1001e98:	8c400044 	addi	r17,r17,1
 1001e9c:	1f000015 	stw	fp,0(r3)
 1001ea0:	1cc00115 	stw	r19,4(r3)
 1001ea4:	dc800e15 	stw	r18,56(sp)
 1001ea8:	dc400d15 	stw	r17,52(sp)
 1001eac:	a47ff60e 	bge	r20,r17,1001e88 <___vfprintf_internal_r+0x96c>
 1001eb0:	d9014f17 	ldw	r4,1340(sp)
 1001eb4:	b00b883a 	mov	r5,r22
 1001eb8:	d9800c04 	addi	r6,sp,48
 1001ebc:	10014c40 	call	10014c4 <__sprint_r>
 1001ec0:	103f4e1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1001ec4:	dc800e17 	ldw	r18,56(sp)
 1001ec8:	dc400d17 	ldw	r17,52(sp)
 1001ecc:	d8c01904 	addi	r3,sp,100
 1001ed0:	003fee06 	br	1001e8c <___vfprintf_internal_r+0x970>
 1001ed4:	d8802c0b 	ldhu	r2,176(sp)
 1001ed8:	00ffffc4 	movi	r3,-1
 1001edc:	d8c14b15 	stw	r3,1324(sp)
 1001ee0:	1080100c 	andi	r2,r2,64
 1001ee4:	103dcc1e 	bne	r2,zero,1001618 <___vfprintf_internal_r+0xfc>
 1001ee8:	003dce06 	br	1001624 <___vfprintf_internal_r+0x108>
 1001eec:	d9014f17 	ldw	r4,1340(sp)
 1001ef0:	b00b883a 	mov	r5,r22
 1001ef4:	d9800c04 	addi	r6,sp,48
 1001ef8:	10014c40 	call	10014c4 <__sprint_r>
 1001efc:	103f3f1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1001f00:	dc800e17 	ldw	r18,56(sp)
 1001f04:	003f2e06 	br	1001bc0 <___vfprintf_internal_r+0x6a4>
 1001f08:	d9414c17 	ldw	r5,1328(sp)
 1001f0c:	29400414 	ori	r5,r5,16
 1001f10:	d9414c15 	stw	r5,1328(sp)
 1001f14:	d9814c17 	ldw	r6,1328(sp)
 1001f18:	3080080c 	andi	r2,r6,32
 1001f1c:	10014f1e 	bne	r2,zero,100245c <___vfprintf_internal_r+0xf40>
 1001f20:	d8c14c17 	ldw	r3,1328(sp)
 1001f24:	1880040c 	andi	r2,r3,16
 1001f28:	1002ea1e 	bne	r2,zero,1002ad4 <___vfprintf_internal_r+0x15b8>
 1001f2c:	d9014c17 	ldw	r4,1328(sp)
 1001f30:	2080100c 	andi	r2,r4,64
 1001f34:	1002e726 	beq	r2,zero,1002ad4 <___vfprintf_internal_r+0x15b8>
 1001f38:	3880000f 	ldh	r2,0(r7)
 1001f3c:	39c00104 	addi	r7,r7,4
 1001f40:	d9c14015 	stw	r7,1280(sp)
 1001f44:	1023d7fa 	srai	r17,r2,31
 1001f48:	1021883a 	mov	r16,r2
 1001f4c:	88037216 	blt	r17,zero,1002d18 <___vfprintf_internal_r+0x17fc>
 1001f50:	01000044 	movi	r4,1
 1001f54:	98000416 	blt	r19,zero,1001f68 <___vfprintf_internal_r+0xa4c>
 1001f58:	d8c14c17 	ldw	r3,1328(sp)
 1001f5c:	00bfdfc4 	movi	r2,-129
 1001f60:	1886703a 	and	r3,r3,r2
 1001f64:	d8c14c15 	stw	r3,1328(sp)
 1001f68:	8444b03a 	or	r2,r16,r17
 1001f6c:	1002261e 	bne	r2,zero,1002808 <___vfprintf_internal_r+0x12ec>
 1001f70:	9802251e 	bne	r19,zero,1002808 <___vfprintf_internal_r+0x12ec>
 1001f74:	20803fcc 	andi	r2,r4,255
 1001f78:	10029b26 	beq	r2,zero,10029e8 <___vfprintf_internal_r+0x14cc>
 1001f7c:	d8c01904 	addi	r3,sp,100
 1001f80:	dd000f04 	addi	r20,sp,60
 1001f84:	d8c14115 	stw	r3,1284(sp)
 1001f88:	d8c14117 	ldw	r3,1284(sp)
 1001f8c:	dcc14515 	stw	r19,1300(sp)
 1001f90:	a0c5c83a 	sub	r2,r20,r3
 1001f94:	11c00a04 	addi	r7,r2,40
 1001f98:	99c0010e 	bge	r19,r7,1001fa0 <___vfprintf_internal_r+0xa84>
 1001f9c:	d9c14515 	stw	r7,1300(sp)
 1001fa0:	dcc14615 	stw	r19,1304(sp)
 1001fa4:	d8800407 	ldb	r2,16(sp)
 1001fa8:	103e4c26 	beq	r2,zero,10018dc <___vfprintf_internal_r+0x3c0>
 1001fac:	d8814517 	ldw	r2,1300(sp)
 1001fb0:	10800044 	addi	r2,r2,1
 1001fb4:	d8814515 	stw	r2,1300(sp)
 1001fb8:	003e4806 	br	10018dc <___vfprintf_internal_r+0x3c0>
 1001fbc:	d9814c17 	ldw	r6,1328(sp)
 1001fc0:	31800414 	ori	r6,r6,16
 1001fc4:	d9814c15 	stw	r6,1328(sp)
 1001fc8:	d8c14c17 	ldw	r3,1328(sp)
 1001fcc:	1880080c 	andi	r2,r3,32
 1001fd0:	1001271e 	bne	r2,zero,1002470 <___vfprintf_internal_r+0xf54>
 1001fd4:	d9414c17 	ldw	r5,1328(sp)
 1001fd8:	2880040c 	andi	r2,r5,16
 1001fdc:	1002b61e 	bne	r2,zero,1002ab8 <___vfprintf_internal_r+0x159c>
 1001fe0:	d9814c17 	ldw	r6,1328(sp)
 1001fe4:	3080100c 	andi	r2,r6,64
 1001fe8:	1002b326 	beq	r2,zero,1002ab8 <___vfprintf_internal_r+0x159c>
 1001fec:	3c00000b 	ldhu	r16,0(r7)
 1001ff0:	0009883a 	mov	r4,zero
 1001ff4:	39c00104 	addi	r7,r7,4
 1001ff8:	0023883a 	mov	r17,zero
 1001ffc:	d9c14015 	stw	r7,1280(sp)
 1002000:	d8000405 	stb	zero,16(sp)
 1002004:	003fd306 	br	1001f54 <___vfprintf_internal_r+0xa38>
 1002008:	d9014c17 	ldw	r4,1328(sp)
 100200c:	21000414 	ori	r4,r4,16
 1002010:	d9014c15 	stw	r4,1328(sp)
 1002014:	d9414c17 	ldw	r5,1328(sp)
 1002018:	2880080c 	andi	r2,r5,32
 100201c:	1001081e 	bne	r2,zero,1002440 <___vfprintf_internal_r+0xf24>
 1002020:	d8c14c17 	ldw	r3,1328(sp)
 1002024:	1880040c 	andi	r2,r3,16
 1002028:	1002b01e 	bne	r2,zero,1002aec <___vfprintf_internal_r+0x15d0>
 100202c:	d9014c17 	ldw	r4,1328(sp)
 1002030:	2080100c 	andi	r2,r4,64
 1002034:	1002ad26 	beq	r2,zero,1002aec <___vfprintf_internal_r+0x15d0>
 1002038:	3c00000b 	ldhu	r16,0(r7)
 100203c:	01000044 	movi	r4,1
 1002040:	39c00104 	addi	r7,r7,4
 1002044:	0023883a 	mov	r17,zero
 1002048:	d9c14015 	stw	r7,1280(sp)
 100204c:	d8000405 	stb	zero,16(sp)
 1002050:	003fc006 	br	1001f54 <___vfprintf_internal_r+0xa38>
 1002054:	d9014f17 	ldw	r4,1340(sp)
 1002058:	b00b883a 	mov	r5,r22
 100205c:	d9800c04 	addi	r6,sp,48
 1002060:	10014c40 	call	10014c4 <__sprint_r>
 1002064:	103ee51e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002068:	dc800e17 	ldw	r18,56(sp)
 100206c:	d8c01904 	addi	r3,sp,100
 1002070:	d9814c17 	ldw	r6,1328(sp)
 1002074:	3080004c 	andi	r2,r6,1
 1002078:	1005003a 	cmpeq	r2,r2,zero
 100207c:	103ea51e 	bne	r2,zero,1001b14 <___vfprintf_internal_r+0x5f8>
 1002080:	00800044 	movi	r2,1
 1002084:	dc400d17 	ldw	r17,52(sp)
 1002088:	18800115 	stw	r2,4(r3)
 100208c:	d8814917 	ldw	r2,1316(sp)
 1002090:	94800044 	addi	r18,r18,1
 1002094:	8c400044 	addi	r17,r17,1
 1002098:	18800015 	stw	r2,0(r3)
 100209c:	008001c4 	movi	r2,7
 10020a0:	dc800e15 	stw	r18,56(sp)
 10020a4:	dc400d15 	stw	r17,52(sp)
 10020a8:	14421e0e 	bge	r2,r17,1002924 <___vfprintf_internal_r+0x1408>
 10020ac:	d9014f17 	ldw	r4,1340(sp)
 10020b0:	b00b883a 	mov	r5,r22
 10020b4:	d9800c04 	addi	r6,sp,48
 10020b8:	10014c40 	call	10014c4 <__sprint_r>
 10020bc:	103ecf1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 10020c0:	dc800e17 	ldw	r18,56(sp)
 10020c4:	d8c01904 	addi	r3,sp,100
 10020c8:	003e9206 	br	1001b14 <___vfprintf_internal_r+0x5f8>
 10020cc:	d9014f17 	ldw	r4,1340(sp)
 10020d0:	b00b883a 	mov	r5,r22
 10020d4:	d9800c04 	addi	r6,sp,48
 10020d8:	10014c40 	call	10014c4 <__sprint_r>
 10020dc:	103ec026 	beq	r2,zero,1001be0 <___vfprintf_internal_r+0x6c4>
 10020e0:	003ec606 	br	1001bfc <___vfprintf_internal_r+0x6e0>
 10020e4:	d9014f17 	ldw	r4,1340(sp)
 10020e8:	b00b883a 	mov	r5,r22
 10020ec:	d9800c04 	addi	r6,sp,48
 10020f0:	d9c15115 	stw	r7,1348(sp)
 10020f4:	10014c40 	call	10014c4 <__sprint_r>
 10020f8:	d9c15117 	ldw	r7,1348(sp)
 10020fc:	103ebf1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002100:	dc800e17 	ldw	r18,56(sp)
 1002104:	dc400d17 	ldw	r17,52(sp)
 1002108:	dd401904 	addi	r21,sp,100
 100210c:	003e7406 	br	1001ae0 <___vfprintf_internal_r+0x5c4>
 1002110:	d9014f17 	ldw	r4,1340(sp)
 1002114:	b00b883a 	mov	r5,r22
 1002118:	d9800c04 	addi	r6,sp,48
 100211c:	d9c15115 	stw	r7,1348(sp)
 1002120:	10014c40 	call	10014c4 <__sprint_r>
 1002124:	d9c15117 	ldw	r7,1348(sp)
 1002128:	103eb41e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 100212c:	dd401904 	addi	r21,sp,100
 1002130:	003d6d06 	br	10016e8 <___vfprintf_internal_r+0x1cc>
 1002134:	d9014f17 	ldw	r4,1340(sp)
 1002138:	b00b883a 	mov	r5,r22
 100213c:	d9800c04 	addi	r6,sp,48
 1002140:	d9c15115 	stw	r7,1348(sp)
 1002144:	10014c40 	call	10014c4 <__sprint_r>
 1002148:	d9c15117 	ldw	r7,1348(sp)
 100214c:	103eab1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002150:	dc800e17 	ldw	r18,56(sp)
 1002154:	dc400d17 	ldw	r17,52(sp)
 1002158:	dd401904 	addi	r21,sp,100
 100215c:	003e3406 	br	1001a30 <___vfprintf_internal_r+0x514>
 1002160:	d9014f17 	ldw	r4,1340(sp)
 1002164:	b00b883a 	mov	r5,r22
 1002168:	d9800c04 	addi	r6,sp,48
 100216c:	d9c15115 	stw	r7,1348(sp)
 1002170:	10014c40 	call	10014c4 <__sprint_r>
 1002174:	d9c15117 	ldw	r7,1348(sp)
 1002178:	103ea01e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 100217c:	dc800e17 	ldw	r18,56(sp)
 1002180:	dc400d17 	ldw	r17,52(sp)
 1002184:	dd401904 	addi	r21,sp,100
 1002188:	003e1c06 	br	10019fc <___vfprintf_internal_r+0x4e0>
 100218c:	d9014f17 	ldw	r4,1340(sp)
 1002190:	b00b883a 	mov	r5,r22
 1002194:	d9800c04 	addi	r6,sp,48
 1002198:	d9c15115 	stw	r7,1348(sp)
 100219c:	10014c40 	call	10014c4 <__sprint_r>
 10021a0:	d9c15117 	ldw	r7,1348(sp)
 10021a4:	103e951e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 10021a8:	dc800e17 	ldw	r18,56(sp)
 10021ac:	dc400d17 	ldw	r17,52(sp)
 10021b0:	dd401904 	addi	r21,sp,100
 10021b4:	003e0406 	br	10019c8 <___vfprintf_internal_r+0x4ac>
 10021b8:	d9000517 	ldw	r4,20(sp)
 10021bc:	0102520e 	bge	zero,r4,1002b08 <___vfprintf_internal_r+0x15ec>
 10021c0:	d9814717 	ldw	r6,1308(sp)
 10021c4:	21807a16 	blt	r4,r6,10023b0 <___vfprintf_internal_r+0xe94>
 10021c8:	d8814117 	ldw	r2,1284(sp)
 10021cc:	91a5883a 	add	r18,r18,r6
 10021d0:	8c400044 	addi	r17,r17,1
 10021d4:	a8800015 	stw	r2,0(r21)
 10021d8:	008001c4 	movi	r2,7
 10021dc:	a9800115 	stw	r6,4(r21)
 10021e0:	dc800e15 	stw	r18,56(sp)
 10021e4:	dc400d15 	stw	r17,52(sp)
 10021e8:	1442f616 	blt	r2,r17,1002dc4 <___vfprintf_internal_r+0x18a8>
 10021ec:	a8c00204 	addi	r3,r21,8
 10021f0:	d9414717 	ldw	r5,1308(sp)
 10021f4:	2161c83a 	sub	r16,r4,r5
 10021f8:	043f9d0e 	bge	zero,r16,1002070 <___vfprintf_internal_r+0xb54>
 10021fc:	00800404 	movi	r2,16
 1002200:	1402130e 	bge	r2,r16,1002a50 <___vfprintf_internal_r+0x1534>
 1002204:	dc400d17 	ldw	r17,52(sp)
 1002208:	1027883a 	mov	r19,r2
 100220c:	07004074 	movhi	fp,257
 1002210:	e73a7584 	addi	fp,fp,-5674
 1002214:	050001c4 	movi	r20,7
 1002218:	00000306 	br	1002228 <___vfprintf_internal_r+0xd0c>
 100221c:	18c00204 	addi	r3,r3,8
 1002220:	843ffc04 	addi	r16,r16,-16
 1002224:	9c020d0e 	bge	r19,r16,1002a5c <___vfprintf_internal_r+0x1540>
 1002228:	94800404 	addi	r18,r18,16
 100222c:	8c400044 	addi	r17,r17,1
 1002230:	1f000015 	stw	fp,0(r3)
 1002234:	1cc00115 	stw	r19,4(r3)
 1002238:	dc800e15 	stw	r18,56(sp)
 100223c:	dc400d15 	stw	r17,52(sp)
 1002240:	a47ff60e 	bge	r20,r17,100221c <___vfprintf_internal_r+0xd00>
 1002244:	d9014f17 	ldw	r4,1340(sp)
 1002248:	b00b883a 	mov	r5,r22
 100224c:	d9800c04 	addi	r6,sp,48
 1002250:	10014c40 	call	10014c4 <__sprint_r>
 1002254:	103e691e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002258:	dc800e17 	ldw	r18,56(sp)
 100225c:	dc400d17 	ldw	r17,52(sp)
 1002260:	d8c01904 	addi	r3,sp,100
 1002264:	003fee06 	br	1002220 <___vfprintf_internal_r+0xd04>
 1002268:	d8814717 	ldw	r2,1308(sp)
 100226c:	143fffc4 	addi	r16,r2,-1
 1002270:	043e970e 	bge	zero,r16,1001cd0 <___vfprintf_internal_r+0x7b4>
 1002274:	00800404 	movi	r2,16
 1002278:	1400180e 	bge	r2,r16,10022dc <___vfprintf_internal_r+0xdc0>
 100227c:	1029883a 	mov	r20,r2
 1002280:	07004074 	movhi	fp,257
 1002284:	e73a7584 	addi	fp,fp,-5674
 1002288:	054001c4 	movi	r21,7
 100228c:	00000306 	br	100229c <___vfprintf_internal_r+0xd80>
 1002290:	9cc00204 	addi	r19,r19,8
 1002294:	843ffc04 	addi	r16,r16,-16
 1002298:	a400120e 	bge	r20,r16,10022e4 <___vfprintf_internal_r+0xdc8>
 100229c:	94800404 	addi	r18,r18,16
 10022a0:	8c400044 	addi	r17,r17,1
 10022a4:	9f000015 	stw	fp,0(r19)
 10022a8:	9d000115 	stw	r20,4(r19)
 10022ac:	dc800e15 	stw	r18,56(sp)
 10022b0:	dc400d15 	stw	r17,52(sp)
 10022b4:	ac7ff60e 	bge	r21,r17,1002290 <___vfprintf_internal_r+0xd74>
 10022b8:	d9014f17 	ldw	r4,1340(sp)
 10022bc:	b00b883a 	mov	r5,r22
 10022c0:	d9800c04 	addi	r6,sp,48
 10022c4:	10014c40 	call	10014c4 <__sprint_r>
 10022c8:	103e4c1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 10022cc:	dc800e17 	ldw	r18,56(sp)
 10022d0:	dc400d17 	ldw	r17,52(sp)
 10022d4:	dcc01904 	addi	r19,sp,100
 10022d8:	003fee06 	br	1002294 <___vfprintf_internal_r+0xd78>
 10022dc:	07004074 	movhi	fp,257
 10022e0:	e73a7584 	addi	fp,fp,-5674
 10022e4:	9425883a 	add	r18,r18,r16
 10022e8:	8c400044 	addi	r17,r17,1
 10022ec:	008001c4 	movi	r2,7
 10022f0:	9f000015 	stw	fp,0(r19)
 10022f4:	9c000115 	stw	r16,4(r19)
 10022f8:	dc800e15 	stw	r18,56(sp)
 10022fc:	dc400d15 	stw	r17,52(sp)
 1002300:	147e720e 	bge	r2,r17,1001ccc <___vfprintf_internal_r+0x7b0>
 1002304:	d9014f17 	ldw	r4,1340(sp)
 1002308:	b00b883a 	mov	r5,r22
 100230c:	d9800c04 	addi	r6,sp,48
 1002310:	10014c40 	call	10014c4 <__sprint_r>
 1002314:	103e391e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002318:	dc800e17 	ldw	r18,56(sp)
 100231c:	dc400d17 	ldw	r17,52(sp)
 1002320:	dcc01904 	addi	r19,sp,100
 1002324:	003e6a06 	br	1001cd0 <___vfprintf_internal_r+0x7b4>
 1002328:	d9014f17 	ldw	r4,1340(sp)
 100232c:	b00b883a 	mov	r5,r22
 1002330:	d9800c04 	addi	r6,sp,48
 1002334:	d9c15115 	stw	r7,1348(sp)
 1002338:	10014c40 	call	10014c4 <__sprint_r>
 100233c:	d9c15117 	ldw	r7,1348(sp)
 1002340:	103e2e1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002344:	dc800e17 	ldw	r18,56(sp)
 1002348:	dc400d17 	ldw	r17,52(sp)
 100234c:	dd401904 	addi	r21,sp,100
 1002350:	003dba06 	br	1001a3c <___vfprintf_internal_r+0x520>
 1002354:	d9014f17 	ldw	r4,1340(sp)
 1002358:	b00b883a 	mov	r5,r22
 100235c:	d9800c04 	addi	r6,sp,48
 1002360:	10014c40 	call	10014c4 <__sprint_r>
 1002364:	103e251e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002368:	dc800e17 	ldw	r18,56(sp)
 100236c:	dc400d17 	ldw	r17,52(sp)
 1002370:	dcc01904 	addi	r19,sp,100
 1002374:	003e4206 	br	1001c80 <___vfprintf_internal_r+0x764>
 1002378:	d9014f17 	ldw	r4,1340(sp)
 100237c:	b00b883a 	mov	r5,r22
 1002380:	d9800c04 	addi	r6,sp,48
 1002384:	10014c40 	call	10014c4 <__sprint_r>
 1002388:	103e1c1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 100238c:	dc800e17 	ldw	r18,56(sp)
 1002390:	dc400d17 	ldw	r17,52(sp)
 1002394:	d8c01904 	addi	r3,sp,100
 1002398:	003e2e06 	br	1001c54 <___vfprintf_internal_r+0x738>
 100239c:	d9414c17 	ldw	r5,1328(sp)
 10023a0:	2880004c 	andi	r2,r5,1
 10023a4:	1005003a 	cmpeq	r2,r2,zero
 10023a8:	103dda1e 	bne	r2,zero,1001b14 <___vfprintf_internal_r+0x5f8>
 10023ac:	003e9f06 	br	1001e2c <___vfprintf_internal_r+0x910>
 10023b0:	d8c14117 	ldw	r3,1284(sp)
 10023b4:	9125883a 	add	r18,r18,r4
 10023b8:	8c400044 	addi	r17,r17,1
 10023bc:	008001c4 	movi	r2,7
 10023c0:	a8c00015 	stw	r3,0(r21)
 10023c4:	a9000115 	stw	r4,4(r21)
 10023c8:	dc800e15 	stw	r18,56(sp)
 10023cc:	dc400d15 	stw	r17,52(sp)
 10023d0:	14426616 	blt	r2,r17,1002d6c <___vfprintf_internal_r+0x1850>
 10023d4:	a8c00204 	addi	r3,r21,8
 10023d8:	d9414917 	ldw	r5,1316(sp)
 10023dc:	00800044 	movi	r2,1
 10023e0:	94800044 	addi	r18,r18,1
 10023e4:	8c400044 	addi	r17,r17,1
 10023e8:	18800115 	stw	r2,4(r3)
 10023ec:	008001c4 	movi	r2,7
 10023f0:	19400015 	stw	r5,0(r3)
 10023f4:	dc800e15 	stw	r18,56(sp)
 10023f8:	dc400d15 	stw	r17,52(sp)
 10023fc:	2021883a 	mov	r16,r4
 1002400:	14425016 	blt	r2,r17,1002d44 <___vfprintf_internal_r+0x1828>
 1002404:	19400204 	addi	r5,r3,8
 1002408:	d9814717 	ldw	r6,1308(sp)
 100240c:	8c400044 	addi	r17,r17,1
 1002410:	dc400d15 	stw	r17,52(sp)
 1002414:	3107c83a 	sub	r3,r6,r4
 1002418:	d9014117 	ldw	r4,1284(sp)
 100241c:	90e5883a 	add	r18,r18,r3
 1002420:	28c00115 	stw	r3,4(r5)
 1002424:	8105883a 	add	r2,r16,r4
 1002428:	28800015 	stw	r2,0(r5)
 100242c:	008001c4 	movi	r2,7
 1002430:	dc800e15 	stw	r18,56(sp)
 1002434:	147f1d16 	blt	r2,r17,10020ac <___vfprintf_internal_r+0xb90>
 1002438:	28c00204 	addi	r3,r5,8
 100243c:	003db506 	br	1001b14 <___vfprintf_internal_r+0x5f8>
 1002440:	3c000017 	ldw	r16,0(r7)
 1002444:	3c400117 	ldw	r17,4(r7)
 1002448:	39800204 	addi	r6,r7,8
 100244c:	01000044 	movi	r4,1
 1002450:	d9814015 	stw	r6,1280(sp)
 1002454:	d8000405 	stb	zero,16(sp)
 1002458:	003ebe06 	br	1001f54 <___vfprintf_internal_r+0xa38>
 100245c:	3c000017 	ldw	r16,0(r7)
 1002460:	3c400117 	ldw	r17,4(r7)
 1002464:	38800204 	addi	r2,r7,8
 1002468:	d8814015 	stw	r2,1280(sp)
 100246c:	003eb706 	br	1001f4c <___vfprintf_internal_r+0xa30>
 1002470:	3c000017 	ldw	r16,0(r7)
 1002474:	3c400117 	ldw	r17,4(r7)
 1002478:	39000204 	addi	r4,r7,8
 100247c:	d9014015 	stw	r4,1280(sp)
 1002480:	0009883a 	mov	r4,zero
 1002484:	d8000405 	stb	zero,16(sp)
 1002488:	003eb206 	br	1001f54 <___vfprintf_internal_r+0xa38>
 100248c:	38c00017 	ldw	r3,0(r7)
 1002490:	39c00104 	addi	r7,r7,4
 1002494:	d8c14a15 	stw	r3,1320(sp)
 1002498:	1800d10e 	bge	r3,zero,10027e0 <___vfprintf_internal_r+0x12c4>
 100249c:	00c7c83a 	sub	r3,zero,r3
 10024a0:	d8c14a15 	stw	r3,1320(sp)
 10024a4:	d9014c17 	ldw	r4,1328(sp)
 10024a8:	b8c00007 	ldb	r3,0(r23)
 10024ac:	21000114 	ori	r4,r4,4
 10024b0:	d9014c15 	stw	r4,1328(sp)
 10024b4:	003c9806 	br	1001718 <___vfprintf_internal_r+0x1fc>
 10024b8:	d9814c17 	ldw	r6,1328(sp)
 10024bc:	3080080c 	andi	r2,r6,32
 10024c0:	1001f026 	beq	r2,zero,1002c84 <___vfprintf_internal_r+0x1768>
 10024c4:	d9014b17 	ldw	r4,1324(sp)
 10024c8:	38800017 	ldw	r2,0(r7)
 10024cc:	39c00104 	addi	r7,r7,4
 10024d0:	d9c14015 	stw	r7,1280(sp)
 10024d4:	2007d7fa 	srai	r3,r4,31
 10024d8:	d9c14017 	ldw	r7,1280(sp)
 10024dc:	11000015 	stw	r4,0(r2)
 10024e0:	10c00115 	stw	r3,4(r2)
 10024e4:	003c6906 	br	100168c <___vfprintf_internal_r+0x170>
 10024e8:	b8c00007 	ldb	r3,0(r23)
 10024ec:	00801b04 	movi	r2,108
 10024f0:	18824f26 	beq	r3,r2,1002e30 <___vfprintf_internal_r+0x1914>
 10024f4:	d9414c17 	ldw	r5,1328(sp)
 10024f8:	29400414 	ori	r5,r5,16
 10024fc:	d9414c15 	stw	r5,1328(sp)
 1002500:	003c8506 	br	1001718 <___vfprintf_internal_r+0x1fc>
 1002504:	d9814c17 	ldw	r6,1328(sp)
 1002508:	b8c00007 	ldb	r3,0(r23)
 100250c:	31800814 	ori	r6,r6,32
 1002510:	d9814c15 	stw	r6,1328(sp)
 1002514:	003c8006 	br	1001718 <___vfprintf_internal_r+0x1fc>
 1002518:	d8814c17 	ldw	r2,1328(sp)
 100251c:	3c000017 	ldw	r16,0(r7)
 1002520:	00c01e04 	movi	r3,120
 1002524:	10800094 	ori	r2,r2,2
 1002528:	d8814c15 	stw	r2,1328(sp)
 100252c:	39c00104 	addi	r7,r7,4
 1002530:	01404074 	movhi	r5,257
 1002534:	297a5e04 	addi	r5,r5,-5768
 1002538:	00800c04 	movi	r2,48
 100253c:	0023883a 	mov	r17,zero
 1002540:	01000084 	movi	r4,2
 1002544:	d9c14015 	stw	r7,1280(sp)
 1002548:	d8c14d15 	stw	r3,1332(sp)
 100254c:	d9414415 	stw	r5,1296(sp)
 1002550:	d8800445 	stb	r2,17(sp)
 1002554:	d8c00485 	stb	r3,18(sp)
 1002558:	d8000405 	stb	zero,16(sp)
 100255c:	003e7d06 	br	1001f54 <___vfprintf_internal_r+0xa38>
 1002560:	d8814c17 	ldw	r2,1328(sp)
 1002564:	b8c00007 	ldb	r3,0(r23)
 1002568:	10801014 	ori	r2,r2,64
 100256c:	d8814c15 	stw	r2,1328(sp)
 1002570:	003c6906 	br	1001718 <___vfprintf_internal_r+0x1fc>
 1002574:	d9414c17 	ldw	r5,1328(sp)
 1002578:	2880020c 	andi	r2,r5,8
 100257c:	1001df26 	beq	r2,zero,1002cfc <___vfprintf_internal_r+0x17e0>
 1002580:	39800017 	ldw	r6,0(r7)
 1002584:	38800204 	addi	r2,r7,8
 1002588:	d8814015 	stw	r2,1280(sp)
 100258c:	d9814215 	stw	r6,1288(sp)
 1002590:	39c00117 	ldw	r7,4(r7)
 1002594:	d9c14315 	stw	r7,1292(sp)
 1002598:	d9014217 	ldw	r4,1288(sp)
 100259c:	d9414317 	ldw	r5,1292(sp)
 10025a0:	1007ebc0 	call	1007ebc <__isinfd>
 10025a4:	10021726 	beq	r2,zero,1002e04 <___vfprintf_internal_r+0x18e8>
 10025a8:	d9014217 	ldw	r4,1288(sp)
 10025ac:	d9414317 	ldw	r5,1292(sp)
 10025b0:	000d883a 	mov	r6,zero
 10025b4:	000f883a 	mov	r7,zero
 10025b8:	1009f040 	call	1009f04 <__ltdf2>
 10025bc:	1002ca16 	blt	r2,zero,10030e8 <___vfprintf_internal_r+0x1bcc>
 10025c0:	d9414d17 	ldw	r5,1332(sp)
 10025c4:	008011c4 	movi	r2,71
 10025c8:	11420a16 	blt	r2,r5,1002df4 <___vfprintf_internal_r+0x18d8>
 10025cc:	01804074 	movhi	r6,257
 10025d0:	31ba6304 	addi	r6,r6,-5748
 10025d4:	d9814115 	stw	r6,1284(sp)
 10025d8:	d9014c17 	ldw	r4,1328(sp)
 10025dc:	00c000c4 	movi	r3,3
 10025e0:	00bfdfc4 	movi	r2,-129
 10025e4:	2088703a 	and	r4,r4,r2
 10025e8:	180f883a 	mov	r7,r3
 10025ec:	d8c14515 	stw	r3,1300(sp)
 10025f0:	d9014c15 	stw	r4,1328(sp)
 10025f4:	d8014615 	stw	zero,1304(sp)
 10025f8:	003e6a06 	br	1001fa4 <___vfprintf_internal_r+0xa88>
 10025fc:	38800017 	ldw	r2,0(r7)
 1002600:	00c00044 	movi	r3,1
 1002604:	39c00104 	addi	r7,r7,4
 1002608:	d9c14015 	stw	r7,1280(sp)
 100260c:	d9000f04 	addi	r4,sp,60
 1002610:	180f883a 	mov	r7,r3
 1002614:	d8c14515 	stw	r3,1300(sp)
 1002618:	d9014115 	stw	r4,1284(sp)
 100261c:	d8800f05 	stb	r2,60(sp)
 1002620:	d8000405 	stb	zero,16(sp)
 1002624:	003cac06 	br	10018d8 <___vfprintf_internal_r+0x3bc>
 1002628:	01404074 	movhi	r5,257
 100262c:	297a6904 	addi	r5,r5,-5724
 1002630:	d9414415 	stw	r5,1296(sp)
 1002634:	d9814c17 	ldw	r6,1328(sp)
 1002638:	3080080c 	andi	r2,r6,32
 100263c:	1000f926 	beq	r2,zero,1002a24 <___vfprintf_internal_r+0x1508>
 1002640:	3c000017 	ldw	r16,0(r7)
 1002644:	3c400117 	ldw	r17,4(r7)
 1002648:	38800204 	addi	r2,r7,8
 100264c:	d8814015 	stw	r2,1280(sp)
 1002650:	d9414c17 	ldw	r5,1328(sp)
 1002654:	2880004c 	andi	r2,r5,1
 1002658:	1005003a 	cmpeq	r2,r2,zero
 100265c:	1000b31e 	bne	r2,zero,100292c <___vfprintf_internal_r+0x1410>
 1002660:	8444b03a 	or	r2,r16,r17
 1002664:	1000b126 	beq	r2,zero,100292c <___vfprintf_internal_r+0x1410>
 1002668:	d9814d17 	ldw	r6,1332(sp)
 100266c:	29400094 	ori	r5,r5,2
 1002670:	00800c04 	movi	r2,48
 1002674:	01000084 	movi	r4,2
 1002678:	d9414c15 	stw	r5,1328(sp)
 100267c:	d8800445 	stb	r2,17(sp)
 1002680:	d9800485 	stb	r6,18(sp)
 1002684:	d8000405 	stb	zero,16(sp)
 1002688:	003e3206 	br	1001f54 <___vfprintf_internal_r+0xa38>
 100268c:	01804074 	movhi	r6,257
 1002690:	31ba5e04 	addi	r6,r6,-5768
 1002694:	d9814415 	stw	r6,1296(sp)
 1002698:	003fe606 	br	1002634 <___vfprintf_internal_r+0x1118>
 100269c:	00800ac4 	movi	r2,43
 10026a0:	d8800405 	stb	r2,16(sp)
 10026a4:	b8c00007 	ldb	r3,0(r23)
 10026a8:	003c1b06 	br	1001718 <___vfprintf_internal_r+0x1fc>
 10026ac:	d8814c17 	ldw	r2,1328(sp)
 10026b0:	b8c00007 	ldb	r3,0(r23)
 10026b4:	10800054 	ori	r2,r2,1
 10026b8:	d8814c15 	stw	r2,1328(sp)
 10026bc:	003c1606 	br	1001718 <___vfprintf_internal_r+0x1fc>
 10026c0:	d8800407 	ldb	r2,16(sp)
 10026c4:	1000461e 	bne	r2,zero,10027e0 <___vfprintf_internal_r+0x12c4>
 10026c8:	00800804 	movi	r2,32
 10026cc:	d8800405 	stb	r2,16(sp)
 10026d0:	b8c00007 	ldb	r3,0(r23)
 10026d4:	003c1006 	br	1001718 <___vfprintf_internal_r+0x1fc>
 10026d8:	d9814c17 	ldw	r6,1328(sp)
 10026dc:	b8c00007 	ldb	r3,0(r23)
 10026e0:	31800214 	ori	r6,r6,8
 10026e4:	d9814c15 	stw	r6,1328(sp)
 10026e8:	003c0b06 	br	1001718 <___vfprintf_internal_r+0x1fc>
 10026ec:	0007883a 	mov	r3,zero
 10026f0:	01000244 	movi	r4,9
 10026f4:	188002a4 	muli	r2,r3,10
 10026f8:	b8c00007 	ldb	r3,0(r23)
 10026fc:	d9814d17 	ldw	r6,1332(sp)
 1002700:	bdc00044 	addi	r23,r23,1
 1002704:	d8c14d15 	stw	r3,1332(sp)
 1002708:	d9414d17 	ldw	r5,1332(sp)
 100270c:	3085883a 	add	r2,r6,r2
 1002710:	10fff404 	addi	r3,r2,-48
 1002714:	28bff404 	addi	r2,r5,-48
 1002718:	20bff62e 	bgeu	r4,r2,10026f4 <___vfprintf_internal_r+0x11d8>
 100271c:	d8c14a15 	stw	r3,1320(sp)
 1002720:	003bff06 	br	1001720 <___vfprintf_internal_r+0x204>
 1002724:	d9414c17 	ldw	r5,1328(sp)
 1002728:	b8c00007 	ldb	r3,0(r23)
 100272c:	29402014 	ori	r5,r5,128
 1002730:	d9414c15 	stw	r5,1328(sp)
 1002734:	003bf806 	br	1001718 <___vfprintf_internal_r+0x1fc>
 1002738:	b8c00007 	ldb	r3,0(r23)
 100273c:	00800a84 	movi	r2,42
 1002740:	bdc00044 	addi	r23,r23,1
 1002744:	18831526 	beq	r3,r2,100339c <___vfprintf_internal_r+0x1e80>
 1002748:	d8c14d15 	stw	r3,1332(sp)
 100274c:	18bff404 	addi	r2,r3,-48
 1002750:	00c00244 	movi	r3,9
 1002754:	18827836 	bltu	r3,r2,1003138 <___vfprintf_internal_r+0x1c1c>
 1002758:	000d883a 	mov	r6,zero
 100275c:	308002a4 	muli	r2,r6,10
 1002760:	b9800007 	ldb	r6,0(r23)
 1002764:	d9414d17 	ldw	r5,1332(sp)
 1002768:	bdc00044 	addi	r23,r23,1
 100276c:	d9814d15 	stw	r6,1332(sp)
 1002770:	d9014d17 	ldw	r4,1332(sp)
 1002774:	1145883a 	add	r2,r2,r5
 1002778:	11bff404 	addi	r6,r2,-48
 100277c:	20bff404 	addi	r2,r4,-48
 1002780:	18bff62e 	bgeu	r3,r2,100275c <___vfprintf_internal_r+0x1240>
 1002784:	3027883a 	mov	r19,r6
 1002788:	303be50e 	bge	r6,zero,1001720 <___vfprintf_internal_r+0x204>
 100278c:	04ffffc4 	movi	r19,-1
 1002790:	003be306 	br	1001720 <___vfprintf_internal_r+0x204>
 1002794:	d8000405 	stb	zero,16(sp)
 1002798:	39800017 	ldw	r6,0(r7)
 100279c:	39c00104 	addi	r7,r7,4
 10027a0:	d9c14015 	stw	r7,1280(sp)
 10027a4:	d9814115 	stw	r6,1284(sp)
 10027a8:	3001c926 	beq	r6,zero,1002ed0 <___vfprintf_internal_r+0x19b4>
 10027ac:	98000e16 	blt	r19,zero,10027e8 <___vfprintf_internal_r+0x12cc>
 10027b0:	d9014117 	ldw	r4,1284(sp)
 10027b4:	000b883a 	mov	r5,zero
 10027b8:	980d883a 	mov	r6,r19
 10027bc:	10065d80 	call	10065d8 <memchr>
 10027c0:	10025926 	beq	r2,zero,1003128 <___vfprintf_internal_r+0x1c0c>
 10027c4:	d8c14117 	ldw	r3,1284(sp)
 10027c8:	10cfc83a 	sub	r7,r2,r3
 10027cc:	99c19e16 	blt	r19,r7,1002e48 <___vfprintf_internal_r+0x192c>
 10027d0:	d9c14515 	stw	r7,1300(sp)
 10027d4:	38000916 	blt	r7,zero,10027fc <___vfprintf_internal_r+0x12e0>
 10027d8:	d8014615 	stw	zero,1304(sp)
 10027dc:	003df106 	br	1001fa4 <___vfprintf_internal_r+0xa88>
 10027e0:	b8c00007 	ldb	r3,0(r23)
 10027e4:	003bcc06 	br	1001718 <___vfprintf_internal_r+0x1fc>
 10027e8:	d9014117 	ldw	r4,1284(sp)
 10027ec:	10014500 	call	1001450 <strlen>
 10027f0:	d8814515 	stw	r2,1300(sp)
 10027f4:	100f883a 	mov	r7,r2
 10027f8:	103ff70e 	bge	r2,zero,10027d8 <___vfprintf_internal_r+0x12bc>
 10027fc:	d8014515 	stw	zero,1300(sp)
 1002800:	d8014615 	stw	zero,1304(sp)
 1002804:	003de706 	br	1001fa4 <___vfprintf_internal_r+0xa88>
 1002808:	20c03fcc 	andi	r3,r4,255
 100280c:	00800044 	movi	r2,1
 1002810:	18802d26 	beq	r3,r2,10028c8 <___vfprintf_internal_r+0x13ac>
 1002814:	18800e36 	bltu	r3,r2,1002850 <___vfprintf_internal_r+0x1334>
 1002818:	00800084 	movi	r2,2
 100281c:	1880fa26 	beq	r3,r2,1002c08 <___vfprintf_internal_r+0x16ec>
 1002820:	01004074 	movhi	r4,257
 1002824:	213a6e04 	addi	r4,r4,-5704
 1002828:	10014500 	call	1001450 <strlen>
 100282c:	100f883a 	mov	r7,r2
 1002830:	dcc14515 	stw	r19,1300(sp)
 1002834:	9880010e 	bge	r19,r2,100283c <___vfprintf_internal_r+0x1320>
 1002838:	d8814515 	stw	r2,1300(sp)
 100283c:	00804074 	movhi	r2,257
 1002840:	10ba6e04 	addi	r2,r2,-5704
 1002844:	dcc14615 	stw	r19,1304(sp)
 1002848:	d8814115 	stw	r2,1284(sp)
 100284c:	003dd506 	br	1001fa4 <___vfprintf_internal_r+0xa88>
 1002850:	d9401904 	addi	r5,sp,100
 1002854:	dd000f04 	addi	r20,sp,60
 1002858:	d9414115 	stw	r5,1284(sp)
 100285c:	880a977a 	slli	r5,r17,29
 1002860:	d9814117 	ldw	r6,1284(sp)
 1002864:	8004d0fa 	srli	r2,r16,3
 1002868:	8806d0fa 	srli	r3,r17,3
 100286c:	810001cc 	andi	r4,r16,7
 1002870:	2884b03a 	or	r2,r5,r2
 1002874:	31bfffc4 	addi	r6,r6,-1
 1002878:	21000c04 	addi	r4,r4,48
 100287c:	d9814115 	stw	r6,1284(sp)
 1002880:	10cab03a 	or	r5,r2,r3
 1002884:	31000005 	stb	r4,0(r6)
 1002888:	1021883a 	mov	r16,r2
 100288c:	1823883a 	mov	r17,r3
 1002890:	283ff21e 	bne	r5,zero,100285c <___vfprintf_internal_r+0x1340>
 1002894:	d8c14c17 	ldw	r3,1328(sp)
 1002898:	1880004c 	andi	r2,r3,1
 100289c:	1005003a 	cmpeq	r2,r2,zero
 10028a0:	103db91e 	bne	r2,zero,1001f88 <___vfprintf_internal_r+0xa6c>
 10028a4:	20803fcc 	andi	r2,r4,255
 10028a8:	1080201c 	xori	r2,r2,128
 10028ac:	10bfe004 	addi	r2,r2,-128
 10028b0:	00c00c04 	movi	r3,48
 10028b4:	10fdb426 	beq	r2,r3,1001f88 <___vfprintf_internal_r+0xa6c>
 10028b8:	31bfffc4 	addi	r6,r6,-1
 10028bc:	d9814115 	stw	r6,1284(sp)
 10028c0:	30c00005 	stb	r3,0(r6)
 10028c4:	003db006 	br	1001f88 <___vfprintf_internal_r+0xa6c>
 10028c8:	88800068 	cmpgeui	r2,r17,1
 10028cc:	10002c1e 	bne	r2,zero,1002980 <___vfprintf_internal_r+0x1464>
 10028d0:	8800021e 	bne	r17,zero,10028dc <___vfprintf_internal_r+0x13c0>
 10028d4:	00800244 	movi	r2,9
 10028d8:	14002936 	bltu	r2,r16,1002980 <___vfprintf_internal_r+0x1464>
 10028dc:	d90018c4 	addi	r4,sp,99
 10028e0:	dd000f04 	addi	r20,sp,60
 10028e4:	d9014115 	stw	r4,1284(sp)
 10028e8:	d9014117 	ldw	r4,1284(sp)
 10028ec:	80800c04 	addi	r2,r16,48
 10028f0:	20800005 	stb	r2,0(r4)
 10028f4:	003da406 	br	1001f88 <___vfprintf_internal_r+0xa6c>
 10028f8:	dc400d17 	ldw	r17,52(sp)
 10028fc:	07004074 	movhi	fp,257
 1002900:	e73a7584 	addi	fp,fp,-5674
 1002904:	9425883a 	add	r18,r18,r16
 1002908:	8c400044 	addi	r17,r17,1
 100290c:	008001c4 	movi	r2,7
 1002910:	1f000015 	stw	fp,0(r3)
 1002914:	1c000115 	stw	r16,4(r3)
 1002918:	dc800e15 	stw	r18,56(sp)
 100291c:	dc400d15 	stw	r17,52(sp)
 1002920:	147de216 	blt	r2,r17,10020ac <___vfprintf_internal_r+0xb90>
 1002924:	18c00204 	addi	r3,r3,8
 1002928:	003c7a06 	br	1001b14 <___vfprintf_internal_r+0x5f8>
 100292c:	01000084 	movi	r4,2
 1002930:	d8000405 	stb	zero,16(sp)
 1002934:	003d8706 	br	1001f54 <___vfprintf_internal_r+0xa38>
 1002938:	d9814c17 	ldw	r6,1328(sp)
 100293c:	30c4703a 	and	r2,r6,r3
 1002940:	1005003a 	cmpeq	r2,r2,zero
 1002944:	103cb926 	beq	r2,zero,1001c2c <___vfprintf_internal_r+0x710>
 1002948:	d9014117 	ldw	r4,1284(sp)
 100294c:	94800044 	addi	r18,r18,1
 1002950:	8c400044 	addi	r17,r17,1
 1002954:	008001c4 	movi	r2,7
 1002958:	a9000015 	stw	r4,0(r21)
 100295c:	a8c00115 	stw	r3,4(r21)
 1002960:	dc800e15 	stw	r18,56(sp)
 1002964:	dc400d15 	stw	r17,52(sp)
 1002968:	147e6616 	blt	r2,r17,1002304 <___vfprintf_internal_r+0xde8>
 100296c:	acc00204 	addi	r19,r21,8
 1002970:	003cd706 	br	1001cd0 <___vfprintf_internal_r+0x7b4>
 1002974:	07004074 	movhi	fp,257
 1002978:	e73a7584 	addi	fp,fp,-5674
 100297c:	003c4f06 	br	1001abc <___vfprintf_internal_r+0x5a0>
 1002980:	dd000f04 	addi	r20,sp,60
 1002984:	dc801904 	addi	r18,sp,100
 1002988:	8009883a 	mov	r4,r16
 100298c:	880b883a 	mov	r5,r17
 1002990:	01800284 	movi	r6,10
 1002994:	000f883a 	mov	r7,zero
 1002998:	1008c140 	call	1008c14 <__umoddi3>
 100299c:	12000c04 	addi	r8,r2,48
 10029a0:	94bfffc4 	addi	r18,r18,-1
 10029a4:	8009883a 	mov	r4,r16
 10029a8:	880b883a 	mov	r5,r17
 10029ac:	01800284 	movi	r6,10
 10029b0:	000f883a 	mov	r7,zero
 10029b4:	92000005 	stb	r8,0(r18)
 10029b8:	10086380 	call	1008638 <__udivdi3>
 10029bc:	1009883a 	mov	r4,r2
 10029c0:	1021883a 	mov	r16,r2
 10029c4:	18800068 	cmpgeui	r2,r3,1
 10029c8:	1823883a 	mov	r17,r3
 10029cc:	103fee1e 	bne	r2,zero,1002988 <___vfprintf_internal_r+0x146c>
 10029d0:	1800021e 	bne	r3,zero,10029dc <___vfprintf_internal_r+0x14c0>
 10029d4:	00800244 	movi	r2,9
 10029d8:	113feb36 	bltu	r2,r4,1002988 <___vfprintf_internal_r+0x146c>
 10029dc:	94bfffc4 	addi	r18,r18,-1
 10029e0:	dc814115 	stw	r18,1284(sp)
 10029e4:	003fc006 	br	10028e8 <___vfprintf_internal_r+0x13cc>
 10029e8:	d9014c17 	ldw	r4,1328(sp)
 10029ec:	2080004c 	andi	r2,r4,1
 10029f0:	10009a1e 	bne	r2,zero,1002c5c <___vfprintf_internal_r+0x1740>
 10029f4:	d9401904 	addi	r5,sp,100
 10029f8:	dd000f04 	addi	r20,sp,60
 10029fc:	d9414115 	stw	r5,1284(sp)
 1002a00:	003d6106 	br	1001f88 <___vfprintf_internal_r+0xa6c>
 1002a04:	d9014f17 	ldw	r4,1340(sp)
 1002a08:	b00b883a 	mov	r5,r22
 1002a0c:	d9800c04 	addi	r6,sp,48
 1002a10:	10014c40 	call	10014c4 <__sprint_r>
 1002a14:	103c791e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002a18:	dc800e17 	ldw	r18,56(sp)
 1002a1c:	d8c01904 	addi	r3,sp,100
 1002a20:	003cff06 	br	1001e20 <___vfprintf_internal_r+0x904>
 1002a24:	d8c14c17 	ldw	r3,1328(sp)
 1002a28:	1880040c 	andi	r2,r3,16
 1002a2c:	1000711e 	bne	r2,zero,1002bf4 <___vfprintf_internal_r+0x16d8>
 1002a30:	d9014c17 	ldw	r4,1328(sp)
 1002a34:	2080100c 	andi	r2,r4,64
 1002a38:	10006e26 	beq	r2,zero,1002bf4 <___vfprintf_internal_r+0x16d8>
 1002a3c:	3c00000b 	ldhu	r16,0(r7)
 1002a40:	0023883a 	mov	r17,zero
 1002a44:	39c00104 	addi	r7,r7,4
 1002a48:	d9c14015 	stw	r7,1280(sp)
 1002a4c:	003f0006 	br	1002650 <___vfprintf_internal_r+0x1134>
 1002a50:	dc400d17 	ldw	r17,52(sp)
 1002a54:	07004074 	movhi	fp,257
 1002a58:	e73a7584 	addi	fp,fp,-5674
 1002a5c:	9425883a 	add	r18,r18,r16
 1002a60:	8c400044 	addi	r17,r17,1
 1002a64:	008001c4 	movi	r2,7
 1002a68:	1f000015 	stw	fp,0(r3)
 1002a6c:	1c000115 	stw	r16,4(r3)
 1002a70:	dc800e15 	stw	r18,56(sp)
 1002a74:	dc400d15 	stw	r17,52(sp)
 1002a78:	147d7616 	blt	r2,r17,1002054 <___vfprintf_internal_r+0xb38>
 1002a7c:	18c00204 	addi	r3,r3,8
 1002a80:	003d7b06 	br	1002070 <___vfprintf_internal_r+0xb54>
 1002a84:	dc800e17 	ldw	r18,56(sp)
 1002a88:	dc400d17 	ldw	r17,52(sp)
 1002a8c:	07004074 	movhi	fp,257
 1002a90:	e73a7984 	addi	fp,fp,-5658
 1002a94:	003bc006 	br	1001998 <___vfprintf_internal_r+0x47c>
 1002a98:	d9014f17 	ldw	r4,1340(sp)
 1002a9c:	b00b883a 	mov	r5,r22
 1002aa0:	d9800c04 	addi	r6,sp,48
 1002aa4:	10014c40 	call	10014c4 <__sprint_r>
 1002aa8:	103c541e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002aac:	dc800e17 	ldw	r18,56(sp)
 1002ab0:	d8c01904 	addi	r3,sp,100
 1002ab4:	003ce906 	br	1001e5c <___vfprintf_internal_r+0x940>
 1002ab8:	3c000017 	ldw	r16,0(r7)
 1002abc:	0009883a 	mov	r4,zero
 1002ac0:	39c00104 	addi	r7,r7,4
 1002ac4:	0023883a 	mov	r17,zero
 1002ac8:	d9c14015 	stw	r7,1280(sp)
 1002acc:	d8000405 	stb	zero,16(sp)
 1002ad0:	003d2006 	br	1001f54 <___vfprintf_internal_r+0xa38>
 1002ad4:	38800017 	ldw	r2,0(r7)
 1002ad8:	39c00104 	addi	r7,r7,4
 1002adc:	d9c14015 	stw	r7,1280(sp)
 1002ae0:	1023d7fa 	srai	r17,r2,31
 1002ae4:	1021883a 	mov	r16,r2
 1002ae8:	003d1806 	br	1001f4c <___vfprintf_internal_r+0xa30>
 1002aec:	3c000017 	ldw	r16,0(r7)
 1002af0:	01000044 	movi	r4,1
 1002af4:	39c00104 	addi	r7,r7,4
 1002af8:	0023883a 	mov	r17,zero
 1002afc:	d9c14015 	stw	r7,1280(sp)
 1002b00:	d8000405 	stb	zero,16(sp)
 1002b04:	003d1306 	br	1001f54 <___vfprintf_internal_r+0xa38>
 1002b08:	00804074 	movhi	r2,257
 1002b0c:	10ba7504 	addi	r2,r2,-5676
 1002b10:	94800044 	addi	r18,r18,1
 1002b14:	8c400044 	addi	r17,r17,1
 1002b18:	a8800015 	stw	r2,0(r21)
 1002b1c:	00c00044 	movi	r3,1
 1002b20:	008001c4 	movi	r2,7
 1002b24:	a8c00115 	stw	r3,4(r21)
 1002b28:	dc800e15 	stw	r18,56(sp)
 1002b2c:	dc400d15 	stw	r17,52(sp)
 1002b30:	1440ca16 	blt	r2,r17,1002e5c <___vfprintf_internal_r+0x1940>
 1002b34:	a8c00204 	addi	r3,r21,8
 1002b38:	2000061e 	bne	r4,zero,1002b54 <___vfprintf_internal_r+0x1638>
 1002b3c:	d9414717 	ldw	r5,1308(sp)
 1002b40:	2800041e 	bne	r5,zero,1002b54 <___vfprintf_internal_r+0x1638>
 1002b44:	d9814c17 	ldw	r6,1328(sp)
 1002b48:	3080004c 	andi	r2,r6,1
 1002b4c:	1005003a 	cmpeq	r2,r2,zero
 1002b50:	103bf01e 	bne	r2,zero,1001b14 <___vfprintf_internal_r+0x5f8>
 1002b54:	00800044 	movi	r2,1
 1002b58:	dc400d17 	ldw	r17,52(sp)
 1002b5c:	18800115 	stw	r2,4(r3)
 1002b60:	d8814917 	ldw	r2,1316(sp)
 1002b64:	94800044 	addi	r18,r18,1
 1002b68:	8c400044 	addi	r17,r17,1
 1002b6c:	18800015 	stw	r2,0(r3)
 1002b70:	008001c4 	movi	r2,7
 1002b74:	dc800e15 	stw	r18,56(sp)
 1002b78:	dc400d15 	stw	r17,52(sp)
 1002b7c:	1440ca16 	blt	r2,r17,1002ea8 <___vfprintf_internal_r+0x198c>
 1002b80:	18c00204 	addi	r3,r3,8
 1002b84:	0121c83a 	sub	r16,zero,r4
 1002b88:	0400500e 	bge	zero,r16,1002ccc <___vfprintf_internal_r+0x17b0>
 1002b8c:	00800404 	movi	r2,16
 1002b90:	1400800e 	bge	r2,r16,1002d94 <___vfprintf_internal_r+0x1878>
 1002b94:	1027883a 	mov	r19,r2
 1002b98:	07004074 	movhi	fp,257
 1002b9c:	e73a7584 	addi	fp,fp,-5674
 1002ba0:	050001c4 	movi	r20,7
 1002ba4:	00000306 	br	1002bb4 <___vfprintf_internal_r+0x1698>
 1002ba8:	18c00204 	addi	r3,r3,8
 1002bac:	843ffc04 	addi	r16,r16,-16
 1002bb0:	9c007a0e 	bge	r19,r16,1002d9c <___vfprintf_internal_r+0x1880>
 1002bb4:	94800404 	addi	r18,r18,16
 1002bb8:	8c400044 	addi	r17,r17,1
 1002bbc:	1f000015 	stw	fp,0(r3)
 1002bc0:	1cc00115 	stw	r19,4(r3)
 1002bc4:	dc800e15 	stw	r18,56(sp)
 1002bc8:	dc400d15 	stw	r17,52(sp)
 1002bcc:	a47ff60e 	bge	r20,r17,1002ba8 <___vfprintf_internal_r+0x168c>
 1002bd0:	d9014f17 	ldw	r4,1340(sp)
 1002bd4:	b00b883a 	mov	r5,r22
 1002bd8:	d9800c04 	addi	r6,sp,48
 1002bdc:	10014c40 	call	10014c4 <__sprint_r>
 1002be0:	103c061e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002be4:	dc800e17 	ldw	r18,56(sp)
 1002be8:	dc400d17 	ldw	r17,52(sp)
 1002bec:	d8c01904 	addi	r3,sp,100
 1002bf0:	003fee06 	br	1002bac <___vfprintf_internal_r+0x1690>
 1002bf4:	3c000017 	ldw	r16,0(r7)
 1002bf8:	0023883a 	mov	r17,zero
 1002bfc:	39c00104 	addi	r7,r7,4
 1002c00:	d9c14015 	stw	r7,1280(sp)
 1002c04:	003e9206 	br	1002650 <___vfprintf_internal_r+0x1134>
 1002c08:	d9401904 	addi	r5,sp,100
 1002c0c:	dd000f04 	addi	r20,sp,60
 1002c10:	d9414115 	stw	r5,1284(sp)
 1002c14:	d9814417 	ldw	r6,1296(sp)
 1002c18:	880a973a 	slli	r5,r17,28
 1002c1c:	8004d13a 	srli	r2,r16,4
 1002c20:	810003cc 	andi	r4,r16,15
 1002c24:	3109883a 	add	r4,r6,r4
 1002c28:	2884b03a 	or	r2,r5,r2
 1002c2c:	21400003 	ldbu	r5,0(r4)
 1002c30:	d9014117 	ldw	r4,1284(sp)
 1002c34:	8806d13a 	srli	r3,r17,4
 1002c38:	1021883a 	mov	r16,r2
 1002c3c:	213fffc4 	addi	r4,r4,-1
 1002c40:	d9014115 	stw	r4,1284(sp)
 1002c44:	d9814117 	ldw	r6,1284(sp)
 1002c48:	10c8b03a 	or	r4,r2,r3
 1002c4c:	1823883a 	mov	r17,r3
 1002c50:	31400005 	stb	r5,0(r6)
 1002c54:	203fef1e 	bne	r4,zero,1002c14 <___vfprintf_internal_r+0x16f8>
 1002c58:	003ccb06 	br	1001f88 <___vfprintf_internal_r+0xa6c>
 1002c5c:	00800c04 	movi	r2,48
 1002c60:	d98018c4 	addi	r6,sp,99
 1002c64:	dd000f04 	addi	r20,sp,60
 1002c68:	d88018c5 	stb	r2,99(sp)
 1002c6c:	d9814115 	stw	r6,1284(sp)
 1002c70:	003cc506 	br	1001f88 <___vfprintf_internal_r+0xa6c>
 1002c74:	dc400d17 	ldw	r17,52(sp)
 1002c78:	07004074 	movhi	fp,257
 1002c7c:	e73a7984 	addi	fp,fp,-5658
 1002c80:	003bc706 	br	1001ba0 <___vfprintf_internal_r+0x684>
 1002c84:	d9414c17 	ldw	r5,1328(sp)
 1002c88:	2880040c 	andi	r2,r5,16
 1002c8c:	10007c26 	beq	r2,zero,1002e80 <___vfprintf_internal_r+0x1964>
 1002c90:	38800017 	ldw	r2,0(r7)
 1002c94:	39c00104 	addi	r7,r7,4
 1002c98:	d9c14015 	stw	r7,1280(sp)
 1002c9c:	d9814b17 	ldw	r6,1324(sp)
 1002ca0:	d9c14017 	ldw	r7,1280(sp)
 1002ca4:	11800015 	stw	r6,0(r2)
 1002ca8:	003a7806 	br	100168c <___vfprintf_internal_r+0x170>
 1002cac:	d9014f17 	ldw	r4,1340(sp)
 1002cb0:	b00b883a 	mov	r5,r22
 1002cb4:	d9800c04 	addi	r6,sp,48
 1002cb8:	10014c40 	call	10014c4 <__sprint_r>
 1002cbc:	103bcf1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002cc0:	dc800e17 	ldw	r18,56(sp)
 1002cc4:	dc400d17 	ldw	r17,52(sp)
 1002cc8:	d8c01904 	addi	r3,sp,100
 1002ccc:	d9014717 	ldw	r4,1308(sp)
 1002cd0:	d9414117 	ldw	r5,1284(sp)
 1002cd4:	8c400044 	addi	r17,r17,1
 1002cd8:	9125883a 	add	r18,r18,r4
 1002cdc:	008001c4 	movi	r2,7
 1002ce0:	19400015 	stw	r5,0(r3)
 1002ce4:	19000115 	stw	r4,4(r3)
 1002ce8:	dc800e15 	stw	r18,56(sp)
 1002cec:	dc400d15 	stw	r17,52(sp)
 1002cf0:	147cee16 	blt	r2,r17,10020ac <___vfprintf_internal_r+0xb90>
 1002cf4:	18c00204 	addi	r3,r3,8
 1002cf8:	003b8606 	br	1001b14 <___vfprintf_internal_r+0x5f8>
 1002cfc:	38c00017 	ldw	r3,0(r7)
 1002d00:	39000204 	addi	r4,r7,8
 1002d04:	d9014015 	stw	r4,1280(sp)
 1002d08:	d8c14215 	stw	r3,1288(sp)
 1002d0c:	39c00117 	ldw	r7,4(r7)
 1002d10:	d9c14315 	stw	r7,1292(sp)
 1002d14:	003e2006 	br	1002598 <___vfprintf_internal_r+0x107c>
 1002d18:	0005883a 	mov	r2,zero
 1002d1c:	1409c83a 	sub	r4,r2,r16
 1002d20:	1105803a 	cmpltu	r2,r2,r4
 1002d24:	044bc83a 	sub	r5,zero,r17
 1002d28:	2885c83a 	sub	r2,r5,r2
 1002d2c:	2021883a 	mov	r16,r4
 1002d30:	1023883a 	mov	r17,r2
 1002d34:	01000044 	movi	r4,1
 1002d38:	00800b44 	movi	r2,45
 1002d3c:	d8800405 	stb	r2,16(sp)
 1002d40:	003c8406 	br	1001f54 <___vfprintf_internal_r+0xa38>
 1002d44:	d9014f17 	ldw	r4,1340(sp)
 1002d48:	b00b883a 	mov	r5,r22
 1002d4c:	d9800c04 	addi	r6,sp,48
 1002d50:	10014c40 	call	10014c4 <__sprint_r>
 1002d54:	103ba91e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002d58:	dc800e17 	ldw	r18,56(sp)
 1002d5c:	dc400d17 	ldw	r17,52(sp)
 1002d60:	d9000517 	ldw	r4,20(sp)
 1002d64:	d9401904 	addi	r5,sp,100
 1002d68:	003da706 	br	1002408 <___vfprintf_internal_r+0xeec>
 1002d6c:	d9014f17 	ldw	r4,1340(sp)
 1002d70:	b00b883a 	mov	r5,r22
 1002d74:	d9800c04 	addi	r6,sp,48
 1002d78:	10014c40 	call	10014c4 <__sprint_r>
 1002d7c:	103b9f1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002d80:	dc800e17 	ldw	r18,56(sp)
 1002d84:	dc400d17 	ldw	r17,52(sp)
 1002d88:	d9000517 	ldw	r4,20(sp)
 1002d8c:	d8c01904 	addi	r3,sp,100
 1002d90:	003d9106 	br	10023d8 <___vfprintf_internal_r+0xebc>
 1002d94:	07004074 	movhi	fp,257
 1002d98:	e73a7584 	addi	fp,fp,-5674
 1002d9c:	9425883a 	add	r18,r18,r16
 1002da0:	8c400044 	addi	r17,r17,1
 1002da4:	008001c4 	movi	r2,7
 1002da8:	1f000015 	stw	fp,0(r3)
 1002dac:	1c000115 	stw	r16,4(r3)
 1002db0:	dc800e15 	stw	r18,56(sp)
 1002db4:	dc400d15 	stw	r17,52(sp)
 1002db8:	147fbc16 	blt	r2,r17,1002cac <___vfprintf_internal_r+0x1790>
 1002dbc:	18c00204 	addi	r3,r3,8
 1002dc0:	003fc206 	br	1002ccc <___vfprintf_internal_r+0x17b0>
 1002dc4:	d9014f17 	ldw	r4,1340(sp)
 1002dc8:	b00b883a 	mov	r5,r22
 1002dcc:	d9800c04 	addi	r6,sp,48
 1002dd0:	10014c40 	call	10014c4 <__sprint_r>
 1002dd4:	103b891e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002dd8:	dc800e17 	ldw	r18,56(sp)
 1002ddc:	d9000517 	ldw	r4,20(sp)
 1002de0:	d8c01904 	addi	r3,sp,100
 1002de4:	003d0206 	br	10021f0 <___vfprintf_internal_r+0xcd4>
 1002de8:	07004074 	movhi	fp,257
 1002dec:	e73a7584 	addi	fp,fp,-5674
 1002df0:	003be406 	br	1001d84 <___vfprintf_internal_r+0x868>
 1002df4:	00804074 	movhi	r2,257
 1002df8:	10ba6404 	addi	r2,r2,-5744
 1002dfc:	d8814115 	stw	r2,1284(sp)
 1002e00:	003df506 	br	10025d8 <___vfprintf_internal_r+0x10bc>
 1002e04:	d9014217 	ldw	r4,1288(sp)
 1002e08:	d9414317 	ldw	r5,1292(sp)
 1002e0c:	1007efc0 	call	1007efc <__isnand>
 1002e10:	10003926 	beq	r2,zero,1002ef8 <___vfprintf_internal_r+0x19dc>
 1002e14:	d9414d17 	ldw	r5,1332(sp)
 1002e18:	008011c4 	movi	r2,71
 1002e1c:	1140ce16 	blt	r2,r5,1003158 <___vfprintf_internal_r+0x1c3c>
 1002e20:	01804074 	movhi	r6,257
 1002e24:	31ba6504 	addi	r6,r6,-5740
 1002e28:	d9814115 	stw	r6,1284(sp)
 1002e2c:	003dea06 	br	10025d8 <___vfprintf_internal_r+0x10bc>
 1002e30:	d9014c17 	ldw	r4,1328(sp)
 1002e34:	bdc00044 	addi	r23,r23,1
 1002e38:	b8c00007 	ldb	r3,0(r23)
 1002e3c:	21000814 	ori	r4,r4,32
 1002e40:	d9014c15 	stw	r4,1328(sp)
 1002e44:	003a3406 	br	1001718 <___vfprintf_internal_r+0x1fc>
 1002e48:	dcc14515 	stw	r19,1300(sp)
 1002e4c:	98011016 	blt	r19,zero,1003290 <___vfprintf_internal_r+0x1d74>
 1002e50:	980f883a 	mov	r7,r19
 1002e54:	d8014615 	stw	zero,1304(sp)
 1002e58:	003c5206 	br	1001fa4 <___vfprintf_internal_r+0xa88>
 1002e5c:	d9014f17 	ldw	r4,1340(sp)
 1002e60:	b00b883a 	mov	r5,r22
 1002e64:	d9800c04 	addi	r6,sp,48
 1002e68:	10014c40 	call	10014c4 <__sprint_r>
 1002e6c:	103b631e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002e70:	dc800e17 	ldw	r18,56(sp)
 1002e74:	d9000517 	ldw	r4,20(sp)
 1002e78:	d8c01904 	addi	r3,sp,100
 1002e7c:	003f2e06 	br	1002b38 <___vfprintf_internal_r+0x161c>
 1002e80:	d8c14c17 	ldw	r3,1328(sp)
 1002e84:	1880100c 	andi	r2,r3,64
 1002e88:	1000a026 	beq	r2,zero,100310c <___vfprintf_internal_r+0x1bf0>
 1002e8c:	38800017 	ldw	r2,0(r7)
 1002e90:	39c00104 	addi	r7,r7,4
 1002e94:	d9c14015 	stw	r7,1280(sp)
 1002e98:	d9014b17 	ldw	r4,1324(sp)
 1002e9c:	d9c14017 	ldw	r7,1280(sp)
 1002ea0:	1100000d 	sth	r4,0(r2)
 1002ea4:	0039f906 	br	100168c <___vfprintf_internal_r+0x170>
 1002ea8:	d9014f17 	ldw	r4,1340(sp)
 1002eac:	b00b883a 	mov	r5,r22
 1002eb0:	d9800c04 	addi	r6,sp,48
 1002eb4:	10014c40 	call	10014c4 <__sprint_r>
 1002eb8:	103b501e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1002ebc:	dc800e17 	ldw	r18,56(sp)
 1002ec0:	dc400d17 	ldw	r17,52(sp)
 1002ec4:	d9000517 	ldw	r4,20(sp)
 1002ec8:	d8c01904 	addi	r3,sp,100
 1002ecc:	003f2d06 	br	1002b84 <___vfprintf_internal_r+0x1668>
 1002ed0:	00800184 	movi	r2,6
 1002ed4:	14c09a36 	bltu	r2,r19,1003140 <___vfprintf_internal_r+0x1c24>
 1002ed8:	dcc14515 	stw	r19,1300(sp)
 1002edc:	9800010e 	bge	r19,zero,1002ee4 <___vfprintf_internal_r+0x19c8>
 1002ee0:	d8014515 	stw	zero,1300(sp)
 1002ee4:	00804074 	movhi	r2,257
 1002ee8:	10ba6704 	addi	r2,r2,-5732
 1002eec:	980f883a 	mov	r7,r19
 1002ef0:	d8814115 	stw	r2,1284(sp)
 1002ef4:	003a7806 	br	10018d8 <___vfprintf_internal_r+0x3bc>
 1002ef8:	00bfffc4 	movi	r2,-1
 1002efc:	9880e226 	beq	r19,r2,1003288 <___vfprintf_internal_r+0x1d6c>
 1002f00:	d9414d17 	ldw	r5,1332(sp)
 1002f04:	008019c4 	movi	r2,103
 1002f08:	2880dc26 	beq	r5,r2,100327c <___vfprintf_internal_r+0x1d60>
 1002f0c:	008011c4 	movi	r2,71
 1002f10:	2880da26 	beq	r5,r2,100327c <___vfprintf_internal_r+0x1d60>
 1002f14:	d9414c17 	ldw	r5,1328(sp)
 1002f18:	d9014317 	ldw	r4,1292(sp)
 1002f1c:	d9814217 	ldw	r6,1288(sp)
 1002f20:	29404014 	ori	r5,r5,256
 1002f24:	d9414c15 	stw	r5,1328(sp)
 1002f28:	2000cc16 	blt	r4,zero,100325c <___vfprintf_internal_r+0x1d40>
 1002f2c:	3021883a 	mov	r16,r6
 1002f30:	2023883a 	mov	r17,r4
 1002f34:	0039883a 	mov	fp,zero
 1002f38:	d9414d17 	ldw	r5,1332(sp)
 1002f3c:	00801984 	movi	r2,102
 1002f40:	2880b726 	beq	r5,r2,1003220 <___vfprintf_internal_r+0x1d04>
 1002f44:	00801184 	movi	r2,70
 1002f48:	2880b526 	beq	r5,r2,1003220 <___vfprintf_internal_r+0x1d04>
 1002f4c:	00801944 	movi	r2,101
 1002f50:	2880c826 	beq	r5,r2,1003274 <___vfprintf_internal_r+0x1d58>
 1002f54:	00801144 	movi	r2,69
 1002f58:	2880c626 	beq	r5,r2,1003274 <___vfprintf_internal_r+0x1d58>
 1002f5c:	9829883a 	mov	r20,r19
 1002f60:	d9014f17 	ldw	r4,1340(sp)
 1002f64:	d8800504 	addi	r2,sp,20
 1002f68:	880d883a 	mov	r6,r17
 1002f6c:	d8800115 	stw	r2,4(sp)
 1002f70:	d8c00604 	addi	r3,sp,24
 1002f74:	d8800704 	addi	r2,sp,28
 1002f78:	800b883a 	mov	r5,r16
 1002f7c:	01c00084 	movi	r7,2
 1002f80:	d8c00215 	stw	r3,8(sp)
 1002f84:	d8800315 	stw	r2,12(sp)
 1002f88:	dd000015 	stw	r20,0(sp)
 1002f8c:	10037400 	call	1003740 <_dtoa_r>
 1002f90:	d9814d17 	ldw	r6,1332(sp)
 1002f94:	d8814115 	stw	r2,1284(sp)
 1002f98:	008019c4 	movi	r2,103
 1002f9c:	30809526 	beq	r6,r2,10031f4 <___vfprintf_internal_r+0x1cd8>
 1002fa0:	d8c14d17 	ldw	r3,1332(sp)
 1002fa4:	008011c4 	movi	r2,71
 1002fa8:	18809226 	beq	r3,r2,10031f4 <___vfprintf_internal_r+0x1cd8>
 1002fac:	d9414117 	ldw	r5,1284(sp)
 1002fb0:	d9814d17 	ldw	r6,1332(sp)
 1002fb4:	00801984 	movi	r2,102
 1002fb8:	2d25883a 	add	r18,r5,r20
 1002fbc:	30808626 	beq	r6,r2,10031d8 <___vfprintf_internal_r+0x1cbc>
 1002fc0:	00801184 	movi	r2,70
 1002fc4:	30808426 	beq	r6,r2,10031d8 <___vfprintf_internal_r+0x1cbc>
 1002fc8:	000d883a 	mov	r6,zero
 1002fcc:	000f883a 	mov	r7,zero
 1002fd0:	880b883a 	mov	r5,r17
 1002fd4:	8009883a 	mov	r4,r16
 1002fd8:	1009ce40 	call	1009ce4 <__eqdf2>
 1002fdc:	1000751e 	bne	r2,zero,10031b4 <___vfprintf_internal_r+0x1c98>
 1002fe0:	9005883a 	mov	r2,r18
 1002fe4:	dc800715 	stw	r18,28(sp)
 1002fe8:	d9014117 	ldw	r4,1284(sp)
 1002fec:	d9414d17 	ldw	r5,1332(sp)
 1002ff0:	00c019c4 	movi	r3,103
 1002ff4:	1125c83a 	sub	r18,r2,r4
 1002ff8:	28c06826 	beq	r5,r3,100319c <___vfprintf_internal_r+0x1c80>
 1002ffc:	008011c4 	movi	r2,71
 1003000:	28806626 	beq	r5,r2,100319c <___vfprintf_internal_r+0x1c80>
 1003004:	d9000517 	ldw	r4,20(sp)
 1003008:	d8c14d17 	ldw	r3,1332(sp)
 100300c:	00801944 	movi	r2,101
 1003010:	10c05516 	blt	r2,r3,1003168 <___vfprintf_internal_r+0x1c4c>
 1003014:	213fffc4 	addi	r4,r4,-1
 1003018:	d9000515 	stw	r4,20(sp)
 100301c:	d8c00805 	stb	r3,32(sp)
 1003020:	2021883a 	mov	r16,r4
 1003024:	2000c116 	blt	r4,zero,100332c <___vfprintf_internal_r+0x1e10>
 1003028:	00800ac4 	movi	r2,43
 100302c:	d8800845 	stb	r2,33(sp)
 1003030:	00800244 	movi	r2,9
 1003034:	1400af0e 	bge	r2,r16,10032f4 <___vfprintf_internal_r+0x1dd8>
 1003038:	1027883a 	mov	r19,r2
 100303c:	dc400b84 	addi	r17,sp,46
 1003040:	8009883a 	mov	r4,r16
 1003044:	01400284 	movi	r5,10
 1003048:	100a3cc0 	call	100a3cc <__modsi3>
 100304c:	10800c04 	addi	r2,r2,48
 1003050:	8c7fffc4 	addi	r17,r17,-1
 1003054:	8009883a 	mov	r4,r16
 1003058:	01400284 	movi	r5,10
 100305c:	88800005 	stb	r2,0(r17)
 1003060:	100a36c0 	call	100a36c <__divsi3>
 1003064:	1021883a 	mov	r16,r2
 1003068:	98bff516 	blt	r19,r2,1003040 <___vfprintf_internal_r+0x1b24>
 100306c:	10c00c04 	addi	r3,r2,48
 1003070:	d88009c4 	addi	r2,sp,39
 1003074:	108001c4 	addi	r2,r2,7
 1003078:	897fffc4 	addi	r5,r17,-1
 100307c:	88ffffc5 	stb	r3,-1(r17)
 1003080:	2880a72e 	bgeu	r5,r2,1003320 <___vfprintf_internal_r+0x1e04>
 1003084:	1009883a 	mov	r4,r2
 1003088:	d9800804 	addi	r6,sp,32
 100308c:	d8c00884 	addi	r3,sp,34
 1003090:	28800003 	ldbu	r2,0(r5)
 1003094:	29400044 	addi	r5,r5,1
 1003098:	18800005 	stb	r2,0(r3)
 100309c:	18c00044 	addi	r3,r3,1
 10030a0:	293ffb36 	bltu	r5,r4,1003090 <___vfprintf_internal_r+0x1b74>
 10030a4:	1987c83a 	sub	r3,r3,r6
 10030a8:	00800044 	movi	r2,1
 10030ac:	d8c14815 	stw	r3,1312(sp)
 10030b0:	90cf883a 	add	r7,r18,r3
 10030b4:	1480960e 	bge	r2,r18,1003310 <___vfprintf_internal_r+0x1df4>
 10030b8:	39c00044 	addi	r7,r7,1
 10030bc:	d9c14515 	stw	r7,1300(sp)
 10030c0:	38003416 	blt	r7,zero,1003194 <___vfprintf_internal_r+0x1c78>
 10030c4:	e0803fcc 	andi	r2,fp,255
 10030c8:	1080201c 	xori	r2,r2,128
 10030cc:	10bfe004 	addi	r2,r2,-128
 10030d0:	10004e26 	beq	r2,zero,100320c <___vfprintf_internal_r+0x1cf0>
 10030d4:	00800b44 	movi	r2,45
 10030d8:	dc814715 	stw	r18,1308(sp)
 10030dc:	d8014615 	stw	zero,1304(sp)
 10030e0:	d8800405 	stb	r2,16(sp)
 10030e4:	003bb106 	br	1001fac <___vfprintf_internal_r+0xa90>
 10030e8:	00800b44 	movi	r2,45
 10030ec:	d8800405 	stb	r2,16(sp)
 10030f0:	003d3306 	br	10025c0 <___vfprintf_internal_r+0x10a4>
 10030f4:	d9014f17 	ldw	r4,1340(sp)
 10030f8:	b00b883a 	mov	r5,r22
 10030fc:	d9800c04 	addi	r6,sp,48
 1003100:	10014c40 	call	10014c4 <__sprint_r>
 1003104:	103abd1e 	bne	r2,zero,1001bfc <___vfprintf_internal_r+0x6e0>
 1003108:	003abb06 	br	1001bf8 <___vfprintf_internal_r+0x6dc>
 100310c:	38800017 	ldw	r2,0(r7)
 1003110:	39c00104 	addi	r7,r7,4
 1003114:	d9c14015 	stw	r7,1280(sp)
 1003118:	d9414b17 	ldw	r5,1324(sp)
 100311c:	d9c14017 	ldw	r7,1280(sp)
 1003120:	11400015 	stw	r5,0(r2)
 1003124:	00395906 	br	100168c <___vfprintf_internal_r+0x170>
 1003128:	980f883a 	mov	r7,r19
 100312c:	dcc14515 	stw	r19,1300(sp)
 1003130:	d8014615 	stw	zero,1304(sp)
 1003134:	003b9b06 	br	1001fa4 <___vfprintf_internal_r+0xa88>
 1003138:	0027883a 	mov	r19,zero
 100313c:	00397806 	br	1001720 <___vfprintf_internal_r+0x204>
 1003140:	00c04074 	movhi	r3,257
 1003144:	18fa6704 	addi	r3,r3,-5732
 1003148:	100f883a 	mov	r7,r2
 100314c:	d8814515 	stw	r2,1300(sp)
 1003150:	d8c14115 	stw	r3,1284(sp)
 1003154:	0039e006 	br	10018d8 <___vfprintf_internal_r+0x3bc>
 1003158:	00804074 	movhi	r2,257
 100315c:	10ba6604 	addi	r2,r2,-5736
 1003160:	d8814115 	stw	r2,1284(sp)
 1003164:	003d1c06 	br	10025d8 <___vfprintf_internal_r+0x10bc>
 1003168:	d9414d17 	ldw	r5,1332(sp)
 100316c:	00801984 	movi	r2,102
 1003170:	28804926 	beq	r5,r2,1003298 <___vfprintf_internal_r+0x1d7c>
 1003174:	200f883a 	mov	r7,r4
 1003178:	24805716 	blt	r4,r18,10032d8 <___vfprintf_internal_r+0x1dbc>
 100317c:	d9414c17 	ldw	r5,1328(sp)
 1003180:	2880004c 	andi	r2,r5,1
 1003184:	10000126 	beq	r2,zero,100318c <___vfprintf_internal_r+0x1c70>
 1003188:	21c00044 	addi	r7,r4,1
 100318c:	d9c14515 	stw	r7,1300(sp)
 1003190:	383fcc0e 	bge	r7,zero,10030c4 <___vfprintf_internal_r+0x1ba8>
 1003194:	d8014515 	stw	zero,1300(sp)
 1003198:	003fca06 	br	10030c4 <___vfprintf_internal_r+0x1ba8>
 100319c:	d9000517 	ldw	r4,20(sp)
 10031a0:	00bfff04 	movi	r2,-4
 10031a4:	1100480e 	bge	r2,r4,10032c8 <___vfprintf_internal_r+0x1dac>
 10031a8:	99004716 	blt	r19,r4,10032c8 <___vfprintf_internal_r+0x1dac>
 10031ac:	d8c14d15 	stw	r3,1332(sp)
 10031b0:	003ff006 	br	1003174 <___vfprintf_internal_r+0x1c58>
 10031b4:	d8800717 	ldw	r2,28(sp)
 10031b8:	14bf8b2e 	bgeu	r2,r18,1002fe8 <___vfprintf_internal_r+0x1acc>
 10031bc:	9007883a 	mov	r3,r18
 10031c0:	01000c04 	movi	r4,48
 10031c4:	11000005 	stb	r4,0(r2)
 10031c8:	10800044 	addi	r2,r2,1
 10031cc:	d8800715 	stw	r2,28(sp)
 10031d0:	18bffc1e 	bne	r3,r2,10031c4 <___vfprintf_internal_r+0x1ca8>
 10031d4:	003f8406 	br	1002fe8 <___vfprintf_internal_r+0x1acc>
 10031d8:	d8814117 	ldw	r2,1284(sp)
 10031dc:	10c00007 	ldb	r3,0(r2)
 10031e0:	00800c04 	movi	r2,48
 10031e4:	18805b26 	beq	r3,r2,1003354 <___vfprintf_internal_r+0x1e38>
 10031e8:	d9000517 	ldw	r4,20(sp)
 10031ec:	9125883a 	add	r18,r18,r4
 10031f0:	003f7506 	br	1002fc8 <___vfprintf_internal_r+0x1aac>
 10031f4:	d9014c17 	ldw	r4,1328(sp)
 10031f8:	2080004c 	andi	r2,r4,1
 10031fc:	1005003a 	cmpeq	r2,r2,zero
 1003200:	103f6a26 	beq	r2,zero,1002fac <___vfprintf_internal_r+0x1a90>
 1003204:	d8800717 	ldw	r2,28(sp)
 1003208:	003f7706 	br	1002fe8 <___vfprintf_internal_r+0x1acc>
 100320c:	d9c14515 	stw	r7,1300(sp)
 1003210:	38004d16 	blt	r7,zero,1003348 <___vfprintf_internal_r+0x1e2c>
 1003214:	dc814715 	stw	r18,1308(sp)
 1003218:	d8014615 	stw	zero,1304(sp)
 100321c:	003b6106 	br	1001fa4 <___vfprintf_internal_r+0xa88>
 1003220:	d9014f17 	ldw	r4,1340(sp)
 1003224:	d8800504 	addi	r2,sp,20
 1003228:	d8800115 	stw	r2,4(sp)
 100322c:	d8c00604 	addi	r3,sp,24
 1003230:	d8800704 	addi	r2,sp,28
 1003234:	800b883a 	mov	r5,r16
 1003238:	880d883a 	mov	r6,r17
 100323c:	01c000c4 	movi	r7,3
 1003240:	d8c00215 	stw	r3,8(sp)
 1003244:	d8800315 	stw	r2,12(sp)
 1003248:	dcc00015 	stw	r19,0(sp)
 100324c:	9829883a 	mov	r20,r19
 1003250:	10037400 	call	1003740 <_dtoa_r>
 1003254:	d8814115 	stw	r2,1284(sp)
 1003258:	003f5106 	br	1002fa0 <___vfprintf_internal_r+0x1a84>
 100325c:	d8c14217 	ldw	r3,1288(sp)
 1003260:	d9014317 	ldw	r4,1292(sp)
 1003264:	07000b44 	movi	fp,45
 1003268:	1821883a 	mov	r16,r3
 100326c:	2460003c 	xorhi	r17,r4,32768
 1003270:	003f3106 	br	1002f38 <___vfprintf_internal_r+0x1a1c>
 1003274:	9d000044 	addi	r20,r19,1
 1003278:	003f3906 	br	1002f60 <___vfprintf_internal_r+0x1a44>
 100327c:	983f251e 	bne	r19,zero,1002f14 <___vfprintf_internal_r+0x19f8>
 1003280:	04c00044 	movi	r19,1
 1003284:	003f2306 	br	1002f14 <___vfprintf_internal_r+0x19f8>
 1003288:	04c00184 	movi	r19,6
 100328c:	003f2106 	br	1002f14 <___vfprintf_internal_r+0x19f8>
 1003290:	d8014515 	stw	zero,1300(sp)
 1003294:	003eee06 	br	1002e50 <___vfprintf_internal_r+0x1934>
 1003298:	200f883a 	mov	r7,r4
 100329c:	0100370e 	bge	zero,r4,100337c <___vfprintf_internal_r+0x1e60>
 10032a0:	9800031e 	bne	r19,zero,10032b0 <___vfprintf_internal_r+0x1d94>
 10032a4:	d9814c17 	ldw	r6,1328(sp)
 10032a8:	3080004c 	andi	r2,r6,1
 10032ac:	103fb726 	beq	r2,zero,100318c <___vfprintf_internal_r+0x1c70>
 10032b0:	20800044 	addi	r2,r4,1
 10032b4:	98a7883a 	add	r19,r19,r2
 10032b8:	dcc14515 	stw	r19,1300(sp)
 10032bc:	980f883a 	mov	r7,r19
 10032c0:	983f800e 	bge	r19,zero,10030c4 <___vfprintf_internal_r+0x1ba8>
 10032c4:	003fb306 	br	1003194 <___vfprintf_internal_r+0x1c78>
 10032c8:	d9814d17 	ldw	r6,1332(sp)
 10032cc:	31bfff84 	addi	r6,r6,-2
 10032d0:	d9814d15 	stw	r6,1332(sp)
 10032d4:	003f4c06 	br	1003008 <___vfprintf_internal_r+0x1aec>
 10032d8:	0100180e 	bge	zero,r4,100333c <___vfprintf_internal_r+0x1e20>
 10032dc:	00800044 	movi	r2,1
 10032e0:	1485883a 	add	r2,r2,r18
 10032e4:	d8814515 	stw	r2,1300(sp)
 10032e8:	100f883a 	mov	r7,r2
 10032ec:	103f750e 	bge	r2,zero,10030c4 <___vfprintf_internal_r+0x1ba8>
 10032f0:	003fa806 	br	1003194 <___vfprintf_internal_r+0x1c78>
 10032f4:	80c00c04 	addi	r3,r16,48
 10032f8:	00800c04 	movi	r2,48
 10032fc:	d8c008c5 	stb	r3,35(sp)
 1003300:	d9800804 	addi	r6,sp,32
 1003304:	d8c00904 	addi	r3,sp,36
 1003308:	d8800885 	stb	r2,34(sp)
 100330c:	003f6506 	br	10030a4 <___vfprintf_internal_r+0x1b88>
 1003310:	d9014c17 	ldw	r4,1328(sp)
 1003314:	2084703a 	and	r2,r4,r2
 1003318:	103f9c26 	beq	r2,zero,100318c <___vfprintf_internal_r+0x1c70>
 100331c:	003f6606 	br	10030b8 <___vfprintf_internal_r+0x1b9c>
 1003320:	d9800804 	addi	r6,sp,32
 1003324:	d8c00884 	addi	r3,sp,34
 1003328:	003f5e06 	br	10030a4 <___vfprintf_internal_r+0x1b88>
 100332c:	00800b44 	movi	r2,45
 1003330:	0121c83a 	sub	r16,zero,r4
 1003334:	d8800845 	stb	r2,33(sp)
 1003338:	003f3d06 	br	1003030 <___vfprintf_internal_r+0x1b14>
 100333c:	00800084 	movi	r2,2
 1003340:	1105c83a 	sub	r2,r2,r4
 1003344:	003fe606 	br	10032e0 <___vfprintf_internal_r+0x1dc4>
 1003348:	d8014515 	stw	zero,1300(sp)
 100334c:	dc814715 	stw	r18,1308(sp)
 1003350:	003fb106 	br	1003218 <___vfprintf_internal_r+0x1cfc>
 1003354:	000d883a 	mov	r6,zero
 1003358:	000f883a 	mov	r7,zero
 100335c:	8009883a 	mov	r4,r16
 1003360:	880b883a 	mov	r5,r17
 1003364:	1009d6c0 	call	1009d6c <__nedf2>
 1003368:	103f9f26 	beq	r2,zero,10031e8 <___vfprintf_internal_r+0x1ccc>
 100336c:	00800044 	movi	r2,1
 1003370:	1509c83a 	sub	r4,r2,r20
 1003374:	d9000515 	stw	r4,20(sp)
 1003378:	003f9b06 	br	10031e8 <___vfprintf_internal_r+0x1ccc>
 100337c:	98000d1e 	bne	r19,zero,10033b4 <___vfprintf_internal_r+0x1e98>
 1003380:	d8c14c17 	ldw	r3,1328(sp)
 1003384:	1880004c 	andi	r2,r3,1
 1003388:	10000a1e 	bne	r2,zero,10033b4 <___vfprintf_internal_r+0x1e98>
 100338c:	01000044 	movi	r4,1
 1003390:	200f883a 	mov	r7,r4
 1003394:	d9014515 	stw	r4,1300(sp)
 1003398:	003f4a06 	br	10030c4 <___vfprintf_internal_r+0x1ba8>
 100339c:	3cc00017 	ldw	r19,0(r7)
 10033a0:	39c00104 	addi	r7,r7,4
 10033a4:	983d0e0e 	bge	r19,zero,10027e0 <___vfprintf_internal_r+0x12c4>
 10033a8:	b8c00007 	ldb	r3,0(r23)
 10033ac:	04ffffc4 	movi	r19,-1
 10033b0:	0038d906 	br	1001718 <___vfprintf_internal_r+0x1fc>
 10033b4:	9cc00084 	addi	r19,r19,2
 10033b8:	dcc14515 	stw	r19,1300(sp)
 10033bc:	980f883a 	mov	r7,r19
 10033c0:	983f400e 	bge	r19,zero,10030c4 <___vfprintf_internal_r+0x1ba8>
 10033c4:	003f7306 	br	1003194 <___vfprintf_internal_r+0x1c78>

010033c8 <__vfprintf_internal>:
 10033c8:	00804074 	movhi	r2,257
 10033cc:	1081d504 	addi	r2,r2,1876
 10033d0:	2013883a 	mov	r9,r4
 10033d4:	11000017 	ldw	r4,0(r2)
 10033d8:	2805883a 	mov	r2,r5
 10033dc:	300f883a 	mov	r7,r6
 10033e0:	480b883a 	mov	r5,r9
 10033e4:	100d883a 	mov	r6,r2
 10033e8:	100151c1 	jmpi	100151c <___vfprintf_internal_r>

010033ec <__swsetup_r>:
 10033ec:	00804074 	movhi	r2,257
 10033f0:	1081d504 	addi	r2,r2,1876
 10033f4:	10c00017 	ldw	r3,0(r2)
 10033f8:	defffd04 	addi	sp,sp,-12
 10033fc:	dc400115 	stw	r17,4(sp)
 1003400:	dc000015 	stw	r16,0(sp)
 1003404:	dfc00215 	stw	ra,8(sp)
 1003408:	2023883a 	mov	r17,r4
 100340c:	2821883a 	mov	r16,r5
 1003410:	18000226 	beq	r3,zero,100341c <__swsetup_r+0x30>
 1003414:	18800e17 	ldw	r2,56(r3)
 1003418:	10001f26 	beq	r2,zero,1003498 <__swsetup_r+0xac>
 100341c:	8100030b 	ldhu	r4,12(r16)
 1003420:	2080020c 	andi	r2,r4,8
 1003424:	10002826 	beq	r2,zero,10034c8 <__swsetup_r+0xdc>
 1003428:	81400417 	ldw	r5,16(r16)
 100342c:	28001d26 	beq	r5,zero,10034a4 <__swsetup_r+0xb8>
 1003430:	2080004c 	andi	r2,r4,1
 1003434:	1005003a 	cmpeq	r2,r2,zero
 1003438:	10000b26 	beq	r2,zero,1003468 <__swsetup_r+0x7c>
 100343c:	2080008c 	andi	r2,r4,2
 1003440:	10001226 	beq	r2,zero,100348c <__swsetup_r+0xa0>
 1003444:	0005883a 	mov	r2,zero
 1003448:	80800215 	stw	r2,8(r16)
 100344c:	28000b26 	beq	r5,zero,100347c <__swsetup_r+0x90>
 1003450:	0005883a 	mov	r2,zero
 1003454:	dfc00217 	ldw	ra,8(sp)
 1003458:	dc400117 	ldw	r17,4(sp)
 100345c:	dc000017 	ldw	r16,0(sp)
 1003460:	dec00304 	addi	sp,sp,12
 1003464:	f800283a 	ret
 1003468:	80800517 	ldw	r2,20(r16)
 100346c:	80000215 	stw	zero,8(r16)
 1003470:	0085c83a 	sub	r2,zero,r2
 1003474:	80800615 	stw	r2,24(r16)
 1003478:	283ff51e 	bne	r5,zero,1003450 <__swsetup_r+0x64>
 100347c:	2080200c 	andi	r2,r4,128
 1003480:	103ff326 	beq	r2,zero,1003450 <__swsetup_r+0x64>
 1003484:	00bfffc4 	movi	r2,-1
 1003488:	003ff206 	br	1003454 <__swsetup_r+0x68>
 100348c:	80800517 	ldw	r2,20(r16)
 1003490:	80800215 	stw	r2,8(r16)
 1003494:	003fed06 	br	100344c <__swsetup_r+0x60>
 1003498:	1809883a 	mov	r4,r3
 100349c:	1004f8c0 	call	1004f8c <__sinit>
 10034a0:	003fde06 	br	100341c <__swsetup_r+0x30>
 10034a4:	20c0a00c 	andi	r3,r4,640
 10034a8:	00808004 	movi	r2,512
 10034ac:	18bfe026 	beq	r3,r2,1003430 <__swsetup_r+0x44>
 10034b0:	8809883a 	mov	r4,r17
 10034b4:	800b883a 	mov	r5,r16
 10034b8:	1005d040 	call	1005d04 <__smakebuf_r>
 10034bc:	8100030b 	ldhu	r4,12(r16)
 10034c0:	81400417 	ldw	r5,16(r16)
 10034c4:	003fda06 	br	1003430 <__swsetup_r+0x44>
 10034c8:	2080040c 	andi	r2,r4,16
 10034cc:	103fed26 	beq	r2,zero,1003484 <__swsetup_r+0x98>
 10034d0:	2080010c 	andi	r2,r4,4
 10034d4:	10001226 	beq	r2,zero,1003520 <__swsetup_r+0x134>
 10034d8:	81400c17 	ldw	r5,48(r16)
 10034dc:	28000526 	beq	r5,zero,10034f4 <__swsetup_r+0x108>
 10034e0:	80801004 	addi	r2,r16,64
 10034e4:	28800226 	beq	r5,r2,10034f0 <__swsetup_r+0x104>
 10034e8:	8809883a 	mov	r4,r17
 10034ec:	10053100 	call	1005310 <_free_r>
 10034f0:	80000c15 	stw	zero,48(r16)
 10034f4:	8080030b 	ldhu	r2,12(r16)
 10034f8:	81400417 	ldw	r5,16(r16)
 10034fc:	80000115 	stw	zero,4(r16)
 1003500:	10bff6cc 	andi	r2,r2,65499
 1003504:	8080030d 	sth	r2,12(r16)
 1003508:	81400015 	stw	r5,0(r16)
 100350c:	8080030b 	ldhu	r2,12(r16)
 1003510:	10800214 	ori	r2,r2,8
 1003514:	113fffcc 	andi	r4,r2,65535
 1003518:	8080030d 	sth	r2,12(r16)
 100351c:	003fc306 	br	100342c <__swsetup_r+0x40>
 1003520:	81400417 	ldw	r5,16(r16)
 1003524:	003ff906 	br	100350c <__swsetup_r+0x120>

01003528 <quorem>:
 1003528:	28c00417 	ldw	r3,16(r5)
 100352c:	20800417 	ldw	r2,16(r4)
 1003530:	defff604 	addi	sp,sp,-40
 1003534:	ddc00715 	stw	r23,28(sp)
 1003538:	dd400515 	stw	r21,20(sp)
 100353c:	dfc00915 	stw	ra,36(sp)
 1003540:	df000815 	stw	fp,32(sp)
 1003544:	dd800615 	stw	r22,24(sp)
 1003548:	dd000415 	stw	r20,16(sp)
 100354c:	dcc00315 	stw	r19,12(sp)
 1003550:	dc800215 	stw	r18,8(sp)
 1003554:	dc400115 	stw	r17,4(sp)
 1003558:	dc000015 	stw	r16,0(sp)
 100355c:	202f883a 	mov	r23,r4
 1003560:	282b883a 	mov	r21,r5
 1003564:	10c07416 	blt	r2,r3,1003738 <quorem+0x210>
 1003568:	1c7fffc4 	addi	r17,r3,-1
 100356c:	8c45883a 	add	r2,r17,r17
 1003570:	1085883a 	add	r2,r2,r2
 1003574:	2c000504 	addi	r16,r5,20
 1003578:	24c00504 	addi	r19,r4,20
 100357c:	14ed883a 	add	r22,r2,r19
 1003580:	80a5883a 	add	r18,r16,r2
 1003584:	b7000017 	ldw	fp,0(r22)
 1003588:	91400017 	ldw	r5,0(r18)
 100358c:	e009883a 	mov	r4,fp
 1003590:	29400044 	addi	r5,r5,1
 1003594:	100a42c0 	call	100a42c <__udivsi3>
 1003598:	1029883a 	mov	r20,r2
 100359c:	10003c1e 	bne	r2,zero,1003690 <quorem+0x168>
 10035a0:	a80b883a 	mov	r5,r21
 10035a4:	b809883a 	mov	r4,r23
 10035a8:	1006a300 	call	1006a30 <__mcmp>
 10035ac:	10002b16 	blt	r2,zero,100365c <quorem+0x134>
 10035b0:	a5000044 	addi	r20,r20,1
 10035b4:	980f883a 	mov	r7,r19
 10035b8:	0011883a 	mov	r8,zero
 10035bc:	0009883a 	mov	r4,zero
 10035c0:	81400017 	ldw	r5,0(r16)
 10035c4:	38c00017 	ldw	r3,0(r7)
 10035c8:	84000104 	addi	r16,r16,4
 10035cc:	28bfffcc 	andi	r2,r5,65535
 10035d0:	2085883a 	add	r2,r4,r2
 10035d4:	11bfffcc 	andi	r6,r2,65535
 10035d8:	193fffcc 	andi	r4,r3,65535
 10035dc:	1004d43a 	srli	r2,r2,16
 10035e0:	280ad43a 	srli	r5,r5,16
 10035e4:	2189c83a 	sub	r4,r4,r6
 10035e8:	2209883a 	add	r4,r4,r8
 10035ec:	1806d43a 	srli	r3,r3,16
 10035f0:	288b883a 	add	r5,r5,r2
 10035f4:	200dd43a 	srai	r6,r4,16
 10035f8:	28bfffcc 	andi	r2,r5,65535
 10035fc:	1887c83a 	sub	r3,r3,r2
 1003600:	1987883a 	add	r3,r3,r6
 1003604:	3900000d 	sth	r4,0(r7)
 1003608:	38c0008d 	sth	r3,2(r7)
 100360c:	2808d43a 	srli	r4,r5,16
 1003610:	39c00104 	addi	r7,r7,4
 1003614:	1811d43a 	srai	r8,r3,16
 1003618:	943fe92e 	bgeu	r18,r16,10035c0 <quorem+0x98>
 100361c:	8c45883a 	add	r2,r17,r17
 1003620:	1085883a 	add	r2,r2,r2
 1003624:	9885883a 	add	r2,r19,r2
 1003628:	10c00017 	ldw	r3,0(r2)
 100362c:	18000b1e 	bne	r3,zero,100365c <quorem+0x134>
 1003630:	113fff04 	addi	r4,r2,-4
 1003634:	9900082e 	bgeu	r19,r4,1003658 <quorem+0x130>
 1003638:	10bfff17 	ldw	r2,-4(r2)
 100363c:	10000326 	beq	r2,zero,100364c <quorem+0x124>
 1003640:	00000506 	br	1003658 <quorem+0x130>
 1003644:	20800017 	ldw	r2,0(r4)
 1003648:	1000031e 	bne	r2,zero,1003658 <quorem+0x130>
 100364c:	213fff04 	addi	r4,r4,-4
 1003650:	8c7fffc4 	addi	r17,r17,-1
 1003654:	993ffb36 	bltu	r19,r4,1003644 <quorem+0x11c>
 1003658:	bc400415 	stw	r17,16(r23)
 100365c:	a005883a 	mov	r2,r20
 1003660:	dfc00917 	ldw	ra,36(sp)
 1003664:	df000817 	ldw	fp,32(sp)
 1003668:	ddc00717 	ldw	r23,28(sp)
 100366c:	dd800617 	ldw	r22,24(sp)
 1003670:	dd400517 	ldw	r21,20(sp)
 1003674:	dd000417 	ldw	r20,16(sp)
 1003678:	dcc00317 	ldw	r19,12(sp)
 100367c:	dc800217 	ldw	r18,8(sp)
 1003680:	dc400117 	ldw	r17,4(sp)
 1003684:	dc000017 	ldw	r16,0(sp)
 1003688:	dec00a04 	addi	sp,sp,40
 100368c:	f800283a 	ret
 1003690:	980f883a 	mov	r7,r19
 1003694:	8011883a 	mov	r8,r16
 1003698:	0013883a 	mov	r9,zero
 100369c:	000d883a 	mov	r6,zero
 10036a0:	40c00017 	ldw	r3,0(r8)
 10036a4:	39000017 	ldw	r4,0(r7)
 10036a8:	42000104 	addi	r8,r8,4
 10036ac:	18bfffcc 	andi	r2,r3,65535
 10036b0:	a085383a 	mul	r2,r20,r2
 10036b4:	1806d43a 	srli	r3,r3,16
 10036b8:	217fffcc 	andi	r5,r4,65535
 10036bc:	3085883a 	add	r2,r6,r2
 10036c0:	11bfffcc 	andi	r6,r2,65535
 10036c4:	a0c7383a 	mul	r3,r20,r3
 10036c8:	1004d43a 	srli	r2,r2,16
 10036cc:	298bc83a 	sub	r5,r5,r6
 10036d0:	2a4b883a 	add	r5,r5,r9
 10036d4:	2008d43a 	srli	r4,r4,16
 10036d8:	1887883a 	add	r3,r3,r2
 10036dc:	280dd43a 	srai	r6,r5,16
 10036e0:	18bfffcc 	andi	r2,r3,65535
 10036e4:	2089c83a 	sub	r4,r4,r2
 10036e8:	2189883a 	add	r4,r4,r6
 10036ec:	3900008d 	sth	r4,2(r7)
 10036f0:	3940000d 	sth	r5,0(r7)
 10036f4:	180cd43a 	srli	r6,r3,16
 10036f8:	39c00104 	addi	r7,r7,4
 10036fc:	2013d43a 	srai	r9,r4,16
 1003700:	923fe72e 	bgeu	r18,r8,10036a0 <quorem+0x178>
 1003704:	e03fa61e 	bne	fp,zero,10035a0 <quorem+0x78>
 1003708:	b0ffff04 	addi	r3,r22,-4
 100370c:	98c0082e 	bgeu	r19,r3,1003730 <quorem+0x208>
 1003710:	b0bfff17 	ldw	r2,-4(r22)
 1003714:	10000326 	beq	r2,zero,1003724 <quorem+0x1fc>
 1003718:	00000506 	br	1003730 <quorem+0x208>
 100371c:	18800017 	ldw	r2,0(r3)
 1003720:	1000031e 	bne	r2,zero,1003730 <quorem+0x208>
 1003724:	18ffff04 	addi	r3,r3,-4
 1003728:	8c7fffc4 	addi	r17,r17,-1
 100372c:	98fffb36 	bltu	r19,r3,100371c <quorem+0x1f4>
 1003730:	bc400415 	stw	r17,16(r23)
 1003734:	003f9a06 	br	10035a0 <quorem+0x78>
 1003738:	0005883a 	mov	r2,zero
 100373c:	003fc806 	br	1003660 <quorem+0x138>

01003740 <_dtoa_r>:
 1003740:	22001017 	ldw	r8,64(r4)
 1003744:	deffda04 	addi	sp,sp,-152
 1003748:	dd402115 	stw	r21,132(sp)
 100374c:	dd002015 	stw	r20,128(sp)
 1003750:	dc801e15 	stw	r18,120(sp)
 1003754:	dc401d15 	stw	r17,116(sp)
 1003758:	dfc02515 	stw	ra,148(sp)
 100375c:	df002415 	stw	fp,144(sp)
 1003760:	ddc02315 	stw	r23,140(sp)
 1003764:	dd802215 	stw	r22,136(sp)
 1003768:	dcc01f15 	stw	r19,124(sp)
 100376c:	dc001c15 	stw	r16,112(sp)
 1003770:	d9001615 	stw	r4,88(sp)
 1003774:	3023883a 	mov	r17,r6
 1003778:	2829883a 	mov	r20,r5
 100377c:	d9c01715 	stw	r7,92(sp)
 1003780:	dc802817 	ldw	r18,160(sp)
 1003784:	302b883a 	mov	r21,r6
 1003788:	40000a26 	beq	r8,zero,10037b4 <_dtoa_r+0x74>
 100378c:	20801117 	ldw	r2,68(r4)
 1003790:	400b883a 	mov	r5,r8
 1003794:	40800115 	stw	r2,4(r8)
 1003798:	20c01117 	ldw	r3,68(r4)
 100379c:	00800044 	movi	r2,1
 10037a0:	10c4983a 	sll	r2,r2,r3
 10037a4:	40800215 	stw	r2,8(r8)
 10037a8:	10068d40 	call	10068d4 <_Bfree>
 10037ac:	d8c01617 	ldw	r3,88(sp)
 10037b0:	18001015 	stw	zero,64(r3)
 10037b4:	8800a316 	blt	r17,zero,1003a44 <_dtoa_r+0x304>
 10037b8:	90000015 	stw	zero,0(r18)
 10037bc:	a8dffc2c 	andhi	r3,r21,32752
 10037c0:	009ffc34 	movhi	r2,32752
 10037c4:	18809126 	beq	r3,r2,1003a0c <_dtoa_r+0x2cc>
 10037c8:	000d883a 	mov	r6,zero
 10037cc:	000f883a 	mov	r7,zero
 10037d0:	a009883a 	mov	r4,r20
 10037d4:	a80b883a 	mov	r5,r21
 10037d8:	dd001215 	stw	r20,72(sp)
 10037dc:	dd401315 	stw	r21,76(sp)
 10037e0:	1009d6c0 	call	1009d6c <__nedf2>
 10037e4:	1000171e 	bne	r2,zero,1003844 <_dtoa_r+0x104>
 10037e8:	d9802717 	ldw	r6,156(sp)
 10037ec:	00800044 	movi	r2,1
 10037f0:	30800015 	stw	r2,0(r6)
 10037f4:	d8802917 	ldw	r2,164(sp)
 10037f8:	10029b26 	beq	r2,zero,1004268 <_dtoa_r+0xb28>
 10037fc:	d9002917 	ldw	r4,164(sp)
 1003800:	00804074 	movhi	r2,257
 1003804:	10ba7544 	addi	r2,r2,-5675
 1003808:	10ffffc4 	addi	r3,r2,-1
 100380c:	20800015 	stw	r2,0(r4)
 1003810:	1805883a 	mov	r2,r3
 1003814:	dfc02517 	ldw	ra,148(sp)
 1003818:	df002417 	ldw	fp,144(sp)
 100381c:	ddc02317 	ldw	r23,140(sp)
 1003820:	dd802217 	ldw	r22,136(sp)
 1003824:	dd402117 	ldw	r21,132(sp)
 1003828:	dd002017 	ldw	r20,128(sp)
 100382c:	dcc01f17 	ldw	r19,124(sp)
 1003830:	dc801e17 	ldw	r18,120(sp)
 1003834:	dc401d17 	ldw	r17,116(sp)
 1003838:	dc001c17 	ldw	r16,112(sp)
 100383c:	dec02604 	addi	sp,sp,152
 1003840:	f800283a 	ret
 1003844:	d9001617 	ldw	r4,88(sp)
 1003848:	d9401217 	ldw	r5,72(sp)
 100384c:	d8800104 	addi	r2,sp,4
 1003850:	a80d883a 	mov	r6,r21
 1003854:	d9c00204 	addi	r7,sp,8
 1003858:	d8800015 	stw	r2,0(sp)
 100385c:	1006f100 	call	1006f10 <__d2b>
 1003860:	d8800715 	stw	r2,28(sp)
 1003864:	a804d53a 	srli	r2,r21,20
 1003868:	1101ffcc 	andi	r4,r2,2047
 100386c:	20008626 	beq	r4,zero,1003a88 <_dtoa_r+0x348>
 1003870:	d8c01217 	ldw	r3,72(sp)
 1003874:	00800434 	movhi	r2,16
 1003878:	10bfffc4 	addi	r2,r2,-1
 100387c:	ddc00117 	ldw	r23,4(sp)
 1003880:	a884703a 	and	r2,r21,r2
 1003884:	1811883a 	mov	r8,r3
 1003888:	124ffc34 	orhi	r9,r2,16368
 100388c:	25bf0044 	addi	r22,r4,-1023
 1003890:	d8000815 	stw	zero,32(sp)
 1003894:	0005883a 	mov	r2,zero
 1003898:	00cffe34 	movhi	r3,16376
 100389c:	480b883a 	mov	r5,r9
 10038a0:	4009883a 	mov	r4,r8
 10038a4:	180f883a 	mov	r7,r3
 10038a8:	100d883a 	mov	r6,r2
 10038ac:	10095d40 	call	10095d4 <__subdf3>
 10038b0:	0218dbf4 	movhi	r8,25455
 10038b4:	4210d844 	addi	r8,r8,17249
 10038b8:	024ff4f4 	movhi	r9,16339
 10038bc:	4a61e9c4 	addi	r9,r9,-30809
 10038c0:	480f883a 	mov	r7,r9
 10038c4:	400d883a 	mov	r6,r8
 10038c8:	180b883a 	mov	r5,r3
 10038cc:	1009883a 	mov	r4,r2
 10038d0:	10096c80 	call	10096c8 <__muldf3>
 10038d4:	0222d874 	movhi	r8,35681
 10038d8:	42322cc4 	addi	r8,r8,-14157
 10038dc:	024ff1f4 	movhi	r9,16327
 10038e0:	4a628a04 	addi	r9,r9,-30168
 10038e4:	480f883a 	mov	r7,r9
 10038e8:	400d883a 	mov	r6,r8
 10038ec:	180b883a 	mov	r5,r3
 10038f0:	1009883a 	mov	r4,r2
 10038f4:	10096540 	call	1009654 <__adddf3>
 10038f8:	b009883a 	mov	r4,r22
 10038fc:	1021883a 	mov	r16,r2
 1003900:	1823883a 	mov	r17,r3
 1003904:	1009f8c0 	call	1009f8c <__floatsidf>
 1003908:	021427f4 	movhi	r8,20639
 100390c:	421e7ec4 	addi	r8,r8,31227
 1003910:	024ff4f4 	movhi	r9,16339
 1003914:	4a5104c4 	addi	r9,r9,17427
 1003918:	480f883a 	mov	r7,r9
 100391c:	400d883a 	mov	r6,r8
 1003920:	180b883a 	mov	r5,r3
 1003924:	1009883a 	mov	r4,r2
 1003928:	10096c80 	call	10096c8 <__muldf3>
 100392c:	180f883a 	mov	r7,r3
 1003930:	880b883a 	mov	r5,r17
 1003934:	100d883a 	mov	r6,r2
 1003938:	8009883a 	mov	r4,r16
 100393c:	10096540 	call	1009654 <__adddf3>
 1003940:	1009883a 	mov	r4,r2
 1003944:	180b883a 	mov	r5,r3
 1003948:	1021883a 	mov	r16,r2
 100394c:	1823883a 	mov	r17,r3
 1003950:	100a0840 	call	100a084 <__fixdfsi>
 1003954:	000d883a 	mov	r6,zero
 1003958:	000f883a 	mov	r7,zero
 100395c:	8009883a 	mov	r4,r16
 1003960:	880b883a 	mov	r5,r17
 1003964:	d8800d15 	stw	r2,52(sp)
 1003968:	1009f040 	call	1009f04 <__ltdf2>
 100396c:	10031716 	blt	r2,zero,10045cc <_dtoa_r+0xe8c>
 1003970:	d8c00d17 	ldw	r3,52(sp)
 1003974:	00800584 	movi	r2,22
 1003978:	10c1482e 	bgeu	r2,r3,1003e9c <_dtoa_r+0x75c>
 100397c:	01000044 	movi	r4,1
 1003980:	d9000c15 	stw	r4,48(sp)
 1003984:	bd85c83a 	sub	r2,r23,r22
 1003988:	11bfffc4 	addi	r6,r2,-1
 100398c:	30030b16 	blt	r6,zero,10045bc <_dtoa_r+0xe7c>
 1003990:	d9800a15 	stw	r6,40(sp)
 1003994:	d8001115 	stw	zero,68(sp)
 1003998:	d8c00d17 	ldw	r3,52(sp)
 100399c:	1802ff16 	blt	r3,zero,100459c <_dtoa_r+0xe5c>
 10039a0:	d9000a17 	ldw	r4,40(sp)
 10039a4:	d8c00915 	stw	r3,36(sp)
 10039a8:	d8001015 	stw	zero,64(sp)
 10039ac:	20c9883a 	add	r4,r4,r3
 10039b0:	d9000a15 	stw	r4,40(sp)
 10039b4:	d9001717 	ldw	r4,92(sp)
 10039b8:	00800244 	movi	r2,9
 10039bc:	11004636 	bltu	r2,r4,1003ad8 <_dtoa_r+0x398>
 10039c0:	00800144 	movi	r2,5
 10039c4:	11020416 	blt	r2,r4,10041d8 <_dtoa_r+0xa98>
 10039c8:	04400044 	movi	r17,1
 10039cc:	d8c01717 	ldw	r3,92(sp)
 10039d0:	00800144 	movi	r2,5
 10039d4:	10c1ed36 	bltu	r2,r3,100418c <_dtoa_r+0xa4c>
 10039d8:	18c5883a 	add	r2,r3,r3
 10039dc:	1085883a 	add	r2,r2,r2
 10039e0:	00c04034 	movhi	r3,256
 10039e4:	18ce7d04 	addi	r3,r3,14836
 10039e8:	10c5883a 	add	r2,r2,r3
 10039ec:	11000017 	ldw	r4,0(r2)
 10039f0:	2000683a 	jmp	r4
 10039f4:	01003ae0 	cmpeqi	r4,zero,235
 10039f8:	01003ae0 	cmpeqi	r4,zero,235
 10039fc:	010044e0 	cmpeqi	r4,zero,275
 1003a00:	010044b8 	rdprs	r4,zero,274
 1003a04:	010044fc 	xorhi	r4,zero,275
 1003a08:	01004508 	cmpgei	r4,zero,276
 1003a0c:	d9002717 	ldw	r4,156(sp)
 1003a10:	0089c3c4 	movi	r2,9999
 1003a14:	20800015 	stw	r2,0(r4)
 1003a18:	a0001026 	beq	r20,zero,1003a5c <_dtoa_r+0x31c>
 1003a1c:	00c04074 	movhi	r3,257
 1003a20:	18fa8104 	addi	r3,r3,-5628
 1003a24:	d9802917 	ldw	r6,164(sp)
 1003a28:	303f7926 	beq	r6,zero,1003810 <_dtoa_r+0xd0>
 1003a2c:	188000c7 	ldb	r2,3(r3)
 1003a30:	190000c4 	addi	r4,r3,3
 1003a34:	1000101e 	bne	r2,zero,1003a78 <_dtoa_r+0x338>
 1003a38:	d8802917 	ldw	r2,164(sp)
 1003a3c:	11000015 	stw	r4,0(r2)
 1003a40:	003f7306 	br	1003810 <_dtoa_r+0xd0>
 1003a44:	00a00034 	movhi	r2,32768
 1003a48:	10bfffc4 	addi	r2,r2,-1
 1003a4c:	00c00044 	movi	r3,1
 1003a50:	88aa703a 	and	r21,r17,r2
 1003a54:	90c00015 	stw	r3,0(r18)
 1003a58:	003f5806 	br	10037bc <_dtoa_r+0x7c>
 1003a5c:	00800434 	movhi	r2,16
 1003a60:	10bfffc4 	addi	r2,r2,-1
 1003a64:	a884703a 	and	r2,r21,r2
 1003a68:	103fec1e 	bne	r2,zero,1003a1c <_dtoa_r+0x2dc>
 1003a6c:	00c04074 	movhi	r3,257
 1003a70:	18fa7e04 	addi	r3,r3,-5640
 1003a74:	003feb06 	br	1003a24 <_dtoa_r+0x2e4>
 1003a78:	d8802917 	ldw	r2,164(sp)
 1003a7c:	19000204 	addi	r4,r3,8
 1003a80:	11000015 	stw	r4,0(r2)
 1003a84:	003f6206 	br	1003810 <_dtoa_r+0xd0>
 1003a88:	ddc00117 	ldw	r23,4(sp)
 1003a8c:	d8800217 	ldw	r2,8(sp)
 1003a90:	01000804 	movi	r4,32
 1003a94:	b8c10c84 	addi	r3,r23,1074
 1003a98:	18a3883a 	add	r17,r3,r2
 1003a9c:	2441b80e 	bge	r4,r17,1004180 <_dtoa_r+0xa40>
 1003aa0:	00c01004 	movi	r3,64
 1003aa4:	1c47c83a 	sub	r3,r3,r17
 1003aa8:	88bff804 	addi	r2,r17,-32
 1003aac:	a8c6983a 	sll	r3,r21,r3
 1003ab0:	a084d83a 	srl	r2,r20,r2
 1003ab4:	1888b03a 	or	r4,r3,r2
 1003ab8:	100a15c0 	call	100a15c <__floatunsidf>
 1003abc:	1011883a 	mov	r8,r2
 1003ac0:	00bf8434 	movhi	r2,65040
 1003ac4:	01000044 	movi	r4,1
 1003ac8:	10d3883a 	add	r9,r2,r3
 1003acc:	8dbef344 	addi	r22,r17,-1075
 1003ad0:	d9000815 	stw	r4,32(sp)
 1003ad4:	003f6f06 	br	1003894 <_dtoa_r+0x154>
 1003ad8:	d8001715 	stw	zero,92(sp)
 1003adc:	04400044 	movi	r17,1
 1003ae0:	00bfffc4 	movi	r2,-1
 1003ae4:	00c00044 	movi	r3,1
 1003ae8:	d8800e15 	stw	r2,56(sp)
 1003aec:	d8002615 	stw	zero,152(sp)
 1003af0:	d8800f15 	stw	r2,60(sp)
 1003af4:	d8c00b15 	stw	r3,44(sp)
 1003af8:	1021883a 	mov	r16,r2
 1003afc:	d8801617 	ldw	r2,88(sp)
 1003b00:	10001115 	stw	zero,68(r2)
 1003b04:	d8801617 	ldw	r2,88(sp)
 1003b08:	11401117 	ldw	r5,68(r2)
 1003b0c:	1009883a 	mov	r4,r2
 1003b10:	1006e540 	call	1006e54 <_Balloc>
 1003b14:	d8c01617 	ldw	r3,88(sp)
 1003b18:	d8800515 	stw	r2,20(sp)
 1003b1c:	18801015 	stw	r2,64(r3)
 1003b20:	00800384 	movi	r2,14
 1003b24:	14006836 	bltu	r2,r16,1003cc8 <_dtoa_r+0x588>
 1003b28:	8805003a 	cmpeq	r2,r17,zero
 1003b2c:	1000661e 	bne	r2,zero,1003cc8 <_dtoa_r+0x588>
 1003b30:	d9000d17 	ldw	r4,52(sp)
 1003b34:	0102300e 	bge	zero,r4,10043f8 <_dtoa_r+0xcb8>
 1003b38:	208003cc 	andi	r2,r4,15
 1003b3c:	100490fa 	slli	r2,r2,3
 1003b40:	2025d13a 	srai	r18,r4,4
 1003b44:	00c04074 	movhi	r3,257
 1003b48:	18fa9304 	addi	r3,r3,-5556
 1003b4c:	10c5883a 	add	r2,r2,r3
 1003b50:	90c0040c 	andi	r3,r18,16
 1003b54:	14000017 	ldw	r16,0(r2)
 1003b58:	14400117 	ldw	r17,4(r2)
 1003b5c:	18036a1e 	bne	r3,zero,1004908 <_dtoa_r+0x11c8>
 1003b60:	05800084 	movi	r22,2
 1003b64:	90001026 	beq	r18,zero,1003ba8 <_dtoa_r+0x468>
 1003b68:	04c04074 	movhi	r19,257
 1003b6c:	9cfac504 	addi	r19,r19,-5356
 1003b70:	9080004c 	andi	r2,r18,1
 1003b74:	1005003a 	cmpeq	r2,r2,zero
 1003b78:	1000081e 	bne	r2,zero,1003b9c <_dtoa_r+0x45c>
 1003b7c:	99800017 	ldw	r6,0(r19)
 1003b80:	99c00117 	ldw	r7,4(r19)
 1003b84:	880b883a 	mov	r5,r17
 1003b88:	8009883a 	mov	r4,r16
 1003b8c:	10096c80 	call	10096c8 <__muldf3>
 1003b90:	1021883a 	mov	r16,r2
 1003b94:	b5800044 	addi	r22,r22,1
 1003b98:	1823883a 	mov	r17,r3
 1003b9c:	9025d07a 	srai	r18,r18,1
 1003ba0:	9cc00204 	addi	r19,r19,8
 1003ba4:	903ff21e 	bne	r18,zero,1003b70 <_dtoa_r+0x430>
 1003ba8:	a80b883a 	mov	r5,r21
 1003bac:	a009883a 	mov	r4,r20
 1003bb0:	880f883a 	mov	r7,r17
 1003bb4:	800d883a 	mov	r6,r16
 1003bb8:	1009a8c0 	call	1009a8c <__divdf3>
 1003bbc:	1029883a 	mov	r20,r2
 1003bc0:	182b883a 	mov	r21,r3
 1003bc4:	d8c00c17 	ldw	r3,48(sp)
 1003bc8:	1805003a 	cmpeq	r2,r3,zero
 1003bcc:	1000081e 	bne	r2,zero,1003bf0 <_dtoa_r+0x4b0>
 1003bd0:	0005883a 	mov	r2,zero
 1003bd4:	00cffc34 	movhi	r3,16368
 1003bd8:	180f883a 	mov	r7,r3
 1003bdc:	a009883a 	mov	r4,r20
 1003be0:	a80b883a 	mov	r5,r21
 1003be4:	100d883a 	mov	r6,r2
 1003be8:	1009f040 	call	1009f04 <__ltdf2>
 1003bec:	1003fe16 	blt	r2,zero,1004be8 <_dtoa_r+0x14a8>
 1003bf0:	b009883a 	mov	r4,r22
 1003bf4:	1009f8c0 	call	1009f8c <__floatsidf>
 1003bf8:	180b883a 	mov	r5,r3
 1003bfc:	1009883a 	mov	r4,r2
 1003c00:	a00d883a 	mov	r6,r20
 1003c04:	a80f883a 	mov	r7,r21
 1003c08:	10096c80 	call	10096c8 <__muldf3>
 1003c0c:	0011883a 	mov	r8,zero
 1003c10:	02500734 	movhi	r9,16412
 1003c14:	1009883a 	mov	r4,r2
 1003c18:	180b883a 	mov	r5,r3
 1003c1c:	480f883a 	mov	r7,r9
 1003c20:	400d883a 	mov	r6,r8
 1003c24:	10096540 	call	1009654 <__adddf3>
 1003c28:	d9000f17 	ldw	r4,60(sp)
 1003c2c:	102d883a 	mov	r22,r2
 1003c30:	00bf3034 	movhi	r2,64704
 1003c34:	18b9883a 	add	fp,r3,r2
 1003c38:	e02f883a 	mov	r23,fp
 1003c3c:	20028f1e 	bne	r4,zero,100467c <_dtoa_r+0xf3c>
 1003c40:	0005883a 	mov	r2,zero
 1003c44:	00d00534 	movhi	r3,16404
 1003c48:	a009883a 	mov	r4,r20
 1003c4c:	a80b883a 	mov	r5,r21
 1003c50:	180f883a 	mov	r7,r3
 1003c54:	100d883a 	mov	r6,r2
 1003c58:	10095d40 	call	10095d4 <__subdf3>
 1003c5c:	1009883a 	mov	r4,r2
 1003c60:	e00f883a 	mov	r7,fp
 1003c64:	180b883a 	mov	r5,r3
 1003c68:	b00d883a 	mov	r6,r22
 1003c6c:	1025883a 	mov	r18,r2
 1003c70:	1827883a 	mov	r19,r3
 1003c74:	1009df40 	call	1009df4 <__gtdf2>
 1003c78:	00834f16 	blt	zero,r2,10049b8 <_dtoa_r+0x1278>
 1003c7c:	e0e0003c 	xorhi	r3,fp,32768
 1003c80:	9009883a 	mov	r4,r18
 1003c84:	980b883a 	mov	r5,r19
 1003c88:	180f883a 	mov	r7,r3
 1003c8c:	b00d883a 	mov	r6,r22
 1003c90:	1009f040 	call	1009f04 <__ltdf2>
 1003c94:	1000080e 	bge	r2,zero,1003cb8 <_dtoa_r+0x578>
 1003c98:	0027883a 	mov	r19,zero
 1003c9c:	0025883a 	mov	r18,zero
 1003ca0:	d8802617 	ldw	r2,152(sp)
 1003ca4:	df000517 	ldw	fp,20(sp)
 1003ca8:	d8000615 	stw	zero,24(sp)
 1003cac:	0084303a 	nor	r2,zero,r2
 1003cb0:	d8800d15 	stw	r2,52(sp)
 1003cb4:	00019b06 	br	1004324 <_dtoa_r+0xbe4>
 1003cb8:	d9801217 	ldw	r6,72(sp)
 1003cbc:	d8801317 	ldw	r2,76(sp)
 1003cc0:	3029883a 	mov	r20,r6
 1003cc4:	102b883a 	mov	r21,r2
 1003cc8:	d8c00217 	ldw	r3,8(sp)
 1003ccc:	18008516 	blt	r3,zero,1003ee4 <_dtoa_r+0x7a4>
 1003cd0:	d9000d17 	ldw	r4,52(sp)
 1003cd4:	00800384 	movi	r2,14
 1003cd8:	11008216 	blt	r2,r4,1003ee4 <_dtoa_r+0x7a4>
 1003cdc:	200490fa 	slli	r2,r4,3
 1003ce0:	d9802617 	ldw	r6,152(sp)
 1003ce4:	00c04074 	movhi	r3,257
 1003ce8:	18fa9304 	addi	r3,r3,-5556
 1003cec:	10c5883a 	add	r2,r2,r3
 1003cf0:	14800017 	ldw	r18,0(r2)
 1003cf4:	14c00117 	ldw	r19,4(r2)
 1003cf8:	30031e16 	blt	r6,zero,1004974 <_dtoa_r+0x1234>
 1003cfc:	d9000517 	ldw	r4,20(sp)
 1003d00:	d8c00f17 	ldw	r3,60(sp)
 1003d04:	a823883a 	mov	r17,r21
 1003d08:	a021883a 	mov	r16,r20
 1003d0c:	192b883a 	add	r21,r3,r4
 1003d10:	2039883a 	mov	fp,r4
 1003d14:	00000f06 	br	1003d54 <_dtoa_r+0x614>
 1003d18:	0005883a 	mov	r2,zero
 1003d1c:	00d00934 	movhi	r3,16420
 1003d20:	5009883a 	mov	r4,r10
 1003d24:	580b883a 	mov	r5,r11
 1003d28:	180f883a 	mov	r7,r3
 1003d2c:	100d883a 	mov	r6,r2
 1003d30:	10096c80 	call	10096c8 <__muldf3>
 1003d34:	180b883a 	mov	r5,r3
 1003d38:	000d883a 	mov	r6,zero
 1003d3c:	000f883a 	mov	r7,zero
 1003d40:	1009883a 	mov	r4,r2
 1003d44:	1021883a 	mov	r16,r2
 1003d48:	1823883a 	mov	r17,r3
 1003d4c:	1009d6c0 	call	1009d6c <__nedf2>
 1003d50:	10004526 	beq	r2,zero,1003e68 <_dtoa_r+0x728>
 1003d54:	900d883a 	mov	r6,r18
 1003d58:	980f883a 	mov	r7,r19
 1003d5c:	8009883a 	mov	r4,r16
 1003d60:	880b883a 	mov	r5,r17
 1003d64:	1009a8c0 	call	1009a8c <__divdf3>
 1003d68:	180b883a 	mov	r5,r3
 1003d6c:	1009883a 	mov	r4,r2
 1003d70:	100a0840 	call	100a084 <__fixdfsi>
 1003d74:	1009883a 	mov	r4,r2
 1003d78:	1029883a 	mov	r20,r2
 1003d7c:	1009f8c0 	call	1009f8c <__floatsidf>
 1003d80:	180f883a 	mov	r7,r3
 1003d84:	9009883a 	mov	r4,r18
 1003d88:	980b883a 	mov	r5,r19
 1003d8c:	100d883a 	mov	r6,r2
 1003d90:	10096c80 	call	10096c8 <__muldf3>
 1003d94:	180f883a 	mov	r7,r3
 1003d98:	880b883a 	mov	r5,r17
 1003d9c:	8009883a 	mov	r4,r16
 1003da0:	100d883a 	mov	r6,r2
 1003da4:	10095d40 	call	10095d4 <__subdf3>
 1003da8:	1015883a 	mov	r10,r2
 1003dac:	a0800c04 	addi	r2,r20,48
 1003db0:	e0800005 	stb	r2,0(fp)
 1003db4:	e7000044 	addi	fp,fp,1
 1003db8:	1817883a 	mov	r11,r3
 1003dbc:	e57fd61e 	bne	fp,r21,1003d18 <_dtoa_r+0x5d8>
 1003dc0:	500d883a 	mov	r6,r10
 1003dc4:	180f883a 	mov	r7,r3
 1003dc8:	5009883a 	mov	r4,r10
 1003dcc:	180b883a 	mov	r5,r3
 1003dd0:	10096540 	call	1009654 <__adddf3>
 1003dd4:	100d883a 	mov	r6,r2
 1003dd8:	9009883a 	mov	r4,r18
 1003ddc:	980b883a 	mov	r5,r19
 1003de0:	180f883a 	mov	r7,r3
 1003de4:	1021883a 	mov	r16,r2
 1003de8:	1823883a 	mov	r17,r3
 1003dec:	1009f040 	call	1009f04 <__ltdf2>
 1003df0:	10000816 	blt	r2,zero,1003e14 <_dtoa_r+0x6d4>
 1003df4:	980b883a 	mov	r5,r19
 1003df8:	800d883a 	mov	r6,r16
 1003dfc:	880f883a 	mov	r7,r17
 1003e00:	9009883a 	mov	r4,r18
 1003e04:	1009ce40 	call	1009ce4 <__eqdf2>
 1003e08:	1000171e 	bne	r2,zero,1003e68 <_dtoa_r+0x728>
 1003e0c:	a080004c 	andi	r2,r20,1
 1003e10:	10001526 	beq	r2,zero,1003e68 <_dtoa_r+0x728>
 1003e14:	d8800d17 	ldw	r2,52(sp)
 1003e18:	d8800415 	stw	r2,16(sp)
 1003e1c:	e009883a 	mov	r4,fp
 1003e20:	213fffc4 	addi	r4,r4,-1
 1003e24:	20c00007 	ldb	r3,0(r4)
 1003e28:	00800e44 	movi	r2,57
 1003e2c:	1880081e 	bne	r3,r2,1003e50 <_dtoa_r+0x710>
 1003e30:	d8800517 	ldw	r2,20(sp)
 1003e34:	113ffa1e 	bne	r2,r4,1003e20 <_dtoa_r+0x6e0>
 1003e38:	d8c00417 	ldw	r3,16(sp)
 1003e3c:	d9800517 	ldw	r6,20(sp)
 1003e40:	00800c04 	movi	r2,48
 1003e44:	18c00044 	addi	r3,r3,1
 1003e48:	d8c00415 	stw	r3,16(sp)
 1003e4c:	30800005 	stb	r2,0(r6)
 1003e50:	20800003 	ldbu	r2,0(r4)
 1003e54:	d8c00417 	ldw	r3,16(sp)
 1003e58:	27000044 	addi	fp,r4,1
 1003e5c:	10800044 	addi	r2,r2,1
 1003e60:	d8c00d15 	stw	r3,52(sp)
 1003e64:	20800005 	stb	r2,0(r4)
 1003e68:	d9001617 	ldw	r4,88(sp)
 1003e6c:	d9400717 	ldw	r5,28(sp)
 1003e70:	10068d40 	call	10068d4 <_Bfree>
 1003e74:	e0000005 	stb	zero,0(fp)
 1003e78:	d9800d17 	ldw	r6,52(sp)
 1003e7c:	d8c02717 	ldw	r3,156(sp)
 1003e80:	d9002917 	ldw	r4,164(sp)
 1003e84:	30800044 	addi	r2,r6,1
 1003e88:	18800015 	stw	r2,0(r3)
 1003e8c:	20029c26 	beq	r4,zero,1004900 <_dtoa_r+0x11c0>
 1003e90:	d8c00517 	ldw	r3,20(sp)
 1003e94:	27000015 	stw	fp,0(r4)
 1003e98:	003e5d06 	br	1003810 <_dtoa_r+0xd0>
 1003e9c:	d9800d17 	ldw	r6,52(sp)
 1003ea0:	00c04074 	movhi	r3,257
 1003ea4:	18fa9304 	addi	r3,r3,-5556
 1003ea8:	d9001217 	ldw	r4,72(sp)
 1003eac:	300490fa 	slli	r2,r6,3
 1003eb0:	d9401317 	ldw	r5,76(sp)
 1003eb4:	10c5883a 	add	r2,r2,r3
 1003eb8:	12000017 	ldw	r8,0(r2)
 1003ebc:	12400117 	ldw	r9,4(r2)
 1003ec0:	400d883a 	mov	r6,r8
 1003ec4:	480f883a 	mov	r7,r9
 1003ec8:	1009f040 	call	1009f04 <__ltdf2>
 1003ecc:	1000030e 	bge	r2,zero,1003edc <_dtoa_r+0x79c>
 1003ed0:	d8800d17 	ldw	r2,52(sp)
 1003ed4:	10bfffc4 	addi	r2,r2,-1
 1003ed8:	d8800d15 	stw	r2,52(sp)
 1003edc:	d8000c15 	stw	zero,48(sp)
 1003ee0:	003ea806 	br	1003984 <_dtoa_r+0x244>
 1003ee4:	d9000b17 	ldw	r4,44(sp)
 1003ee8:	202cc03a 	cmpne	r22,r4,zero
 1003eec:	b000c71e 	bne	r22,zero,100420c <_dtoa_r+0xacc>
 1003ef0:	dc001117 	ldw	r16,68(sp)
 1003ef4:	dc801017 	ldw	r18,64(sp)
 1003ef8:	0027883a 	mov	r19,zero
 1003efc:	04000b0e 	bge	zero,r16,1003f2c <_dtoa_r+0x7ec>
 1003f00:	d8c00a17 	ldw	r3,40(sp)
 1003f04:	00c0090e 	bge	zero,r3,1003f2c <_dtoa_r+0x7ec>
 1003f08:	8005883a 	mov	r2,r16
 1003f0c:	1c011316 	blt	r3,r16,100435c <_dtoa_r+0xc1c>
 1003f10:	d9000a17 	ldw	r4,40(sp)
 1003f14:	d9801117 	ldw	r6,68(sp)
 1003f18:	80a1c83a 	sub	r16,r16,r2
 1003f1c:	2089c83a 	sub	r4,r4,r2
 1003f20:	308dc83a 	sub	r6,r6,r2
 1003f24:	d9000a15 	stw	r4,40(sp)
 1003f28:	d9801115 	stw	r6,68(sp)
 1003f2c:	d8801017 	ldw	r2,64(sp)
 1003f30:	0080150e 	bge	zero,r2,1003f88 <_dtoa_r+0x848>
 1003f34:	d8c00b17 	ldw	r3,44(sp)
 1003f38:	1805003a 	cmpeq	r2,r3,zero
 1003f3c:	1001c91e 	bne	r2,zero,1004664 <_dtoa_r+0xf24>
 1003f40:	04800e0e 	bge	zero,r18,1003f7c <_dtoa_r+0x83c>
 1003f44:	d9001617 	ldw	r4,88(sp)
 1003f48:	980b883a 	mov	r5,r19
 1003f4c:	900d883a 	mov	r6,r18
 1003f50:	10076880 	call	1007688 <__pow5mult>
 1003f54:	d9001617 	ldw	r4,88(sp)
 1003f58:	d9800717 	ldw	r6,28(sp)
 1003f5c:	100b883a 	mov	r5,r2
 1003f60:	1027883a 	mov	r19,r2
 1003f64:	10073640 	call	1007364 <__multiply>
 1003f68:	d9001617 	ldw	r4,88(sp)
 1003f6c:	d9400717 	ldw	r5,28(sp)
 1003f70:	1023883a 	mov	r17,r2
 1003f74:	10068d40 	call	10068d4 <_Bfree>
 1003f78:	dc400715 	stw	r17,28(sp)
 1003f7c:	d9001017 	ldw	r4,64(sp)
 1003f80:	248dc83a 	sub	r6,r4,r18
 1003f84:	30010e1e 	bne	r6,zero,10043c0 <_dtoa_r+0xc80>
 1003f88:	d9001617 	ldw	r4,88(sp)
 1003f8c:	04400044 	movi	r17,1
 1003f90:	880b883a 	mov	r5,r17
 1003f94:	100754c0 	call	100754c <__i2b>
 1003f98:	d9800917 	ldw	r6,36(sp)
 1003f9c:	1025883a 	mov	r18,r2
 1003fa0:	0180040e 	bge	zero,r6,1003fb4 <_dtoa_r+0x874>
 1003fa4:	d9001617 	ldw	r4,88(sp)
 1003fa8:	100b883a 	mov	r5,r2
 1003fac:	10076880 	call	1007688 <__pow5mult>
 1003fb0:	1025883a 	mov	r18,r2
 1003fb4:	d8801717 	ldw	r2,92(sp)
 1003fb8:	8880f30e 	bge	r17,r2,1004388 <_dtoa_r+0xc48>
 1003fbc:	0023883a 	mov	r17,zero
 1003fc0:	d9800917 	ldw	r6,36(sp)
 1003fc4:	30019e1e 	bne	r6,zero,1004640 <_dtoa_r+0xf00>
 1003fc8:	00c00044 	movi	r3,1
 1003fcc:	d9000a17 	ldw	r4,40(sp)
 1003fd0:	20c5883a 	add	r2,r4,r3
 1003fd4:	10c007cc 	andi	r3,r2,31
 1003fd8:	1800841e 	bne	r3,zero,10041ec <_dtoa_r+0xaac>
 1003fdc:	00800704 	movi	r2,28
 1003fe0:	d9000a17 	ldw	r4,40(sp)
 1003fe4:	d9801117 	ldw	r6,68(sp)
 1003fe8:	80a1883a 	add	r16,r16,r2
 1003fec:	2089883a 	add	r4,r4,r2
 1003ff0:	308d883a 	add	r6,r6,r2
 1003ff4:	d9000a15 	stw	r4,40(sp)
 1003ff8:	d9801115 	stw	r6,68(sp)
 1003ffc:	d8801117 	ldw	r2,68(sp)
 1004000:	0080050e 	bge	zero,r2,1004018 <_dtoa_r+0x8d8>
 1004004:	d9400717 	ldw	r5,28(sp)
 1004008:	d9001617 	ldw	r4,88(sp)
 100400c:	100d883a 	mov	r6,r2
 1004010:	10072180 	call	1007218 <__lshift>
 1004014:	d8800715 	stw	r2,28(sp)
 1004018:	d8c00a17 	ldw	r3,40(sp)
 100401c:	00c0050e 	bge	zero,r3,1004034 <_dtoa_r+0x8f4>
 1004020:	d9001617 	ldw	r4,88(sp)
 1004024:	900b883a 	mov	r5,r18
 1004028:	180d883a 	mov	r6,r3
 100402c:	10072180 	call	1007218 <__lshift>
 1004030:	1025883a 	mov	r18,r2
 1004034:	d9000c17 	ldw	r4,48(sp)
 1004038:	2005003a 	cmpeq	r2,r4,zero
 100403c:	10016f26 	beq	r2,zero,10045fc <_dtoa_r+0xebc>
 1004040:	d9000f17 	ldw	r4,60(sp)
 1004044:	0102170e 	bge	zero,r4,10048a4 <_dtoa_r+0x1164>
 1004048:	d9800b17 	ldw	r6,44(sp)
 100404c:	3005003a 	cmpeq	r2,r6,zero
 1004050:	1000881e 	bne	r2,zero,1004274 <_dtoa_r+0xb34>
 1004054:	0400050e 	bge	zero,r16,100406c <_dtoa_r+0x92c>
 1004058:	d9001617 	ldw	r4,88(sp)
 100405c:	980b883a 	mov	r5,r19
 1004060:	800d883a 	mov	r6,r16
 1004064:	10072180 	call	1007218 <__lshift>
 1004068:	1027883a 	mov	r19,r2
 100406c:	8804c03a 	cmpne	r2,r17,zero
 1004070:	1002541e 	bne	r2,zero,10049c4 <_dtoa_r+0x1284>
 1004074:	980b883a 	mov	r5,r19
 1004078:	dd800517 	ldw	r22,20(sp)
 100407c:	dcc00615 	stw	r19,24(sp)
 1004080:	a700004c 	andi	fp,r20,1
 1004084:	2827883a 	mov	r19,r5
 1004088:	d9000717 	ldw	r4,28(sp)
 100408c:	900b883a 	mov	r5,r18
 1004090:	10035280 	call	1003528 <quorem>
 1004094:	d9000717 	ldw	r4,28(sp)
 1004098:	d9400617 	ldw	r5,24(sp)
 100409c:	1023883a 	mov	r17,r2
 10040a0:	8dc00c04 	addi	r23,r17,48
 10040a4:	1006a300 	call	1006a30 <__mcmp>
 10040a8:	d9001617 	ldw	r4,88(sp)
 10040ac:	900b883a 	mov	r5,r18
 10040b0:	980d883a 	mov	r6,r19
 10040b4:	1029883a 	mov	r20,r2
 10040b8:	100708c0 	call	100708c <__mdiff>
 10040bc:	102b883a 	mov	r21,r2
 10040c0:	10800317 	ldw	r2,12(r2)
 10040c4:	1001281e 	bne	r2,zero,1004568 <_dtoa_r+0xe28>
 10040c8:	d9000717 	ldw	r4,28(sp)
 10040cc:	a80b883a 	mov	r5,r21
 10040d0:	1006a300 	call	1006a30 <__mcmp>
 10040d4:	d9001617 	ldw	r4,88(sp)
 10040d8:	1021883a 	mov	r16,r2
 10040dc:	a80b883a 	mov	r5,r21
 10040e0:	10068d40 	call	10068d4 <_Bfree>
 10040e4:	8000041e 	bne	r16,zero,10040f8 <_dtoa_r+0x9b8>
 10040e8:	d8801717 	ldw	r2,92(sp)
 10040ec:	1000021e 	bne	r2,zero,10040f8 <_dtoa_r+0x9b8>
 10040f0:	e004c03a 	cmpne	r2,fp,zero
 10040f4:	10011726 	beq	r2,zero,1004554 <_dtoa_r+0xe14>
 10040f8:	a0010616 	blt	r20,zero,1004514 <_dtoa_r+0xdd4>
 10040fc:	a000041e 	bne	r20,zero,1004110 <_dtoa_r+0x9d0>
 1004100:	d8c01717 	ldw	r3,92(sp)
 1004104:	1800021e 	bne	r3,zero,1004110 <_dtoa_r+0x9d0>
 1004108:	e004c03a 	cmpne	r2,fp,zero
 100410c:	10010126 	beq	r2,zero,1004514 <_dtoa_r+0xdd4>
 1004110:	04023d16 	blt	zero,r16,1004a08 <_dtoa_r+0x12c8>
 1004114:	b5c00005 	stb	r23,0(r22)
 1004118:	d9800517 	ldw	r6,20(sp)
 100411c:	d9000f17 	ldw	r4,60(sp)
 1004120:	b5800044 	addi	r22,r22,1
 1004124:	3105883a 	add	r2,r6,r4
 1004128:	b0806526 	beq	r22,r2,10042c0 <_dtoa_r+0xb80>
 100412c:	d9400717 	ldw	r5,28(sp)
 1004130:	d9001617 	ldw	r4,88(sp)
 1004134:	01800284 	movi	r6,10
 1004138:	000f883a 	mov	r7,zero
 100413c:	10075880 	call	1007588 <__multadd>
 1004140:	d8800715 	stw	r2,28(sp)
 1004144:	d8800617 	ldw	r2,24(sp)
 1004148:	14c10c26 	beq	r2,r19,100457c <_dtoa_r+0xe3c>
 100414c:	d9400617 	ldw	r5,24(sp)
 1004150:	d9001617 	ldw	r4,88(sp)
 1004154:	01800284 	movi	r6,10
 1004158:	000f883a 	mov	r7,zero
 100415c:	10075880 	call	1007588 <__multadd>
 1004160:	d9001617 	ldw	r4,88(sp)
 1004164:	980b883a 	mov	r5,r19
 1004168:	01800284 	movi	r6,10
 100416c:	000f883a 	mov	r7,zero
 1004170:	d8800615 	stw	r2,24(sp)
 1004174:	10075880 	call	1007588 <__multadd>
 1004178:	1027883a 	mov	r19,r2
 100417c:	003fc206 	br	1004088 <_dtoa_r+0x948>
 1004180:	2445c83a 	sub	r2,r4,r17
 1004184:	a088983a 	sll	r4,r20,r2
 1004188:	003e4b06 	br	1003ab8 <_dtoa_r+0x378>
 100418c:	01bfffc4 	movi	r6,-1
 1004190:	00800044 	movi	r2,1
 1004194:	d9800e15 	stw	r6,56(sp)
 1004198:	d9800f15 	stw	r6,60(sp)
 100419c:	d8800b15 	stw	r2,44(sp)
 10041a0:	d8c01617 	ldw	r3,88(sp)
 10041a4:	008005c4 	movi	r2,23
 10041a8:	18001115 	stw	zero,68(r3)
 10041ac:	1580082e 	bgeu	r2,r22,10041d0 <_dtoa_r+0xa90>
 10041b0:	00c00104 	movi	r3,4
 10041b4:	0009883a 	mov	r4,zero
 10041b8:	18c7883a 	add	r3,r3,r3
 10041bc:	18800504 	addi	r2,r3,20
 10041c0:	21000044 	addi	r4,r4,1
 10041c4:	b0bffc2e 	bgeu	r22,r2,10041b8 <_dtoa_r+0xa78>
 10041c8:	d9801617 	ldw	r6,88(sp)
 10041cc:	31001115 	stw	r4,68(r6)
 10041d0:	dc000f17 	ldw	r16,60(sp)
 10041d4:	003e4b06 	br	1003b04 <_dtoa_r+0x3c4>
 10041d8:	d9801717 	ldw	r6,92(sp)
 10041dc:	0023883a 	mov	r17,zero
 10041e0:	31bfff04 	addi	r6,r6,-4
 10041e4:	d9801715 	stw	r6,92(sp)
 10041e8:	003df806 	br	10039cc <_dtoa_r+0x28c>
 10041ec:	00800804 	movi	r2,32
 10041f0:	10c9c83a 	sub	r4,r2,r3
 10041f4:	00c00104 	movi	r3,4
 10041f8:	19005a16 	blt	r3,r4,1004364 <_dtoa_r+0xc24>
 10041fc:	008000c4 	movi	r2,3
 1004200:	113f7e16 	blt	r2,r4,1003ffc <_dtoa_r+0x8bc>
 1004204:	20800704 	addi	r2,r4,28
 1004208:	003f7506 	br	1003fe0 <_dtoa_r+0x8a0>
 100420c:	d9801717 	ldw	r6,92(sp)
 1004210:	00800044 	movi	r2,1
 1004214:	1180a10e 	bge	r2,r6,100449c <_dtoa_r+0xd5c>
 1004218:	d9800f17 	ldw	r6,60(sp)
 100421c:	d8c01017 	ldw	r3,64(sp)
 1004220:	30bfffc4 	addi	r2,r6,-1
 1004224:	1881c616 	blt	r3,r2,1004940 <_dtoa_r+0x1200>
 1004228:	18a5c83a 	sub	r18,r3,r2
 100422c:	d8800f17 	ldw	r2,60(sp)
 1004230:	10026216 	blt	r2,zero,1004bbc <_dtoa_r+0x147c>
 1004234:	dc001117 	ldw	r16,68(sp)
 1004238:	1007883a 	mov	r3,r2
 100423c:	d9800a17 	ldw	r6,40(sp)
 1004240:	d8801117 	ldw	r2,68(sp)
 1004244:	d9001617 	ldw	r4,88(sp)
 1004248:	30cd883a 	add	r6,r6,r3
 100424c:	10c5883a 	add	r2,r2,r3
 1004250:	01400044 	movi	r5,1
 1004254:	d9800a15 	stw	r6,40(sp)
 1004258:	d8801115 	stw	r2,68(sp)
 100425c:	100754c0 	call	100754c <__i2b>
 1004260:	1027883a 	mov	r19,r2
 1004264:	003f2506 	br	1003efc <_dtoa_r+0x7bc>
 1004268:	00c04074 	movhi	r3,257
 100426c:	18fa7504 	addi	r3,r3,-5676
 1004270:	003d6706 	br	1003810 <_dtoa_r+0xd0>
 1004274:	dd800517 	ldw	r22,20(sp)
 1004278:	04000044 	movi	r16,1
 100427c:	00000706 	br	100429c <_dtoa_r+0xb5c>
 1004280:	d9400717 	ldw	r5,28(sp)
 1004284:	d9001617 	ldw	r4,88(sp)
 1004288:	01800284 	movi	r6,10
 100428c:	000f883a 	mov	r7,zero
 1004290:	10075880 	call	1007588 <__multadd>
 1004294:	d8800715 	stw	r2,28(sp)
 1004298:	84000044 	addi	r16,r16,1
 100429c:	d9000717 	ldw	r4,28(sp)
 10042a0:	900b883a 	mov	r5,r18
 10042a4:	10035280 	call	1003528 <quorem>
 10042a8:	15c00c04 	addi	r23,r2,48
 10042ac:	b5c00005 	stb	r23,0(r22)
 10042b0:	d8c00f17 	ldw	r3,60(sp)
 10042b4:	b5800044 	addi	r22,r22,1
 10042b8:	80fff116 	blt	r16,r3,1004280 <_dtoa_r+0xb40>
 10042bc:	d8000615 	stw	zero,24(sp)
 10042c0:	d9400717 	ldw	r5,28(sp)
 10042c4:	d9001617 	ldw	r4,88(sp)
 10042c8:	01800044 	movi	r6,1
 10042cc:	10072180 	call	1007218 <__lshift>
 10042d0:	1009883a 	mov	r4,r2
 10042d4:	900b883a 	mov	r5,r18
 10042d8:	d8800715 	stw	r2,28(sp)
 10042dc:	1006a300 	call	1006a30 <__mcmp>
 10042e0:	00803c0e 	bge	zero,r2,10043d4 <_dtoa_r+0xc94>
 10042e4:	b009883a 	mov	r4,r22
 10042e8:	213fffc4 	addi	r4,r4,-1
 10042ec:	21400003 	ldbu	r5,0(r4)
 10042f0:	00800e44 	movi	r2,57
 10042f4:	28c03fcc 	andi	r3,r5,255
 10042f8:	18c0201c 	xori	r3,r3,128
 10042fc:	18ffe004 	addi	r3,r3,-128
 1004300:	1881981e 	bne	r3,r2,1004964 <_dtoa_r+0x1224>
 1004304:	d9800517 	ldw	r6,20(sp)
 1004308:	21bff71e 	bne	r4,r6,10042e8 <_dtoa_r+0xba8>
 100430c:	d8800d17 	ldw	r2,52(sp)
 1004310:	37000044 	addi	fp,r6,1
 1004314:	10800044 	addi	r2,r2,1
 1004318:	d8800d15 	stw	r2,52(sp)
 100431c:	00800c44 	movi	r2,49
 1004320:	30800005 	stb	r2,0(r6)
 1004324:	d9001617 	ldw	r4,88(sp)
 1004328:	900b883a 	mov	r5,r18
 100432c:	10068d40 	call	10068d4 <_Bfree>
 1004330:	983ecd26 	beq	r19,zero,1003e68 <_dtoa_r+0x728>
 1004334:	d8c00617 	ldw	r3,24(sp)
 1004338:	18000426 	beq	r3,zero,100434c <_dtoa_r+0xc0c>
 100433c:	1cc00326 	beq	r3,r19,100434c <_dtoa_r+0xc0c>
 1004340:	d9001617 	ldw	r4,88(sp)
 1004344:	180b883a 	mov	r5,r3
 1004348:	10068d40 	call	10068d4 <_Bfree>
 100434c:	d9001617 	ldw	r4,88(sp)
 1004350:	980b883a 	mov	r5,r19
 1004354:	10068d40 	call	10068d4 <_Bfree>
 1004358:	003ec306 	br	1003e68 <_dtoa_r+0x728>
 100435c:	1805883a 	mov	r2,r3
 1004360:	003eeb06 	br	1003f10 <_dtoa_r+0x7d0>
 1004364:	d9800a17 	ldw	r6,40(sp)
 1004368:	d8c01117 	ldw	r3,68(sp)
 100436c:	20bfff04 	addi	r2,r4,-4
 1004370:	308d883a 	add	r6,r6,r2
 1004374:	1887883a 	add	r3,r3,r2
 1004378:	80a1883a 	add	r16,r16,r2
 100437c:	d9800a15 	stw	r6,40(sp)
 1004380:	d8c01115 	stw	r3,68(sp)
 1004384:	003f1d06 	br	1003ffc <_dtoa_r+0x8bc>
 1004388:	a03f0c1e 	bne	r20,zero,1003fbc <_dtoa_r+0x87c>
 100438c:	00800434 	movhi	r2,16
 1004390:	10bfffc4 	addi	r2,r2,-1
 1004394:	a884703a 	and	r2,r21,r2
 1004398:	103f081e 	bne	r2,zero,1003fbc <_dtoa_r+0x87c>
 100439c:	a89ffc2c 	andhi	r2,r21,32752
 10043a0:	103f0626 	beq	r2,zero,1003fbc <_dtoa_r+0x87c>
 10043a4:	d8c01117 	ldw	r3,68(sp)
 10043a8:	d9000a17 	ldw	r4,40(sp)
 10043ac:	18c00044 	addi	r3,r3,1
 10043b0:	21000044 	addi	r4,r4,1
 10043b4:	d8c01115 	stw	r3,68(sp)
 10043b8:	d9000a15 	stw	r4,40(sp)
 10043bc:	003f0006 	br	1003fc0 <_dtoa_r+0x880>
 10043c0:	d9400717 	ldw	r5,28(sp)
 10043c4:	d9001617 	ldw	r4,88(sp)
 10043c8:	10076880 	call	1007688 <__pow5mult>
 10043cc:	d8800715 	stw	r2,28(sp)
 10043d0:	003eed06 	br	1003f88 <_dtoa_r+0x848>
 10043d4:	1000021e 	bne	r2,zero,10043e0 <_dtoa_r+0xca0>
 10043d8:	b880004c 	andi	r2,r23,1
 10043dc:	103fc11e 	bne	r2,zero,10042e4 <_dtoa_r+0xba4>
 10043e0:	b5bfffc4 	addi	r22,r22,-1
 10043e4:	b0c00007 	ldb	r3,0(r22)
 10043e8:	00800c04 	movi	r2,48
 10043ec:	18bffc26 	beq	r3,r2,10043e0 <_dtoa_r+0xca0>
 10043f0:	b7000044 	addi	fp,r22,1
 10043f4:	003fcb06 	br	1004324 <_dtoa_r+0xbe4>
 10043f8:	d9800d17 	ldw	r6,52(sp)
 10043fc:	018fc83a 	sub	r7,zero,r6
 1004400:	3801f726 	beq	r7,zero,1004be0 <_dtoa_r+0x14a0>
 1004404:	398003cc 	andi	r6,r7,15
 1004408:	300c90fa 	slli	r6,r6,3
 100440c:	01404074 	movhi	r5,257
 1004410:	297a9304 	addi	r5,r5,-5556
 1004414:	d9001217 	ldw	r4,72(sp)
 1004418:	314d883a 	add	r6,r6,r5
 100441c:	30c00117 	ldw	r3,4(r6)
 1004420:	30800017 	ldw	r2,0(r6)
 1004424:	d9401317 	ldw	r5,76(sp)
 1004428:	3821d13a 	srai	r16,r7,4
 100442c:	100d883a 	mov	r6,r2
 1004430:	180f883a 	mov	r7,r3
 1004434:	10096c80 	call	10096c8 <__muldf3>
 1004438:	1011883a 	mov	r8,r2
 100443c:	1813883a 	mov	r9,r3
 1004440:	1029883a 	mov	r20,r2
 1004444:	182b883a 	mov	r21,r3
 1004448:	8001e526 	beq	r16,zero,1004be0 <_dtoa_r+0x14a0>
 100444c:	05800084 	movi	r22,2
 1004450:	04404074 	movhi	r17,257
 1004454:	8c7ac504 	addi	r17,r17,-5356
 1004458:	8080004c 	andi	r2,r16,1
 100445c:	1005003a 	cmpeq	r2,r2,zero
 1004460:	1000081e 	bne	r2,zero,1004484 <_dtoa_r+0xd44>
 1004464:	89800017 	ldw	r6,0(r17)
 1004468:	89c00117 	ldw	r7,4(r17)
 100446c:	480b883a 	mov	r5,r9
 1004470:	4009883a 	mov	r4,r8
 1004474:	10096c80 	call	10096c8 <__muldf3>
 1004478:	1011883a 	mov	r8,r2
 100447c:	b5800044 	addi	r22,r22,1
 1004480:	1813883a 	mov	r9,r3
 1004484:	8021d07a 	srai	r16,r16,1
 1004488:	8c400204 	addi	r17,r17,8
 100448c:	803ff21e 	bne	r16,zero,1004458 <_dtoa_r+0xd18>
 1004490:	4029883a 	mov	r20,r8
 1004494:	482b883a 	mov	r21,r9
 1004498:	003dca06 	br	1003bc4 <_dtoa_r+0x484>
 100449c:	d9000817 	ldw	r4,32(sp)
 10044a0:	2005003a 	cmpeq	r2,r4,zero
 10044a4:	1001f61e 	bne	r2,zero,1004c80 <_dtoa_r+0x1540>
 10044a8:	dc001117 	ldw	r16,68(sp)
 10044ac:	dc801017 	ldw	r18,64(sp)
 10044b0:	18c10cc4 	addi	r3,r3,1075
 10044b4:	003f6106 	br	100423c <_dtoa_r+0xafc>
 10044b8:	d8000b15 	stw	zero,44(sp)
 10044bc:	d9802617 	ldw	r6,152(sp)
 10044c0:	d8c00d17 	ldw	r3,52(sp)
 10044c4:	30800044 	addi	r2,r6,1
 10044c8:	18ad883a 	add	r22,r3,r2
 10044cc:	b13fffc4 	addi	r4,r22,-1
 10044d0:	d9000e15 	stw	r4,56(sp)
 10044d4:	0581f60e 	bge	zero,r22,1004cb0 <_dtoa_r+0x1570>
 10044d8:	dd800f15 	stw	r22,60(sp)
 10044dc:	003f3006 	br	10041a0 <_dtoa_r+0xa60>
 10044e0:	d8000b15 	stw	zero,44(sp)
 10044e4:	d9002617 	ldw	r4,152(sp)
 10044e8:	0101eb0e 	bge	zero,r4,1004c98 <_dtoa_r+0x1558>
 10044ec:	202d883a 	mov	r22,r4
 10044f0:	d9000e15 	stw	r4,56(sp)
 10044f4:	d9000f15 	stw	r4,60(sp)
 10044f8:	003f2906 	br	10041a0 <_dtoa_r+0xa60>
 10044fc:	01800044 	movi	r6,1
 1004500:	d9800b15 	stw	r6,44(sp)
 1004504:	003ff706 	br	10044e4 <_dtoa_r+0xda4>
 1004508:	01000044 	movi	r4,1
 100450c:	d9000b15 	stw	r4,44(sp)
 1004510:	003fea06 	br	10044bc <_dtoa_r+0xd7c>
 1004514:	04000c0e 	bge	zero,r16,1004548 <_dtoa_r+0xe08>
 1004518:	d9400717 	ldw	r5,28(sp)
 100451c:	d9001617 	ldw	r4,88(sp)
 1004520:	01800044 	movi	r6,1
 1004524:	10072180 	call	1007218 <__lshift>
 1004528:	1009883a 	mov	r4,r2
 100452c:	900b883a 	mov	r5,r18
 1004530:	d8800715 	stw	r2,28(sp)
 1004534:	1006a300 	call	1006a30 <__mcmp>
 1004538:	0081e00e 	bge	zero,r2,1004cbc <_dtoa_r+0x157c>
 100453c:	bdc00044 	addi	r23,r23,1
 1004540:	00800e84 	movi	r2,58
 1004544:	b881a226 	beq	r23,r2,1004bd0 <_dtoa_r+0x1490>
 1004548:	b7000044 	addi	fp,r22,1
 100454c:	b5c00005 	stb	r23,0(r22)
 1004550:	003f7406 	br	1004324 <_dtoa_r+0xbe4>
 1004554:	00800e44 	movi	r2,57
 1004558:	b8819d26 	beq	r23,r2,1004bd0 <_dtoa_r+0x1490>
 100455c:	053ffa0e 	bge	zero,r20,1004548 <_dtoa_r+0xe08>
 1004560:	8dc00c44 	addi	r23,r17,49
 1004564:	003ff806 	br	1004548 <_dtoa_r+0xe08>
 1004568:	d9001617 	ldw	r4,88(sp)
 100456c:	a80b883a 	mov	r5,r21
 1004570:	04000044 	movi	r16,1
 1004574:	10068d40 	call	10068d4 <_Bfree>
 1004578:	003edf06 	br	10040f8 <_dtoa_r+0x9b8>
 100457c:	d9001617 	ldw	r4,88(sp)
 1004580:	980b883a 	mov	r5,r19
 1004584:	01800284 	movi	r6,10
 1004588:	000f883a 	mov	r7,zero
 100458c:	10075880 	call	1007588 <__multadd>
 1004590:	1027883a 	mov	r19,r2
 1004594:	d8800615 	stw	r2,24(sp)
 1004598:	003ebb06 	br	1004088 <_dtoa_r+0x948>
 100459c:	d9801117 	ldw	r6,68(sp)
 10045a0:	d8800d17 	ldw	r2,52(sp)
 10045a4:	d8000915 	stw	zero,36(sp)
 10045a8:	308dc83a 	sub	r6,r6,r2
 10045ac:	0087c83a 	sub	r3,zero,r2
 10045b0:	d9801115 	stw	r6,68(sp)
 10045b4:	d8c01015 	stw	r3,64(sp)
 10045b8:	003cfe06 	br	10039b4 <_dtoa_r+0x274>
 10045bc:	018dc83a 	sub	r6,zero,r6
 10045c0:	d9801115 	stw	r6,68(sp)
 10045c4:	d8000a15 	stw	zero,40(sp)
 10045c8:	003cf306 	br	1003998 <_dtoa_r+0x258>
 10045cc:	d9000d17 	ldw	r4,52(sp)
 10045d0:	1009f8c0 	call	1009f8c <__floatsidf>
 10045d4:	880b883a 	mov	r5,r17
 10045d8:	8009883a 	mov	r4,r16
 10045dc:	180f883a 	mov	r7,r3
 10045e0:	100d883a 	mov	r6,r2
 10045e4:	1009d6c0 	call	1009d6c <__nedf2>
 10045e8:	103ce126 	beq	r2,zero,1003970 <_dtoa_r+0x230>
 10045ec:	d9800d17 	ldw	r6,52(sp)
 10045f0:	31bfffc4 	addi	r6,r6,-1
 10045f4:	d9800d15 	stw	r6,52(sp)
 10045f8:	003cdd06 	br	1003970 <_dtoa_r+0x230>
 10045fc:	d9000717 	ldw	r4,28(sp)
 1004600:	900b883a 	mov	r5,r18
 1004604:	1006a300 	call	1006a30 <__mcmp>
 1004608:	103e8d0e 	bge	r2,zero,1004040 <_dtoa_r+0x900>
 100460c:	d9400717 	ldw	r5,28(sp)
 1004610:	d9001617 	ldw	r4,88(sp)
 1004614:	01800284 	movi	r6,10
 1004618:	000f883a 	mov	r7,zero
 100461c:	10075880 	call	1007588 <__multadd>
 1004620:	d9800d17 	ldw	r6,52(sp)
 1004624:	d8800715 	stw	r2,28(sp)
 1004628:	31bfffc4 	addi	r6,r6,-1
 100462c:	d9800d15 	stw	r6,52(sp)
 1004630:	b001a71e 	bne	r22,zero,1004cd0 <_dtoa_r+0x1590>
 1004634:	d8800e17 	ldw	r2,56(sp)
 1004638:	d8800f15 	stw	r2,60(sp)
 100463c:	003e8006 	br	1004040 <_dtoa_r+0x900>
 1004640:	90800417 	ldw	r2,16(r18)
 1004644:	1085883a 	add	r2,r2,r2
 1004648:	1085883a 	add	r2,r2,r2
 100464c:	1485883a 	add	r2,r2,r18
 1004650:	11000417 	ldw	r4,16(r2)
 1004654:	10068fc0 	call	10068fc <__hi0bits>
 1004658:	00c00804 	movi	r3,32
 100465c:	1887c83a 	sub	r3,r3,r2
 1004660:	003e5a06 	br	1003fcc <_dtoa_r+0x88c>
 1004664:	d9400717 	ldw	r5,28(sp)
 1004668:	d9801017 	ldw	r6,64(sp)
 100466c:	d9001617 	ldw	r4,88(sp)
 1004670:	10076880 	call	1007688 <__pow5mult>
 1004674:	d8800715 	stw	r2,28(sp)
 1004678:	003e4306 	br	1003f88 <_dtoa_r+0x848>
 100467c:	d9800f17 	ldw	r6,60(sp)
 1004680:	d8800d17 	ldw	r2,52(sp)
 1004684:	d9800315 	stw	r6,12(sp)
 1004688:	d8800415 	stw	r2,16(sp)
 100468c:	d8c00b17 	ldw	r3,44(sp)
 1004690:	1805003a 	cmpeq	r2,r3,zero
 1004694:	1000e21e 	bne	r2,zero,1004a20 <_dtoa_r+0x12e0>
 1004698:	d9000317 	ldw	r4,12(sp)
 100469c:	0005883a 	mov	r2,zero
 10046a0:	00cff834 	movhi	r3,16352
 10046a4:	200c90fa 	slli	r6,r4,3
 10046a8:	01004074 	movhi	r4,257
 10046ac:	213a9304 	addi	r4,r4,-5556
 10046b0:	180b883a 	mov	r5,r3
 10046b4:	310d883a 	add	r6,r6,r4
 10046b8:	327fff17 	ldw	r9,-4(r6)
 10046bc:	323ffe17 	ldw	r8,-8(r6)
 10046c0:	1009883a 	mov	r4,r2
 10046c4:	480f883a 	mov	r7,r9
 10046c8:	400d883a 	mov	r6,r8
 10046cc:	1009a8c0 	call	1009a8c <__divdf3>
 10046d0:	180b883a 	mov	r5,r3
 10046d4:	b00d883a 	mov	r6,r22
 10046d8:	b80f883a 	mov	r7,r23
 10046dc:	1009883a 	mov	r4,r2
 10046e0:	10095d40 	call	10095d4 <__subdf3>
 10046e4:	a80b883a 	mov	r5,r21
 10046e8:	a009883a 	mov	r4,r20
 10046ec:	d8c01915 	stw	r3,100(sp)
 10046f0:	d8801815 	stw	r2,96(sp)
 10046f4:	100a0840 	call	100a084 <__fixdfsi>
 10046f8:	1009883a 	mov	r4,r2
 10046fc:	1027883a 	mov	r19,r2
 1004700:	1009f8c0 	call	1009f8c <__floatsidf>
 1004704:	a80b883a 	mov	r5,r21
 1004708:	a009883a 	mov	r4,r20
 100470c:	180f883a 	mov	r7,r3
 1004710:	100d883a 	mov	r6,r2
 1004714:	10095d40 	call	10095d4 <__subdf3>
 1004718:	d9801817 	ldw	r6,96(sp)
 100471c:	1823883a 	mov	r17,r3
 1004720:	d8801415 	stw	r2,80(sp)
 1004724:	302d883a 	mov	r22,r6
 1004728:	d9800517 	ldw	r6,20(sp)
 100472c:	9cc00c04 	addi	r19,r19,48
 1004730:	dc401515 	stw	r17,84(sp)
 1004734:	d8c01917 	ldw	r3,100(sp)
 1004738:	34c00005 	stb	r19,0(r6)
 100473c:	d8800517 	ldw	r2,20(sp)
 1004740:	d9401917 	ldw	r5,100(sp)
 1004744:	d9801417 	ldw	r6,80(sp)
 1004748:	b009883a 	mov	r4,r22
 100474c:	880f883a 	mov	r7,r17
 1004750:	182f883a 	mov	r23,r3
 1004754:	17000044 	addi	fp,r2,1
 1004758:	1009df40 	call	1009df4 <__gtdf2>
 100475c:	00804e16 	blt	zero,r2,1004898 <_dtoa_r+0x1158>
 1004760:	d9801417 	ldw	r6,80(sp)
 1004764:	0005883a 	mov	r2,zero
 1004768:	00cffc34 	movhi	r3,16368
 100476c:	180b883a 	mov	r5,r3
 1004770:	880f883a 	mov	r7,r17
 1004774:	1009883a 	mov	r4,r2
 1004778:	10095d40 	call	10095d4 <__subdf3>
 100477c:	d9401917 	ldw	r5,100(sp)
 1004780:	180f883a 	mov	r7,r3
 1004784:	b009883a 	mov	r4,r22
 1004788:	100d883a 	mov	r6,r2
 100478c:	1009df40 	call	1009df4 <__gtdf2>
 1004790:	00bda216 	blt	zero,r2,1003e1c <_dtoa_r+0x6dc>
 1004794:	d8c00317 	ldw	r3,12(sp)
 1004798:	00800044 	movi	r2,1
 100479c:	10c01216 	blt	r2,r3,10047e8 <_dtoa_r+0x10a8>
 10047a0:	003d4506 	br	1003cb8 <_dtoa_r+0x578>
 10047a4:	d9801417 	ldw	r6,80(sp)
 10047a8:	0005883a 	mov	r2,zero
 10047ac:	00cffc34 	movhi	r3,16368
 10047b0:	180b883a 	mov	r5,r3
 10047b4:	880f883a 	mov	r7,r17
 10047b8:	1009883a 	mov	r4,r2
 10047bc:	10095d40 	call	10095d4 <__subdf3>
 10047c0:	d9c01b17 	ldw	r7,108(sp)
 10047c4:	180b883a 	mov	r5,r3
 10047c8:	1009883a 	mov	r4,r2
 10047cc:	b00d883a 	mov	r6,r22
 10047d0:	1009f040 	call	1009f04 <__ltdf2>
 10047d4:	103d9116 	blt	r2,zero,1003e1c <_dtoa_r+0x6dc>
 10047d8:	d9800517 	ldw	r6,20(sp)
 10047dc:	d9000317 	ldw	r4,12(sp)
 10047e0:	3105883a 	add	r2,r6,r4
 10047e4:	e0bd3426 	beq	fp,r2,1003cb8 <_dtoa_r+0x578>
 10047e8:	04500934 	movhi	r17,16420
 10047ec:	0021883a 	mov	r16,zero
 10047f0:	b80b883a 	mov	r5,r23
 10047f4:	b009883a 	mov	r4,r22
 10047f8:	800d883a 	mov	r6,r16
 10047fc:	880f883a 	mov	r7,r17
 1004800:	10096c80 	call	10096c8 <__muldf3>
 1004804:	d9401517 	ldw	r5,84(sp)
 1004808:	d9001417 	ldw	r4,80(sp)
 100480c:	880f883a 	mov	r7,r17
 1004810:	000d883a 	mov	r6,zero
 1004814:	d8801a15 	stw	r2,104(sp)
 1004818:	d8c01b15 	stw	r3,108(sp)
 100481c:	10096c80 	call	10096c8 <__muldf3>
 1004820:	180b883a 	mov	r5,r3
 1004824:	1009883a 	mov	r4,r2
 1004828:	1823883a 	mov	r17,r3
 100482c:	1021883a 	mov	r16,r2
 1004830:	100a0840 	call	100a084 <__fixdfsi>
 1004834:	1009883a 	mov	r4,r2
 1004838:	102b883a 	mov	r21,r2
 100483c:	1009f8c0 	call	1009f8c <__floatsidf>
 1004840:	880b883a 	mov	r5,r17
 1004844:	8009883a 	mov	r4,r16
 1004848:	180f883a 	mov	r7,r3
 100484c:	100d883a 	mov	r6,r2
 1004850:	10095d40 	call	10095d4 <__subdf3>
 1004854:	1021883a 	mov	r16,r2
 1004858:	d9001b17 	ldw	r4,108(sp)
 100485c:	1823883a 	mov	r17,r3
 1004860:	dc001415 	stw	r16,80(sp)
 1004864:	ad400c04 	addi	r21,r21,48
 1004868:	dc401515 	stw	r17,84(sp)
 100486c:	d8801a17 	ldw	r2,104(sp)
 1004870:	e5400005 	stb	r21,0(fp)
 1004874:	202f883a 	mov	r23,r4
 1004878:	d9c01b17 	ldw	r7,108(sp)
 100487c:	d9001417 	ldw	r4,80(sp)
 1004880:	880b883a 	mov	r5,r17
 1004884:	100d883a 	mov	r6,r2
 1004888:	102d883a 	mov	r22,r2
 100488c:	e7000044 	addi	fp,fp,1
 1004890:	1009f040 	call	1009f04 <__ltdf2>
 1004894:	103fc30e 	bge	r2,zero,10047a4 <_dtoa_r+0x1064>
 1004898:	d9000417 	ldw	r4,16(sp)
 100489c:	d9000d15 	stw	r4,52(sp)
 10048a0:	003d7106 	br	1003e68 <_dtoa_r+0x728>
 10048a4:	d9801717 	ldw	r6,92(sp)
 10048a8:	00800084 	movi	r2,2
 10048ac:	11bde60e 	bge	r2,r6,1004048 <_dtoa_r+0x908>
 10048b0:	203cfb1e 	bne	r4,zero,1003ca0 <_dtoa_r+0x560>
 10048b4:	d9001617 	ldw	r4,88(sp)
 10048b8:	900b883a 	mov	r5,r18
 10048bc:	01800144 	movi	r6,5
 10048c0:	000f883a 	mov	r7,zero
 10048c4:	10075880 	call	1007588 <__multadd>
 10048c8:	d9000717 	ldw	r4,28(sp)
 10048cc:	100b883a 	mov	r5,r2
 10048d0:	1025883a 	mov	r18,r2
 10048d4:	1006a300 	call	1006a30 <__mcmp>
 10048d8:	00bcf10e 	bge	zero,r2,1003ca0 <_dtoa_r+0x560>
 10048dc:	d8c00d17 	ldw	r3,52(sp)
 10048e0:	d9000517 	ldw	r4,20(sp)
 10048e4:	d8000615 	stw	zero,24(sp)
 10048e8:	18c00044 	addi	r3,r3,1
 10048ec:	d8c00d15 	stw	r3,52(sp)
 10048f0:	00800c44 	movi	r2,49
 10048f4:	27000044 	addi	fp,r4,1
 10048f8:	20800005 	stb	r2,0(r4)
 10048fc:	003e8906 	br	1004324 <_dtoa_r+0xbe4>
 1004900:	d8c00517 	ldw	r3,20(sp)
 1004904:	003bc206 	br	1003810 <_dtoa_r+0xd0>
 1004908:	01804074 	movhi	r6,257
 100490c:	31bac504 	addi	r6,r6,-5356
 1004910:	30c00917 	ldw	r3,36(r6)
 1004914:	30800817 	ldw	r2,32(r6)
 1004918:	d9001217 	ldw	r4,72(sp)
 100491c:	d9401317 	ldw	r5,76(sp)
 1004920:	180f883a 	mov	r7,r3
 1004924:	100d883a 	mov	r6,r2
 1004928:	1009a8c0 	call	1009a8c <__divdf3>
 100492c:	948003cc 	andi	r18,r18,15
 1004930:	058000c4 	movi	r22,3
 1004934:	1029883a 	mov	r20,r2
 1004938:	182b883a 	mov	r21,r3
 100493c:	003c8906 	br	1003b64 <_dtoa_r+0x424>
 1004940:	d9001017 	ldw	r4,64(sp)
 1004944:	d9800917 	ldw	r6,36(sp)
 1004948:	0025883a 	mov	r18,zero
 100494c:	1105c83a 	sub	r2,r2,r4
 1004950:	2089883a 	add	r4,r4,r2
 1004954:	308d883a 	add	r6,r6,r2
 1004958:	d9001015 	stw	r4,64(sp)
 100495c:	d9800915 	stw	r6,36(sp)
 1004960:	003e3206 	br	100422c <_dtoa_r+0xaec>
 1004964:	28800044 	addi	r2,r5,1
 1004968:	27000044 	addi	fp,r4,1
 100496c:	20800005 	stb	r2,0(r4)
 1004970:	003e6c06 	br	1004324 <_dtoa_r+0xbe4>
 1004974:	d8800f17 	ldw	r2,60(sp)
 1004978:	00bce016 	blt	zero,r2,1003cfc <_dtoa_r+0x5bc>
 100497c:	d9800f17 	ldw	r6,60(sp)
 1004980:	303cc51e 	bne	r6,zero,1003c98 <_dtoa_r+0x558>
 1004984:	0005883a 	mov	r2,zero
 1004988:	00d00534 	movhi	r3,16404
 100498c:	980b883a 	mov	r5,r19
 1004990:	180f883a 	mov	r7,r3
 1004994:	9009883a 	mov	r4,r18
 1004998:	100d883a 	mov	r6,r2
 100499c:	10096c80 	call	10096c8 <__muldf3>
 10049a0:	180b883a 	mov	r5,r3
 10049a4:	a80f883a 	mov	r7,r21
 10049a8:	1009883a 	mov	r4,r2
 10049ac:	a00d883a 	mov	r6,r20
 10049b0:	1009e7c0 	call	1009e7c <__gedf2>
 10049b4:	103cb80e 	bge	r2,zero,1003c98 <_dtoa_r+0x558>
 10049b8:	0027883a 	mov	r19,zero
 10049bc:	0025883a 	mov	r18,zero
 10049c0:	003fc606 	br	10048dc <_dtoa_r+0x119c>
 10049c4:	99400117 	ldw	r5,4(r19)
 10049c8:	d9001617 	ldw	r4,88(sp)
 10049cc:	1006e540 	call	1006e54 <_Balloc>
 10049d0:	99800417 	ldw	r6,16(r19)
 10049d4:	11000304 	addi	r4,r2,12
 10049d8:	99400304 	addi	r5,r19,12
 10049dc:	318d883a 	add	r6,r6,r6
 10049e0:	318d883a 	add	r6,r6,r6
 10049e4:	31800204 	addi	r6,r6,8
 10049e8:	1023883a 	mov	r17,r2
 10049ec:	10066bc0 	call	10066bc <memcpy>
 10049f0:	d9001617 	ldw	r4,88(sp)
 10049f4:	880b883a 	mov	r5,r17
 10049f8:	01800044 	movi	r6,1
 10049fc:	10072180 	call	1007218 <__lshift>
 1004a00:	100b883a 	mov	r5,r2
 1004a04:	003d9c06 	br	1004078 <_dtoa_r+0x938>
 1004a08:	00800e44 	movi	r2,57
 1004a0c:	b8807026 	beq	r23,r2,1004bd0 <_dtoa_r+0x1490>
 1004a10:	b8800044 	addi	r2,r23,1
 1004a14:	b7000044 	addi	fp,r22,1
 1004a18:	b0800005 	stb	r2,0(r22)
 1004a1c:	003e4106 	br	1004324 <_dtoa_r+0xbe4>
 1004a20:	d8800317 	ldw	r2,12(sp)
 1004a24:	01804074 	movhi	r6,257
 1004a28:	31ba9304 	addi	r6,r6,-5556
 1004a2c:	b009883a 	mov	r4,r22
 1004a30:	100e90fa 	slli	r7,r2,3
 1004a34:	b80b883a 	mov	r5,r23
 1004a38:	398f883a 	add	r7,r7,r6
 1004a3c:	38bffe17 	ldw	r2,-8(r7)
 1004a40:	d9800517 	ldw	r6,20(sp)
 1004a44:	38ffff17 	ldw	r3,-4(r7)
 1004a48:	37000044 	addi	fp,r6,1
 1004a4c:	180f883a 	mov	r7,r3
 1004a50:	100d883a 	mov	r6,r2
 1004a54:	10096c80 	call	10096c8 <__muldf3>
 1004a58:	a80b883a 	mov	r5,r21
 1004a5c:	a009883a 	mov	r4,r20
 1004a60:	182f883a 	mov	r23,r3
 1004a64:	102d883a 	mov	r22,r2
 1004a68:	100a0840 	call	100a084 <__fixdfsi>
 1004a6c:	1009883a 	mov	r4,r2
 1004a70:	1027883a 	mov	r19,r2
 1004a74:	1009f8c0 	call	1009f8c <__floatsidf>
 1004a78:	a80b883a 	mov	r5,r21
 1004a7c:	a009883a 	mov	r4,r20
 1004a80:	180f883a 	mov	r7,r3
 1004a84:	100d883a 	mov	r6,r2
 1004a88:	10095d40 	call	10095d4 <__subdf3>
 1004a8c:	180b883a 	mov	r5,r3
 1004a90:	d8c00517 	ldw	r3,20(sp)
 1004a94:	9cc00c04 	addi	r19,r19,48
 1004a98:	1009883a 	mov	r4,r2
 1004a9c:	1cc00005 	stb	r19,0(r3)
 1004aa0:	2021883a 	mov	r16,r4
 1004aa4:	d9000317 	ldw	r4,12(sp)
 1004aa8:	00800044 	movi	r2,1
 1004aac:	2823883a 	mov	r17,r5
 1004ab0:	20802226 	beq	r4,r2,1004b3c <_dtoa_r+0x13fc>
 1004ab4:	1029883a 	mov	r20,r2
 1004ab8:	0005883a 	mov	r2,zero
 1004abc:	00d00934 	movhi	r3,16420
 1004ac0:	180f883a 	mov	r7,r3
 1004ac4:	100d883a 	mov	r6,r2
 1004ac8:	880b883a 	mov	r5,r17
 1004acc:	8009883a 	mov	r4,r16
 1004ad0:	10096c80 	call	10096c8 <__muldf3>
 1004ad4:	180b883a 	mov	r5,r3
 1004ad8:	1009883a 	mov	r4,r2
 1004adc:	1823883a 	mov	r17,r3
 1004ae0:	1021883a 	mov	r16,r2
 1004ae4:	100a0840 	call	100a084 <__fixdfsi>
 1004ae8:	1009883a 	mov	r4,r2
 1004aec:	102b883a 	mov	r21,r2
 1004af0:	1009f8c0 	call	1009f8c <__floatsidf>
 1004af4:	880b883a 	mov	r5,r17
 1004af8:	8009883a 	mov	r4,r16
 1004afc:	180f883a 	mov	r7,r3
 1004b00:	100d883a 	mov	r6,r2
 1004b04:	10095d40 	call	10095d4 <__subdf3>
 1004b08:	180b883a 	mov	r5,r3
 1004b0c:	d8c00517 	ldw	r3,20(sp)
 1004b10:	1009883a 	mov	r4,r2
 1004b14:	ad400c04 	addi	r21,r21,48
 1004b18:	1d05883a 	add	r2,r3,r20
 1004b1c:	15400005 	stb	r21,0(r2)
 1004b20:	2021883a 	mov	r16,r4
 1004b24:	d9000317 	ldw	r4,12(sp)
 1004b28:	a5000044 	addi	r20,r20,1
 1004b2c:	2823883a 	mov	r17,r5
 1004b30:	a13fe11e 	bne	r20,r4,1004ab8 <_dtoa_r+0x1378>
 1004b34:	e505883a 	add	r2,fp,r20
 1004b38:	173fffc4 	addi	fp,r2,-1
 1004b3c:	0025883a 	mov	r18,zero
 1004b40:	04cff834 	movhi	r19,16352
 1004b44:	b009883a 	mov	r4,r22
 1004b48:	b80b883a 	mov	r5,r23
 1004b4c:	900d883a 	mov	r6,r18
 1004b50:	980f883a 	mov	r7,r19
 1004b54:	10096540 	call	1009654 <__adddf3>
 1004b58:	180b883a 	mov	r5,r3
 1004b5c:	1009883a 	mov	r4,r2
 1004b60:	800d883a 	mov	r6,r16
 1004b64:	880f883a 	mov	r7,r17
 1004b68:	1009f040 	call	1009f04 <__ltdf2>
 1004b6c:	103cab16 	blt	r2,zero,1003e1c <_dtoa_r+0x6dc>
 1004b70:	0009883a 	mov	r4,zero
 1004b74:	980b883a 	mov	r5,r19
 1004b78:	b80f883a 	mov	r7,r23
 1004b7c:	b00d883a 	mov	r6,r22
 1004b80:	10095d40 	call	10095d4 <__subdf3>
 1004b84:	180b883a 	mov	r5,r3
 1004b88:	880f883a 	mov	r7,r17
 1004b8c:	1009883a 	mov	r4,r2
 1004b90:	800d883a 	mov	r6,r16
 1004b94:	1009df40 	call	1009df4 <__gtdf2>
 1004b98:	00bc470e 	bge	zero,r2,1003cb8 <_dtoa_r+0x578>
 1004b9c:	00c00c04 	movi	r3,48
 1004ba0:	e73fffc4 	addi	fp,fp,-1
 1004ba4:	e0800007 	ldb	r2,0(fp)
 1004ba8:	10fffd26 	beq	r2,r3,1004ba0 <_dtoa_r+0x1460>
 1004bac:	d9800417 	ldw	r6,16(sp)
 1004bb0:	e7000044 	addi	fp,fp,1
 1004bb4:	d9800d15 	stw	r6,52(sp)
 1004bb8:	003cab06 	br	1003e68 <_dtoa_r+0x728>
 1004bbc:	d8c00f17 	ldw	r3,60(sp)
 1004bc0:	d9001117 	ldw	r4,68(sp)
 1004bc4:	20e1c83a 	sub	r16,r4,r3
 1004bc8:	0007883a 	mov	r3,zero
 1004bcc:	003d9b06 	br	100423c <_dtoa_r+0xafc>
 1004bd0:	00800e44 	movi	r2,57
 1004bd4:	b0800005 	stb	r2,0(r22)
 1004bd8:	b5800044 	addi	r22,r22,1
 1004bdc:	003dc106 	br	10042e4 <_dtoa_r+0xba4>
 1004be0:	05800084 	movi	r22,2
 1004be4:	003bf706 	br	1003bc4 <_dtoa_r+0x484>
 1004be8:	d9000f17 	ldw	r4,60(sp)
 1004bec:	013c000e 	bge	zero,r4,1003bf0 <_dtoa_r+0x4b0>
 1004bf0:	d9800e17 	ldw	r6,56(sp)
 1004bf4:	01bc300e 	bge	zero,r6,1003cb8 <_dtoa_r+0x578>
 1004bf8:	0005883a 	mov	r2,zero
 1004bfc:	00d00934 	movhi	r3,16420
 1004c00:	a80b883a 	mov	r5,r21
 1004c04:	180f883a 	mov	r7,r3
 1004c08:	a009883a 	mov	r4,r20
 1004c0c:	100d883a 	mov	r6,r2
 1004c10:	10096c80 	call	10096c8 <__muldf3>
 1004c14:	b1000044 	addi	r4,r22,1
 1004c18:	1021883a 	mov	r16,r2
 1004c1c:	1823883a 	mov	r17,r3
 1004c20:	1009f8c0 	call	1009f8c <__floatsidf>
 1004c24:	880b883a 	mov	r5,r17
 1004c28:	8009883a 	mov	r4,r16
 1004c2c:	180f883a 	mov	r7,r3
 1004c30:	100d883a 	mov	r6,r2
 1004c34:	10096c80 	call	10096c8 <__muldf3>
 1004c38:	0011883a 	mov	r8,zero
 1004c3c:	02500734 	movhi	r9,16412
 1004c40:	180b883a 	mov	r5,r3
 1004c44:	480f883a 	mov	r7,r9
 1004c48:	1009883a 	mov	r4,r2
 1004c4c:	400d883a 	mov	r6,r8
 1004c50:	10096540 	call	1009654 <__adddf3>
 1004c54:	102d883a 	mov	r22,r2
 1004c58:	00bf3034 	movhi	r2,64704
 1004c5c:	10ef883a 	add	r23,r2,r3
 1004c60:	d8800d17 	ldw	r2,52(sp)
 1004c64:	d8c00e17 	ldw	r3,56(sp)
 1004c68:	8029883a 	mov	r20,r16
 1004c6c:	10bfffc4 	addi	r2,r2,-1
 1004c70:	882b883a 	mov	r21,r17
 1004c74:	d8800415 	stw	r2,16(sp)
 1004c78:	d8c00315 	stw	r3,12(sp)
 1004c7c:	003e8306 	br	100468c <_dtoa_r+0xf4c>
 1004c80:	d8800117 	ldw	r2,4(sp)
 1004c84:	dc001117 	ldw	r16,68(sp)
 1004c88:	dc801017 	ldw	r18,64(sp)
 1004c8c:	00c00d84 	movi	r3,54
 1004c90:	1887c83a 	sub	r3,r3,r2
 1004c94:	003d6906 	br	100423c <_dtoa_r+0xafc>
 1004c98:	01800044 	movi	r6,1
 1004c9c:	3021883a 	mov	r16,r6
 1004ca0:	d9800f15 	stw	r6,60(sp)
 1004ca4:	d9802615 	stw	r6,152(sp)
 1004ca8:	d9800e15 	stw	r6,56(sp)
 1004cac:	003b9306 	br	1003afc <_dtoa_r+0x3bc>
 1004cb0:	b021883a 	mov	r16,r22
 1004cb4:	dd800f15 	stw	r22,60(sp)
 1004cb8:	003b9006 	br	1003afc <_dtoa_r+0x3bc>
 1004cbc:	103e221e 	bne	r2,zero,1004548 <_dtoa_r+0xe08>
 1004cc0:	b880004c 	andi	r2,r23,1
 1004cc4:	1005003a 	cmpeq	r2,r2,zero
 1004cc8:	103e1f1e 	bne	r2,zero,1004548 <_dtoa_r+0xe08>
 1004ccc:	003e1b06 	br	100453c <_dtoa_r+0xdfc>
 1004cd0:	d9001617 	ldw	r4,88(sp)
 1004cd4:	980b883a 	mov	r5,r19
 1004cd8:	01800284 	movi	r6,10
 1004cdc:	000f883a 	mov	r7,zero
 1004ce0:	10075880 	call	1007588 <__multadd>
 1004ce4:	d8c00e17 	ldw	r3,56(sp)
 1004ce8:	1027883a 	mov	r19,r2
 1004cec:	d8c00f15 	stw	r3,60(sp)
 1004cf0:	003cd306 	br	1004040 <_dtoa_r+0x900>

01004cf4 <_fflush_r>:
 1004cf4:	defffb04 	addi	sp,sp,-20
 1004cf8:	dcc00315 	stw	r19,12(sp)
 1004cfc:	dc800215 	stw	r18,8(sp)
 1004d00:	dfc00415 	stw	ra,16(sp)
 1004d04:	dc400115 	stw	r17,4(sp)
 1004d08:	dc000015 	stw	r16,0(sp)
 1004d0c:	2027883a 	mov	r19,r4
 1004d10:	2825883a 	mov	r18,r5
 1004d14:	20000226 	beq	r4,zero,1004d20 <_fflush_r+0x2c>
 1004d18:	20800e17 	ldw	r2,56(r4)
 1004d1c:	10005626 	beq	r2,zero,1004e78 <_fflush_r+0x184>
 1004d20:	9100030b 	ldhu	r4,12(r18)
 1004d24:	20ffffcc 	andi	r3,r4,65535
 1004d28:	18e0001c 	xori	r3,r3,32768
 1004d2c:	18e00004 	addi	r3,r3,-32768
 1004d30:	1880020c 	andi	r2,r3,8
 1004d34:	1000261e 	bne	r2,zero,1004dd0 <_fflush_r+0xdc>
 1004d38:	90c00117 	ldw	r3,4(r18)
 1004d3c:	20820014 	ori	r2,r4,2048
 1004d40:	9080030d 	sth	r2,12(r18)
 1004d44:	1009883a 	mov	r4,r2
 1004d48:	00c0400e 	bge	zero,r3,1004e4c <_fflush_r+0x158>
 1004d4c:	92000a17 	ldw	r8,40(r18)
 1004d50:	40004026 	beq	r8,zero,1004e54 <_fflush_r+0x160>
 1004d54:	2084000c 	andi	r2,r4,4096
 1004d58:	10005326 	beq	r2,zero,1004ea8 <_fflush_r+0x1b4>
 1004d5c:	94001417 	ldw	r16,80(r18)
 1004d60:	9080030b 	ldhu	r2,12(r18)
 1004d64:	1080010c 	andi	r2,r2,4
 1004d68:	1000481e 	bne	r2,zero,1004e8c <_fflush_r+0x198>
 1004d6c:	91400717 	ldw	r5,28(r18)
 1004d70:	9809883a 	mov	r4,r19
 1004d74:	800d883a 	mov	r6,r16
 1004d78:	000f883a 	mov	r7,zero
 1004d7c:	403ee83a 	callr	r8
 1004d80:	8080261e 	bne	r16,r2,1004e1c <_fflush_r+0x128>
 1004d84:	9080030b 	ldhu	r2,12(r18)
 1004d88:	91000417 	ldw	r4,16(r18)
 1004d8c:	90000115 	stw	zero,4(r18)
 1004d90:	10bdffcc 	andi	r2,r2,63487
 1004d94:	10ffffcc 	andi	r3,r2,65535
 1004d98:	18c4000c 	andi	r3,r3,4096
 1004d9c:	9080030d 	sth	r2,12(r18)
 1004da0:	91000015 	stw	r4,0(r18)
 1004da4:	18002b26 	beq	r3,zero,1004e54 <_fflush_r+0x160>
 1004da8:	0007883a 	mov	r3,zero
 1004dac:	1805883a 	mov	r2,r3
 1004db0:	94001415 	stw	r16,80(r18)
 1004db4:	dfc00417 	ldw	ra,16(sp)
 1004db8:	dcc00317 	ldw	r19,12(sp)
 1004dbc:	dc800217 	ldw	r18,8(sp)
 1004dc0:	dc400117 	ldw	r17,4(sp)
 1004dc4:	dc000017 	ldw	r16,0(sp)
 1004dc8:	dec00504 	addi	sp,sp,20
 1004dcc:	f800283a 	ret
 1004dd0:	94400417 	ldw	r17,16(r18)
 1004dd4:	88001f26 	beq	r17,zero,1004e54 <_fflush_r+0x160>
 1004dd8:	90800017 	ldw	r2,0(r18)
 1004ddc:	18c000cc 	andi	r3,r3,3
 1004de0:	94400015 	stw	r17,0(r18)
 1004de4:	1461c83a 	sub	r16,r2,r17
 1004de8:	18002526 	beq	r3,zero,1004e80 <_fflush_r+0x18c>
 1004dec:	0005883a 	mov	r2,zero
 1004df0:	90800215 	stw	r2,8(r18)
 1004df4:	0400170e 	bge	zero,r16,1004e54 <_fflush_r+0x160>
 1004df8:	90c00917 	ldw	r3,36(r18)
 1004dfc:	91400717 	ldw	r5,28(r18)
 1004e00:	880d883a 	mov	r6,r17
 1004e04:	800f883a 	mov	r7,r16
 1004e08:	9809883a 	mov	r4,r19
 1004e0c:	183ee83a 	callr	r3
 1004e10:	88a3883a 	add	r17,r17,r2
 1004e14:	80a1c83a 	sub	r16,r16,r2
 1004e18:	00bff616 	blt	zero,r2,1004df4 <_fflush_r+0x100>
 1004e1c:	9080030b 	ldhu	r2,12(r18)
 1004e20:	00ffffc4 	movi	r3,-1
 1004e24:	10801014 	ori	r2,r2,64
 1004e28:	9080030d 	sth	r2,12(r18)
 1004e2c:	1805883a 	mov	r2,r3
 1004e30:	dfc00417 	ldw	ra,16(sp)
 1004e34:	dcc00317 	ldw	r19,12(sp)
 1004e38:	dc800217 	ldw	r18,8(sp)
 1004e3c:	dc400117 	ldw	r17,4(sp)
 1004e40:	dc000017 	ldw	r16,0(sp)
 1004e44:	dec00504 	addi	sp,sp,20
 1004e48:	f800283a 	ret
 1004e4c:	90800f17 	ldw	r2,60(r18)
 1004e50:	00bfbe16 	blt	zero,r2,1004d4c <_fflush_r+0x58>
 1004e54:	0007883a 	mov	r3,zero
 1004e58:	1805883a 	mov	r2,r3
 1004e5c:	dfc00417 	ldw	ra,16(sp)
 1004e60:	dcc00317 	ldw	r19,12(sp)
 1004e64:	dc800217 	ldw	r18,8(sp)
 1004e68:	dc400117 	ldw	r17,4(sp)
 1004e6c:	dc000017 	ldw	r16,0(sp)
 1004e70:	dec00504 	addi	sp,sp,20
 1004e74:	f800283a 	ret
 1004e78:	1004f8c0 	call	1004f8c <__sinit>
 1004e7c:	003fa806 	br	1004d20 <_fflush_r+0x2c>
 1004e80:	90800517 	ldw	r2,20(r18)
 1004e84:	90800215 	stw	r2,8(r18)
 1004e88:	003fda06 	br	1004df4 <_fflush_r+0x100>
 1004e8c:	90800117 	ldw	r2,4(r18)
 1004e90:	90c00c17 	ldw	r3,48(r18)
 1004e94:	80a1c83a 	sub	r16,r16,r2
 1004e98:	183fb426 	beq	r3,zero,1004d6c <_fflush_r+0x78>
 1004e9c:	90800f17 	ldw	r2,60(r18)
 1004ea0:	80a1c83a 	sub	r16,r16,r2
 1004ea4:	003fb106 	br	1004d6c <_fflush_r+0x78>
 1004ea8:	91400717 	ldw	r5,28(r18)
 1004eac:	9809883a 	mov	r4,r19
 1004eb0:	000d883a 	mov	r6,zero
 1004eb4:	01c00044 	movi	r7,1
 1004eb8:	403ee83a 	callr	r8
 1004ebc:	1021883a 	mov	r16,r2
 1004ec0:	00bfffc4 	movi	r2,-1
 1004ec4:	80800226 	beq	r16,r2,1004ed0 <_fflush_r+0x1dc>
 1004ec8:	92000a17 	ldw	r8,40(r18)
 1004ecc:	003fa406 	br	1004d60 <_fflush_r+0x6c>
 1004ed0:	98c00017 	ldw	r3,0(r19)
 1004ed4:	00800744 	movi	r2,29
 1004ed8:	18bfde26 	beq	r3,r2,1004e54 <_fflush_r+0x160>
 1004edc:	9080030b 	ldhu	r2,12(r18)
 1004ee0:	8007883a 	mov	r3,r16
 1004ee4:	10801014 	ori	r2,r2,64
 1004ee8:	9080030d 	sth	r2,12(r18)
 1004eec:	003fcf06 	br	1004e2c <_fflush_r+0x138>

01004ef0 <fflush>:
 1004ef0:	01404034 	movhi	r5,256
 1004ef4:	29533d04 	addi	r5,r5,19700
 1004ef8:	2007883a 	mov	r3,r4
 1004efc:	20000526 	beq	r4,zero,1004f14 <fflush+0x24>
 1004f00:	00804074 	movhi	r2,257
 1004f04:	1081d504 	addi	r2,r2,1876
 1004f08:	11000017 	ldw	r4,0(r2)
 1004f0c:	180b883a 	mov	r5,r3
 1004f10:	1004cf41 	jmpi	1004cf4 <_fflush_r>
 1004f14:	00804074 	movhi	r2,257
 1004f18:	1081d604 	addi	r2,r2,1880
 1004f1c:	11000017 	ldw	r4,0(r2)
 1004f20:	1005ac01 	jmpi	1005ac0 <_fwalk_reent>

01004f24 <std>:
 1004f24:	00804034 	movhi	r2,256
 1004f28:	109fe704 	addi	r2,r2,32668
 1004f2c:	20800b15 	stw	r2,44(r4)
 1004f30:	00804074 	movhi	r2,257
 1004f34:	10a02204 	addi	r2,r2,-32632
 1004f38:	20800815 	stw	r2,32(r4)
 1004f3c:	00c04074 	movhi	r3,257
 1004f40:	18e00304 	addi	r3,r3,-32756
 1004f44:	00804034 	movhi	r2,256
 1004f48:	109fe904 	addi	r2,r2,32676
 1004f4c:	2140030d 	sth	r5,12(r4)
 1004f50:	2180038d 	sth	r6,14(r4)
 1004f54:	20c00915 	stw	r3,36(r4)
 1004f58:	20800a15 	stw	r2,40(r4)
 1004f5c:	20000015 	stw	zero,0(r4)
 1004f60:	20000115 	stw	zero,4(r4)
 1004f64:	20000215 	stw	zero,8(r4)
 1004f68:	20000415 	stw	zero,16(r4)
 1004f6c:	20000515 	stw	zero,20(r4)
 1004f70:	20000615 	stw	zero,24(r4)
 1004f74:	21000715 	stw	r4,28(r4)
 1004f78:	f800283a 	ret

01004f7c <__sfp_lock_acquire>:
 1004f7c:	f800283a 	ret

01004f80 <__sfp_lock_release>:
 1004f80:	f800283a 	ret

01004f84 <__sinit_lock_acquire>:
 1004f84:	f800283a 	ret

01004f88 <__sinit_lock_release>:
 1004f88:	f800283a 	ret

01004f8c <__sinit>:
 1004f8c:	20800e17 	ldw	r2,56(r4)
 1004f90:	defffd04 	addi	sp,sp,-12
 1004f94:	dc400115 	stw	r17,4(sp)
 1004f98:	dc000015 	stw	r16,0(sp)
 1004f9c:	dfc00215 	stw	ra,8(sp)
 1004fa0:	04400044 	movi	r17,1
 1004fa4:	01400104 	movi	r5,4
 1004fa8:	000d883a 	mov	r6,zero
 1004fac:	2021883a 	mov	r16,r4
 1004fb0:	2200bb04 	addi	r8,r4,748
 1004fb4:	200f883a 	mov	r7,r4
 1004fb8:	10000526 	beq	r2,zero,1004fd0 <__sinit+0x44>
 1004fbc:	dfc00217 	ldw	ra,8(sp)
 1004fc0:	dc400117 	ldw	r17,4(sp)
 1004fc4:	dc000017 	ldw	r16,0(sp)
 1004fc8:	dec00304 	addi	sp,sp,12
 1004fcc:	f800283a 	ret
 1004fd0:	21000117 	ldw	r4,4(r4)
 1004fd4:	00804034 	movhi	r2,256
 1004fd8:	10941c04 	addi	r2,r2,20592
 1004fdc:	00c000c4 	movi	r3,3
 1004fe0:	80800f15 	stw	r2,60(r16)
 1004fe4:	80c0b915 	stw	r3,740(r16)
 1004fe8:	8200ba15 	stw	r8,744(r16)
 1004fec:	84400e15 	stw	r17,56(r16)
 1004ff0:	8000b815 	stw	zero,736(r16)
 1004ff4:	1004f240 	call	1004f24 <std>
 1004ff8:	81000217 	ldw	r4,8(r16)
 1004ffc:	880d883a 	mov	r6,r17
 1005000:	800f883a 	mov	r7,r16
 1005004:	01400284 	movi	r5,10
 1005008:	1004f240 	call	1004f24 <std>
 100500c:	81000317 	ldw	r4,12(r16)
 1005010:	800f883a 	mov	r7,r16
 1005014:	01400484 	movi	r5,18
 1005018:	01800084 	movi	r6,2
 100501c:	dfc00217 	ldw	ra,8(sp)
 1005020:	dc400117 	ldw	r17,4(sp)
 1005024:	dc000017 	ldw	r16,0(sp)
 1005028:	dec00304 	addi	sp,sp,12
 100502c:	1004f241 	jmpi	1004f24 <std>

01005030 <__fp_lock>:
 1005030:	0005883a 	mov	r2,zero
 1005034:	f800283a 	ret

01005038 <__fp_unlock>:
 1005038:	0005883a 	mov	r2,zero
 100503c:	f800283a 	ret

01005040 <__fp_unlock_all>:
 1005040:	00804074 	movhi	r2,257
 1005044:	1081d504 	addi	r2,r2,1876
 1005048:	11000017 	ldw	r4,0(r2)
 100504c:	01404034 	movhi	r5,256
 1005050:	29540e04 	addi	r5,r5,20536
 1005054:	1005b881 	jmpi	1005b88 <_fwalk>

01005058 <__fp_lock_all>:
 1005058:	00804074 	movhi	r2,257
 100505c:	1081d504 	addi	r2,r2,1876
 1005060:	11000017 	ldw	r4,0(r2)
 1005064:	01404034 	movhi	r5,256
 1005068:	29540c04 	addi	r5,r5,20528
 100506c:	1005b881 	jmpi	1005b88 <_fwalk>

01005070 <_cleanup_r>:
 1005070:	01404074 	movhi	r5,257
 1005074:	29611404 	addi	r5,r5,-31664
 1005078:	1005b881 	jmpi	1005b88 <_fwalk>

0100507c <_cleanup>:
 100507c:	00804074 	movhi	r2,257
 1005080:	1081d604 	addi	r2,r2,1880
 1005084:	11000017 	ldw	r4,0(r2)
 1005088:	10050701 	jmpi	1005070 <_cleanup_r>

0100508c <__sfmoreglue>:
 100508c:	defffc04 	addi	sp,sp,-16
 1005090:	dc400115 	stw	r17,4(sp)
 1005094:	2c401724 	muli	r17,r5,92
 1005098:	dc800215 	stw	r18,8(sp)
 100509c:	2825883a 	mov	r18,r5
 10050a0:	89400304 	addi	r5,r17,12
 10050a4:	dc000015 	stw	r16,0(sp)
 10050a8:	dfc00315 	stw	ra,12(sp)
 10050ac:	1005e980 	call	1005e98 <_malloc_r>
 10050b0:	0021883a 	mov	r16,zero
 10050b4:	880d883a 	mov	r6,r17
 10050b8:	000b883a 	mov	r5,zero
 10050bc:	10000626 	beq	r2,zero,10050d8 <__sfmoreglue+0x4c>
 10050c0:	11000304 	addi	r4,r2,12
 10050c4:	14800115 	stw	r18,4(r2)
 10050c8:	10000015 	stw	zero,0(r2)
 10050cc:	11000215 	stw	r4,8(r2)
 10050d0:	1021883a 	mov	r16,r2
 10050d4:	100683c0 	call	100683c <memset>
 10050d8:	8005883a 	mov	r2,r16
 10050dc:	dfc00317 	ldw	ra,12(sp)
 10050e0:	dc800217 	ldw	r18,8(sp)
 10050e4:	dc400117 	ldw	r17,4(sp)
 10050e8:	dc000017 	ldw	r16,0(sp)
 10050ec:	dec00404 	addi	sp,sp,16
 10050f0:	f800283a 	ret

010050f4 <__sfp>:
 10050f4:	defffd04 	addi	sp,sp,-12
 10050f8:	00804074 	movhi	r2,257
 10050fc:	1081d604 	addi	r2,r2,1880
 1005100:	dc000015 	stw	r16,0(sp)
 1005104:	14000017 	ldw	r16,0(r2)
 1005108:	dc400115 	stw	r17,4(sp)
 100510c:	dfc00215 	stw	ra,8(sp)
 1005110:	80800e17 	ldw	r2,56(r16)
 1005114:	2023883a 	mov	r17,r4
 1005118:	10002626 	beq	r2,zero,10051b4 <__sfp+0xc0>
 100511c:	8400b804 	addi	r16,r16,736
 1005120:	80800117 	ldw	r2,4(r16)
 1005124:	81000217 	ldw	r4,8(r16)
 1005128:	10ffffc4 	addi	r3,r2,-1
 100512c:	18000916 	blt	r3,zero,1005154 <__sfp+0x60>
 1005130:	2080030f 	ldh	r2,12(r4)
 1005134:	10000b26 	beq	r2,zero,1005164 <__sfp+0x70>
 1005138:	017fffc4 	movi	r5,-1
 100513c:	00000206 	br	1005148 <__sfp+0x54>
 1005140:	2080030f 	ldh	r2,12(r4)
 1005144:	10000726 	beq	r2,zero,1005164 <__sfp+0x70>
 1005148:	18ffffc4 	addi	r3,r3,-1
 100514c:	21001704 	addi	r4,r4,92
 1005150:	197ffb1e 	bne	r3,r5,1005140 <__sfp+0x4c>
 1005154:	80800017 	ldw	r2,0(r16)
 1005158:	10001926 	beq	r2,zero,10051c0 <__sfp+0xcc>
 100515c:	1021883a 	mov	r16,r2
 1005160:	003fef06 	br	1005120 <__sfp+0x2c>
 1005164:	00bfffc4 	movi	r2,-1
 1005168:	00c00044 	movi	r3,1
 100516c:	2080038d 	sth	r2,14(r4)
 1005170:	20c0030d 	sth	r3,12(r4)
 1005174:	20000015 	stw	zero,0(r4)
 1005178:	20000215 	stw	zero,8(r4)
 100517c:	20000115 	stw	zero,4(r4)
 1005180:	20000415 	stw	zero,16(r4)
 1005184:	20000515 	stw	zero,20(r4)
 1005188:	20000615 	stw	zero,24(r4)
 100518c:	20000c15 	stw	zero,48(r4)
 1005190:	20000d15 	stw	zero,52(r4)
 1005194:	20001115 	stw	zero,68(r4)
 1005198:	20001215 	stw	zero,72(r4)
 100519c:	2005883a 	mov	r2,r4
 10051a0:	dfc00217 	ldw	ra,8(sp)
 10051a4:	dc400117 	ldw	r17,4(sp)
 10051a8:	dc000017 	ldw	r16,0(sp)
 10051ac:	dec00304 	addi	sp,sp,12
 10051b0:	f800283a 	ret
 10051b4:	8009883a 	mov	r4,r16
 10051b8:	1004f8c0 	call	1004f8c <__sinit>
 10051bc:	003fd706 	br	100511c <__sfp+0x28>
 10051c0:	8809883a 	mov	r4,r17
 10051c4:	01400104 	movi	r5,4
 10051c8:	100508c0 	call	100508c <__sfmoreglue>
 10051cc:	80800015 	stw	r2,0(r16)
 10051d0:	103fe21e 	bne	r2,zero,100515c <__sfp+0x68>
 10051d4:	00800304 	movi	r2,12
 10051d8:	0009883a 	mov	r4,zero
 10051dc:	88800015 	stw	r2,0(r17)
 10051e0:	003fee06 	br	100519c <__sfp+0xa8>

010051e4 <_malloc_trim_r>:
 10051e4:	defffb04 	addi	sp,sp,-20
 10051e8:	dcc00315 	stw	r19,12(sp)
 10051ec:	04c04074 	movhi	r19,257
 10051f0:	9cfc1404 	addi	r19,r19,-4016
 10051f4:	dc800215 	stw	r18,8(sp)
 10051f8:	dc400115 	stw	r17,4(sp)
 10051fc:	dc000015 	stw	r16,0(sp)
 1005200:	2823883a 	mov	r17,r5
 1005204:	2025883a 	mov	r18,r4
 1005208:	dfc00415 	stw	ra,16(sp)
 100520c:	100ad580 	call	100ad58 <__malloc_lock>
 1005210:	98800217 	ldw	r2,8(r19)
 1005214:	9009883a 	mov	r4,r18
 1005218:	000b883a 	mov	r5,zero
 100521c:	10c00117 	ldw	r3,4(r2)
 1005220:	00bfff04 	movi	r2,-4
 1005224:	18a0703a 	and	r16,r3,r2
 1005228:	8463c83a 	sub	r17,r16,r17
 100522c:	8c43fbc4 	addi	r17,r17,4079
 1005230:	8822d33a 	srli	r17,r17,12
 1005234:	0083ffc4 	movi	r2,4095
 1005238:	8c7fffc4 	addi	r17,r17,-1
 100523c:	8822933a 	slli	r17,r17,12
 1005240:	1440060e 	bge	r2,r17,100525c <_malloc_trim_r+0x78>
 1005244:	1007f2c0 	call	1007f2c <_sbrk_r>
 1005248:	98c00217 	ldw	r3,8(r19)
 100524c:	9009883a 	mov	r4,r18
 1005250:	044bc83a 	sub	r5,zero,r17
 1005254:	80c7883a 	add	r3,r16,r3
 1005258:	10c00926 	beq	r2,r3,1005280 <_malloc_trim_r+0x9c>
 100525c:	100ad780 	call	100ad78 <__malloc_unlock>
 1005260:	0005883a 	mov	r2,zero
 1005264:	dfc00417 	ldw	ra,16(sp)
 1005268:	dcc00317 	ldw	r19,12(sp)
 100526c:	dc800217 	ldw	r18,8(sp)
 1005270:	dc400117 	ldw	r17,4(sp)
 1005274:	dc000017 	ldw	r16,0(sp)
 1005278:	dec00504 	addi	sp,sp,20
 100527c:	f800283a 	ret
 1005280:	9009883a 	mov	r4,r18
 1005284:	1007f2c0 	call	1007f2c <_sbrk_r>
 1005288:	844dc83a 	sub	r6,r16,r17
 100528c:	00ffffc4 	movi	r3,-1
 1005290:	9009883a 	mov	r4,r18
 1005294:	000b883a 	mov	r5,zero
 1005298:	01c04074 	movhi	r7,257
 100529c:	39c8c804 	addi	r7,r7,8992
 10052a0:	31800054 	ori	r6,r6,1
 10052a4:	10c00926 	beq	r2,r3,10052cc <_malloc_trim_r+0xe8>
 10052a8:	38800017 	ldw	r2,0(r7)
 10052ac:	98c00217 	ldw	r3,8(r19)
 10052b0:	9009883a 	mov	r4,r18
 10052b4:	1445c83a 	sub	r2,r2,r17
 10052b8:	38800015 	stw	r2,0(r7)
 10052bc:	19800115 	stw	r6,4(r3)
 10052c0:	100ad780 	call	100ad78 <__malloc_unlock>
 10052c4:	00800044 	movi	r2,1
 10052c8:	003fe606 	br	1005264 <_malloc_trim_r+0x80>
 10052cc:	1007f2c0 	call	1007f2c <_sbrk_r>
 10052d0:	99800217 	ldw	r6,8(r19)
 10052d4:	100f883a 	mov	r7,r2
 10052d8:	9009883a 	mov	r4,r18
 10052dc:	1187c83a 	sub	r3,r2,r6
 10052e0:	008003c4 	movi	r2,15
 10052e4:	19400054 	ori	r5,r3,1
 10052e8:	10ffdc0e 	bge	r2,r3,100525c <_malloc_trim_r+0x78>
 10052ec:	00804074 	movhi	r2,257
 10052f0:	1081da04 	addi	r2,r2,1896
 10052f4:	10c00017 	ldw	r3,0(r2)
 10052f8:	00804074 	movhi	r2,257
 10052fc:	1088c804 	addi	r2,r2,8992
 1005300:	31400115 	stw	r5,4(r6)
 1005304:	38c7c83a 	sub	r3,r7,r3
 1005308:	10c00015 	stw	r3,0(r2)
 100530c:	003fd306 	br	100525c <_malloc_trim_r+0x78>

01005310 <_free_r>:
 1005310:	defffd04 	addi	sp,sp,-12
 1005314:	dc400115 	stw	r17,4(sp)
 1005318:	dc000015 	stw	r16,0(sp)
 100531c:	dfc00215 	stw	ra,8(sp)
 1005320:	2821883a 	mov	r16,r5
 1005324:	2023883a 	mov	r17,r4
 1005328:	28005a26 	beq	r5,zero,1005494 <_free_r+0x184>
 100532c:	100ad580 	call	100ad58 <__malloc_lock>
 1005330:	823ffe04 	addi	r8,r16,-8
 1005334:	41400117 	ldw	r5,4(r8)
 1005338:	00bfff84 	movi	r2,-2
 100533c:	02804074 	movhi	r10,257
 1005340:	52bc1404 	addi	r10,r10,-4016
 1005344:	288e703a 	and	r7,r5,r2
 1005348:	41cd883a 	add	r6,r8,r7
 100534c:	30c00117 	ldw	r3,4(r6)
 1005350:	51000217 	ldw	r4,8(r10)
 1005354:	00bfff04 	movi	r2,-4
 1005358:	1892703a 	and	r9,r3,r2
 100535c:	5017883a 	mov	r11,r10
 1005360:	31006726 	beq	r6,r4,1005500 <_free_r+0x1f0>
 1005364:	2880004c 	andi	r2,r5,1
 1005368:	1005003a 	cmpeq	r2,r2,zero
 100536c:	32400115 	stw	r9,4(r6)
 1005370:	10001a1e 	bne	r2,zero,10053dc <_free_r+0xcc>
 1005374:	000b883a 	mov	r5,zero
 1005378:	3247883a 	add	r3,r6,r9
 100537c:	18800117 	ldw	r2,4(r3)
 1005380:	1080004c 	andi	r2,r2,1
 1005384:	1000231e 	bne	r2,zero,1005414 <_free_r+0x104>
 1005388:	280ac03a 	cmpne	r5,r5,zero
 100538c:	3a4f883a 	add	r7,r7,r9
 1005390:	2800451e 	bne	r5,zero,10054a8 <_free_r+0x198>
 1005394:	31000217 	ldw	r4,8(r6)
 1005398:	00804074 	movhi	r2,257
 100539c:	10bc1604 	addi	r2,r2,-4008
 10053a0:	20807b26 	beq	r4,r2,1005590 <_free_r+0x280>
 10053a4:	30800317 	ldw	r2,12(r6)
 10053a8:	3a07883a 	add	r3,r7,r8
 10053ac:	19c00015 	stw	r7,0(r3)
 10053b0:	11000215 	stw	r4,8(r2)
 10053b4:	20800315 	stw	r2,12(r4)
 10053b8:	38800054 	ori	r2,r7,1
 10053bc:	40800115 	stw	r2,4(r8)
 10053c0:	28001a26 	beq	r5,zero,100542c <_free_r+0x11c>
 10053c4:	8809883a 	mov	r4,r17
 10053c8:	dfc00217 	ldw	ra,8(sp)
 10053cc:	dc400117 	ldw	r17,4(sp)
 10053d0:	dc000017 	ldw	r16,0(sp)
 10053d4:	dec00304 	addi	sp,sp,12
 10053d8:	100ad781 	jmpi	100ad78 <__malloc_unlock>
 10053dc:	80bffe17 	ldw	r2,-8(r16)
 10053e0:	50c00204 	addi	r3,r10,8
 10053e4:	4091c83a 	sub	r8,r8,r2
 10053e8:	41000217 	ldw	r4,8(r8)
 10053ec:	388f883a 	add	r7,r7,r2
 10053f0:	20c06126 	beq	r4,r3,1005578 <_free_r+0x268>
 10053f4:	40800317 	ldw	r2,12(r8)
 10053f8:	3247883a 	add	r3,r6,r9
 10053fc:	000b883a 	mov	r5,zero
 1005400:	11000215 	stw	r4,8(r2)
 1005404:	20800315 	stw	r2,12(r4)
 1005408:	18800117 	ldw	r2,4(r3)
 100540c:	1080004c 	andi	r2,r2,1
 1005410:	103fdd26 	beq	r2,zero,1005388 <_free_r+0x78>
 1005414:	38800054 	ori	r2,r7,1
 1005418:	3a07883a 	add	r3,r7,r8
 100541c:	280ac03a 	cmpne	r5,r5,zero
 1005420:	40800115 	stw	r2,4(r8)
 1005424:	19c00015 	stw	r7,0(r3)
 1005428:	283fe61e 	bne	r5,zero,10053c4 <_free_r+0xb4>
 100542c:	00807fc4 	movi	r2,511
 1005430:	11c01f2e 	bgeu	r2,r7,10054b0 <_free_r+0x1a0>
 1005434:	3806d27a 	srli	r3,r7,9
 1005438:	1800481e 	bne	r3,zero,100555c <_free_r+0x24c>
 100543c:	3804d0fa 	srli	r2,r7,3
 1005440:	100690fa 	slli	r3,r2,3
 1005444:	1acd883a 	add	r6,r3,r11
 1005448:	31400217 	ldw	r5,8(r6)
 100544c:	31405926 	beq	r6,r5,10055b4 <_free_r+0x2a4>
 1005450:	28800117 	ldw	r2,4(r5)
 1005454:	00ffff04 	movi	r3,-4
 1005458:	10c4703a 	and	r2,r2,r3
 100545c:	3880022e 	bgeu	r7,r2,1005468 <_free_r+0x158>
 1005460:	29400217 	ldw	r5,8(r5)
 1005464:	317ffa1e 	bne	r6,r5,1005450 <_free_r+0x140>
 1005468:	29800317 	ldw	r6,12(r5)
 100546c:	41800315 	stw	r6,12(r8)
 1005470:	41400215 	stw	r5,8(r8)
 1005474:	8809883a 	mov	r4,r17
 1005478:	2a000315 	stw	r8,12(r5)
 100547c:	32000215 	stw	r8,8(r6)
 1005480:	dfc00217 	ldw	ra,8(sp)
 1005484:	dc400117 	ldw	r17,4(sp)
 1005488:	dc000017 	ldw	r16,0(sp)
 100548c:	dec00304 	addi	sp,sp,12
 1005490:	100ad781 	jmpi	100ad78 <__malloc_unlock>
 1005494:	dfc00217 	ldw	ra,8(sp)
 1005498:	dc400117 	ldw	r17,4(sp)
 100549c:	dc000017 	ldw	r16,0(sp)
 10054a0:	dec00304 	addi	sp,sp,12
 10054a4:	f800283a 	ret
 10054a8:	31000217 	ldw	r4,8(r6)
 10054ac:	003fbd06 	br	10053a4 <_free_r+0x94>
 10054b0:	3806d0fa 	srli	r3,r7,3
 10054b4:	00800044 	movi	r2,1
 10054b8:	51400117 	ldw	r5,4(r10)
 10054bc:	180890fa 	slli	r4,r3,3
 10054c0:	1807d0ba 	srai	r3,r3,2
 10054c4:	22c9883a 	add	r4,r4,r11
 10054c8:	21800217 	ldw	r6,8(r4)
 10054cc:	10c4983a 	sll	r2,r2,r3
 10054d0:	41000315 	stw	r4,12(r8)
 10054d4:	41800215 	stw	r6,8(r8)
 10054d8:	288ab03a 	or	r5,r5,r2
 10054dc:	22000215 	stw	r8,8(r4)
 10054e0:	8809883a 	mov	r4,r17
 10054e4:	51400115 	stw	r5,4(r10)
 10054e8:	32000315 	stw	r8,12(r6)
 10054ec:	dfc00217 	ldw	ra,8(sp)
 10054f0:	dc400117 	ldw	r17,4(sp)
 10054f4:	dc000017 	ldw	r16,0(sp)
 10054f8:	dec00304 	addi	sp,sp,12
 10054fc:	100ad781 	jmpi	100ad78 <__malloc_unlock>
 1005500:	2880004c 	andi	r2,r5,1
 1005504:	3a4d883a 	add	r6,r7,r9
 1005508:	1000071e 	bne	r2,zero,1005528 <_free_r+0x218>
 100550c:	80bffe17 	ldw	r2,-8(r16)
 1005510:	4091c83a 	sub	r8,r8,r2
 1005514:	41000317 	ldw	r4,12(r8)
 1005518:	40c00217 	ldw	r3,8(r8)
 100551c:	308d883a 	add	r6,r6,r2
 1005520:	20c00215 	stw	r3,8(r4)
 1005524:	19000315 	stw	r4,12(r3)
 1005528:	00804074 	movhi	r2,257
 100552c:	1081d904 	addi	r2,r2,1892
 1005530:	11000017 	ldw	r4,0(r2)
 1005534:	30c00054 	ori	r3,r6,1
 1005538:	52000215 	stw	r8,8(r10)
 100553c:	40c00115 	stw	r3,4(r8)
 1005540:	313fa036 	bltu	r6,r4,10053c4 <_free_r+0xb4>
 1005544:	00804074 	movhi	r2,257
 1005548:	1088bc04 	addi	r2,r2,8944
 100554c:	11400017 	ldw	r5,0(r2)
 1005550:	8809883a 	mov	r4,r17
 1005554:	10051e40 	call	10051e4 <_malloc_trim_r>
 1005558:	003f9a06 	br	10053c4 <_free_r+0xb4>
 100555c:	00800104 	movi	r2,4
 1005560:	10c0072e 	bgeu	r2,r3,1005580 <_free_r+0x270>
 1005564:	00800504 	movi	r2,20
 1005568:	10c01936 	bltu	r2,r3,10055d0 <_free_r+0x2c0>
 100556c:	188016c4 	addi	r2,r3,91
 1005570:	100690fa 	slli	r3,r2,3
 1005574:	003fb306 	br	1005444 <_free_r+0x134>
 1005578:	01400044 	movi	r5,1
 100557c:	003f7e06 	br	1005378 <_free_r+0x68>
 1005580:	3804d1ba 	srli	r2,r7,6
 1005584:	10800e04 	addi	r2,r2,56
 1005588:	100690fa 	slli	r3,r2,3
 100558c:	003fad06 	br	1005444 <_free_r+0x134>
 1005590:	22000315 	stw	r8,12(r4)
 1005594:	22000215 	stw	r8,8(r4)
 1005598:	3a05883a 	add	r2,r7,r8
 100559c:	38c00054 	ori	r3,r7,1
 10055a0:	11c00015 	stw	r7,0(r2)
 10055a4:	41000215 	stw	r4,8(r8)
 10055a8:	40c00115 	stw	r3,4(r8)
 10055ac:	41000315 	stw	r4,12(r8)
 10055b0:	003f8406 	br	10053c4 <_free_r+0xb4>
 10055b4:	1005d0ba 	srai	r2,r2,2
 10055b8:	00c00044 	movi	r3,1
 10055bc:	51000117 	ldw	r4,4(r10)
 10055c0:	1886983a 	sll	r3,r3,r2
 10055c4:	20c8b03a 	or	r4,r4,r3
 10055c8:	51000115 	stw	r4,4(r10)
 10055cc:	003fa706 	br	100546c <_free_r+0x15c>
 10055d0:	00801504 	movi	r2,84
 10055d4:	10c00436 	bltu	r2,r3,10055e8 <_free_r+0x2d8>
 10055d8:	3804d33a 	srli	r2,r7,12
 10055dc:	10801b84 	addi	r2,r2,110
 10055e0:	100690fa 	slli	r3,r2,3
 10055e4:	003f9706 	br	1005444 <_free_r+0x134>
 10055e8:	00805504 	movi	r2,340
 10055ec:	10c00436 	bltu	r2,r3,1005600 <_free_r+0x2f0>
 10055f0:	3804d3fa 	srli	r2,r7,15
 10055f4:	10801dc4 	addi	r2,r2,119
 10055f8:	100690fa 	slli	r3,r2,3
 10055fc:	003f9106 	br	1005444 <_free_r+0x134>
 1005600:	00815504 	movi	r2,1364
 1005604:	10c0032e 	bgeu	r2,r3,1005614 <_free_r+0x304>
 1005608:	00801f84 	movi	r2,126
 100560c:	00c0fc04 	movi	r3,1008
 1005610:	003f8c06 	br	1005444 <_free_r+0x134>
 1005614:	3804d4ba 	srli	r2,r7,18
 1005618:	10801f04 	addi	r2,r2,124
 100561c:	100690fa 	slli	r3,r2,3
 1005620:	003f8806 	br	1005444 <_free_r+0x134>

01005624 <__sfvwrite_r>:
 1005624:	30800217 	ldw	r2,8(r6)
 1005628:	defff504 	addi	sp,sp,-44
 100562c:	df000915 	stw	fp,36(sp)
 1005630:	dd800715 	stw	r22,28(sp)
 1005634:	dc800315 	stw	r18,12(sp)
 1005638:	dfc00a15 	stw	ra,40(sp)
 100563c:	ddc00815 	stw	r23,32(sp)
 1005640:	dd400615 	stw	r21,24(sp)
 1005644:	dd000515 	stw	r20,20(sp)
 1005648:	dcc00415 	stw	r19,16(sp)
 100564c:	dc400215 	stw	r17,8(sp)
 1005650:	dc000115 	stw	r16,4(sp)
 1005654:	302d883a 	mov	r22,r6
 1005658:	2039883a 	mov	fp,r4
 100565c:	2825883a 	mov	r18,r5
 1005660:	10001c26 	beq	r2,zero,10056d4 <__sfvwrite_r+0xb0>
 1005664:	29c0030b 	ldhu	r7,12(r5)
 1005668:	3880020c 	andi	r2,r7,8
 100566c:	10002726 	beq	r2,zero,100570c <__sfvwrite_r+0xe8>
 1005670:	28800417 	ldw	r2,16(r5)
 1005674:	10002526 	beq	r2,zero,100570c <__sfvwrite_r+0xe8>
 1005678:	3880008c 	andi	r2,r7,2
 100567c:	b5400017 	ldw	r21,0(r22)
 1005680:	10002826 	beq	r2,zero,1005724 <__sfvwrite_r+0x100>
 1005684:	0021883a 	mov	r16,zero
 1005688:	0023883a 	mov	r17,zero
 100568c:	880d883a 	mov	r6,r17
 1005690:	e009883a 	mov	r4,fp
 1005694:	00810004 	movi	r2,1024
 1005698:	80006e26 	beq	r16,zero,1005854 <__sfvwrite_r+0x230>
 100569c:	800f883a 	mov	r7,r16
 10056a0:	91400717 	ldw	r5,28(r18)
 10056a4:	1400012e 	bgeu	r2,r16,10056ac <__sfvwrite_r+0x88>
 10056a8:	100f883a 	mov	r7,r2
 10056ac:	90c00917 	ldw	r3,36(r18)
 10056b0:	183ee83a 	callr	r3
 10056b4:	1007883a 	mov	r3,r2
 10056b8:	80a1c83a 	sub	r16,r16,r2
 10056bc:	88a3883a 	add	r17,r17,r2
 10056c0:	00806d0e 	bge	zero,r2,1005878 <__sfvwrite_r+0x254>
 10056c4:	b0800217 	ldw	r2,8(r22)
 10056c8:	10c5c83a 	sub	r2,r2,r3
 10056cc:	b0800215 	stw	r2,8(r22)
 10056d0:	103fee1e 	bne	r2,zero,100568c <__sfvwrite_r+0x68>
 10056d4:	0009883a 	mov	r4,zero
 10056d8:	2005883a 	mov	r2,r4
 10056dc:	dfc00a17 	ldw	ra,40(sp)
 10056e0:	df000917 	ldw	fp,36(sp)
 10056e4:	ddc00817 	ldw	r23,32(sp)
 10056e8:	dd800717 	ldw	r22,28(sp)
 10056ec:	dd400617 	ldw	r21,24(sp)
 10056f0:	dd000517 	ldw	r20,20(sp)
 10056f4:	dcc00417 	ldw	r19,16(sp)
 10056f8:	dc800317 	ldw	r18,12(sp)
 10056fc:	dc400217 	ldw	r17,8(sp)
 1005700:	dc000117 	ldw	r16,4(sp)
 1005704:	dec00b04 	addi	sp,sp,44
 1005708:	f800283a 	ret
 100570c:	10033ec0 	call	10033ec <__swsetup_r>
 1005710:	1000e41e 	bne	r2,zero,1005aa4 <__sfvwrite_r+0x480>
 1005714:	91c0030b 	ldhu	r7,12(r18)
 1005718:	b5400017 	ldw	r21,0(r22)
 100571c:	3880008c 	andi	r2,r7,2
 1005720:	103fd81e 	bne	r2,zero,1005684 <__sfvwrite_r+0x60>
 1005724:	3880004c 	andi	r2,r7,1
 1005728:	1005003a 	cmpeq	r2,r2,zero
 100572c:	10005726 	beq	r2,zero,100588c <__sfvwrite_r+0x268>
 1005730:	0029883a 	mov	r20,zero
 1005734:	002f883a 	mov	r23,zero
 1005738:	a0004226 	beq	r20,zero,1005844 <__sfvwrite_r+0x220>
 100573c:	3880800c 	andi	r2,r7,512
 1005740:	94000217 	ldw	r16,8(r18)
 1005744:	10008b26 	beq	r2,zero,1005974 <__sfvwrite_r+0x350>
 1005748:	800d883a 	mov	r6,r16
 100574c:	a400a536 	bltu	r20,r16,10059e4 <__sfvwrite_r+0x3c0>
 1005750:	3881200c 	andi	r2,r7,1152
 1005754:	10002726 	beq	r2,zero,10057f4 <__sfvwrite_r+0x1d0>
 1005758:	90800517 	ldw	r2,20(r18)
 100575c:	92000417 	ldw	r8,16(r18)
 1005760:	91400017 	ldw	r5,0(r18)
 1005764:	1087883a 	add	r3,r2,r2
 1005768:	1887883a 	add	r3,r3,r2
 100576c:	1808d7fa 	srli	r4,r3,31
 1005770:	2a21c83a 	sub	r16,r5,r8
 1005774:	80800044 	addi	r2,r16,1
 1005778:	20c9883a 	add	r4,r4,r3
 100577c:	2027d07a 	srai	r19,r4,1
 1005780:	a085883a 	add	r2,r20,r2
 1005784:	980d883a 	mov	r6,r19
 1005788:	9880022e 	bgeu	r19,r2,1005794 <__sfvwrite_r+0x170>
 100578c:	1027883a 	mov	r19,r2
 1005790:	100d883a 	mov	r6,r2
 1005794:	3881000c 	andi	r2,r7,1024
 1005798:	1000b826 	beq	r2,zero,1005a7c <__sfvwrite_r+0x458>
 100579c:	300b883a 	mov	r5,r6
 10057a0:	e009883a 	mov	r4,fp
 10057a4:	1005e980 	call	1005e98 <_malloc_r>
 10057a8:	10003126 	beq	r2,zero,1005870 <__sfvwrite_r+0x24c>
 10057ac:	91400417 	ldw	r5,16(r18)
 10057b0:	1009883a 	mov	r4,r2
 10057b4:	800d883a 	mov	r6,r16
 10057b8:	1023883a 	mov	r17,r2
 10057bc:	10066bc0 	call	10066bc <memcpy>
 10057c0:	90c0030b 	ldhu	r3,12(r18)
 10057c4:	00beffc4 	movi	r2,-1025
 10057c8:	1886703a 	and	r3,r3,r2
 10057cc:	18c02014 	ori	r3,r3,128
 10057d0:	90c0030d 	sth	r3,12(r18)
 10057d4:	9c07c83a 	sub	r3,r19,r16
 10057d8:	8c05883a 	add	r2,r17,r16
 10057dc:	a00d883a 	mov	r6,r20
 10057e0:	a021883a 	mov	r16,r20
 10057e4:	90800015 	stw	r2,0(r18)
 10057e8:	90c00215 	stw	r3,8(r18)
 10057ec:	94400415 	stw	r17,16(r18)
 10057f0:	94c00515 	stw	r19,20(r18)
 10057f4:	91000017 	ldw	r4,0(r18)
 10057f8:	b80b883a 	mov	r5,r23
 10057fc:	a023883a 	mov	r17,r20
 1005800:	100675c0 	call	100675c <memmove>
 1005804:	90c00217 	ldw	r3,8(r18)
 1005808:	90800017 	ldw	r2,0(r18)
 100580c:	a027883a 	mov	r19,r20
 1005810:	1c07c83a 	sub	r3,r3,r16
 1005814:	1405883a 	add	r2,r2,r16
 1005818:	90c00215 	stw	r3,8(r18)
 100581c:	a021883a 	mov	r16,r20
 1005820:	90800015 	stw	r2,0(r18)
 1005824:	b0800217 	ldw	r2,8(r22)
 1005828:	1405c83a 	sub	r2,r2,r16
 100582c:	b0800215 	stw	r2,8(r22)
 1005830:	103fa826 	beq	r2,zero,10056d4 <__sfvwrite_r+0xb0>
 1005834:	a469c83a 	sub	r20,r20,r17
 1005838:	91c0030b 	ldhu	r7,12(r18)
 100583c:	bcef883a 	add	r23,r23,r19
 1005840:	a03fbe1e 	bne	r20,zero,100573c <__sfvwrite_r+0x118>
 1005844:	adc00017 	ldw	r23,0(r21)
 1005848:	ad000117 	ldw	r20,4(r21)
 100584c:	ad400204 	addi	r21,r21,8
 1005850:	003fb906 	br	1005738 <__sfvwrite_r+0x114>
 1005854:	ac400017 	ldw	r17,0(r21)
 1005858:	ac000117 	ldw	r16,4(r21)
 100585c:	ad400204 	addi	r21,r21,8
 1005860:	003f8a06 	br	100568c <__sfvwrite_r+0x68>
 1005864:	91400417 	ldw	r5,16(r18)
 1005868:	e009883a 	mov	r4,fp
 100586c:	10053100 	call	1005310 <_free_r>
 1005870:	00800304 	movi	r2,12
 1005874:	e0800015 	stw	r2,0(fp)
 1005878:	9080030b 	ldhu	r2,12(r18)
 100587c:	013fffc4 	movi	r4,-1
 1005880:	10801014 	ori	r2,r2,64
 1005884:	9080030d 	sth	r2,12(r18)
 1005888:	003f9306 	br	10056d8 <__sfvwrite_r+0xb4>
 100588c:	0027883a 	mov	r19,zero
 1005890:	002f883a 	mov	r23,zero
 1005894:	d8000015 	stw	zero,0(sp)
 1005898:	0029883a 	mov	r20,zero
 100589c:	98001e26 	beq	r19,zero,1005918 <__sfvwrite_r+0x2f4>
 10058a0:	d8c00017 	ldw	r3,0(sp)
 10058a4:	1804c03a 	cmpne	r2,r3,zero
 10058a8:	10005e26 	beq	r2,zero,1005a24 <__sfvwrite_r+0x400>
 10058ac:	9821883a 	mov	r16,r19
 10058b0:	a4c0012e 	bgeu	r20,r19,10058b8 <__sfvwrite_r+0x294>
 10058b4:	a021883a 	mov	r16,r20
 10058b8:	91000017 	ldw	r4,0(r18)
 10058bc:	90800417 	ldw	r2,16(r18)
 10058c0:	91800217 	ldw	r6,8(r18)
 10058c4:	91c00517 	ldw	r7,20(r18)
 10058c8:	1100022e 	bgeu	r2,r4,10058d4 <__sfvwrite_r+0x2b0>
 10058cc:	31e3883a 	add	r17,r6,r7
 10058d0:	8c001616 	blt	r17,r16,100592c <__sfvwrite_r+0x308>
 10058d4:	81c03816 	blt	r16,r7,10059b8 <__sfvwrite_r+0x394>
 10058d8:	90c00917 	ldw	r3,36(r18)
 10058dc:	91400717 	ldw	r5,28(r18)
 10058e0:	e009883a 	mov	r4,fp
 10058e4:	b80d883a 	mov	r6,r23
 10058e8:	183ee83a 	callr	r3
 10058ec:	1023883a 	mov	r17,r2
 10058f0:	00bfe10e 	bge	zero,r2,1005878 <__sfvwrite_r+0x254>
 10058f4:	a469c83a 	sub	r20,r20,r17
 10058f8:	a0001826 	beq	r20,zero,100595c <__sfvwrite_r+0x338>
 10058fc:	b0800217 	ldw	r2,8(r22)
 1005900:	1445c83a 	sub	r2,r2,r17
 1005904:	b0800215 	stw	r2,8(r22)
 1005908:	103f7226 	beq	r2,zero,10056d4 <__sfvwrite_r+0xb0>
 100590c:	9c67c83a 	sub	r19,r19,r17
 1005910:	bc6f883a 	add	r23,r23,r17
 1005914:	983fe21e 	bne	r19,zero,10058a0 <__sfvwrite_r+0x27c>
 1005918:	adc00017 	ldw	r23,0(r21)
 100591c:	acc00117 	ldw	r19,4(r21)
 1005920:	ad400204 	addi	r21,r21,8
 1005924:	d8000015 	stw	zero,0(sp)
 1005928:	003fdc06 	br	100589c <__sfvwrite_r+0x278>
 100592c:	b80b883a 	mov	r5,r23
 1005930:	880d883a 	mov	r6,r17
 1005934:	100675c0 	call	100675c <memmove>
 1005938:	90c00017 	ldw	r3,0(r18)
 100593c:	e009883a 	mov	r4,fp
 1005940:	900b883a 	mov	r5,r18
 1005944:	1c47883a 	add	r3,r3,r17
 1005948:	90c00015 	stw	r3,0(r18)
 100594c:	1004cf40 	call	1004cf4 <_fflush_r>
 1005950:	103fc91e 	bne	r2,zero,1005878 <__sfvwrite_r+0x254>
 1005954:	a469c83a 	sub	r20,r20,r17
 1005958:	a03fe81e 	bne	r20,zero,10058fc <__sfvwrite_r+0x2d8>
 100595c:	e009883a 	mov	r4,fp
 1005960:	900b883a 	mov	r5,r18
 1005964:	1004cf40 	call	1004cf4 <_fflush_r>
 1005968:	103fc31e 	bne	r2,zero,1005878 <__sfvwrite_r+0x254>
 100596c:	d8000015 	stw	zero,0(sp)
 1005970:	003fe206 	br	10058fc <__sfvwrite_r+0x2d8>
 1005974:	91000017 	ldw	r4,0(r18)
 1005978:	90800417 	ldw	r2,16(r18)
 100597c:	1100022e 	bgeu	r2,r4,1005988 <__sfvwrite_r+0x364>
 1005980:	8023883a 	mov	r17,r16
 1005984:	85003136 	bltu	r16,r20,1005a4c <__sfvwrite_r+0x428>
 1005988:	91c00517 	ldw	r7,20(r18)
 100598c:	a1c01836 	bltu	r20,r7,10059f0 <__sfvwrite_r+0x3cc>
 1005990:	90c00917 	ldw	r3,36(r18)
 1005994:	91400717 	ldw	r5,28(r18)
 1005998:	e009883a 	mov	r4,fp
 100599c:	b80d883a 	mov	r6,r23
 10059a0:	183ee83a 	callr	r3
 10059a4:	1021883a 	mov	r16,r2
 10059a8:	00bfb30e 	bge	zero,r2,1005878 <__sfvwrite_r+0x254>
 10059ac:	1023883a 	mov	r17,r2
 10059b0:	1027883a 	mov	r19,r2
 10059b4:	003f9b06 	br	1005824 <__sfvwrite_r+0x200>
 10059b8:	b80b883a 	mov	r5,r23
 10059bc:	800d883a 	mov	r6,r16
 10059c0:	100675c0 	call	100675c <memmove>
 10059c4:	90c00217 	ldw	r3,8(r18)
 10059c8:	90800017 	ldw	r2,0(r18)
 10059cc:	8023883a 	mov	r17,r16
 10059d0:	1c07c83a 	sub	r3,r3,r16
 10059d4:	1405883a 	add	r2,r2,r16
 10059d8:	90c00215 	stw	r3,8(r18)
 10059dc:	90800015 	stw	r2,0(r18)
 10059e0:	003fc406 	br	10058f4 <__sfvwrite_r+0x2d0>
 10059e4:	a00d883a 	mov	r6,r20
 10059e8:	a021883a 	mov	r16,r20
 10059ec:	003f8106 	br	10057f4 <__sfvwrite_r+0x1d0>
 10059f0:	b80b883a 	mov	r5,r23
 10059f4:	a00d883a 	mov	r6,r20
 10059f8:	100675c0 	call	100675c <memmove>
 10059fc:	90c00217 	ldw	r3,8(r18)
 1005a00:	90800017 	ldw	r2,0(r18)
 1005a04:	a021883a 	mov	r16,r20
 1005a08:	1d07c83a 	sub	r3,r3,r20
 1005a0c:	1505883a 	add	r2,r2,r20
 1005a10:	a023883a 	mov	r17,r20
 1005a14:	a027883a 	mov	r19,r20
 1005a18:	90c00215 	stw	r3,8(r18)
 1005a1c:	90800015 	stw	r2,0(r18)
 1005a20:	003f8006 	br	1005824 <__sfvwrite_r+0x200>
 1005a24:	b809883a 	mov	r4,r23
 1005a28:	01400284 	movi	r5,10
 1005a2c:	980d883a 	mov	r6,r19
 1005a30:	10065d80 	call	10065d8 <memchr>
 1005a34:	10001726 	beq	r2,zero,1005a94 <__sfvwrite_r+0x470>
 1005a38:	15c5c83a 	sub	r2,r2,r23
 1005a3c:	15000044 	addi	r20,r2,1
 1005a40:	00800044 	movi	r2,1
 1005a44:	d8800015 	stw	r2,0(sp)
 1005a48:	003f9806 	br	10058ac <__sfvwrite_r+0x288>
 1005a4c:	b80b883a 	mov	r5,r23
 1005a50:	800d883a 	mov	r6,r16
 1005a54:	100675c0 	call	100675c <memmove>
 1005a58:	90c00017 	ldw	r3,0(r18)
 1005a5c:	e009883a 	mov	r4,fp
 1005a60:	900b883a 	mov	r5,r18
 1005a64:	1c07883a 	add	r3,r3,r16
 1005a68:	90c00015 	stw	r3,0(r18)
 1005a6c:	8027883a 	mov	r19,r16
 1005a70:	1004cf40 	call	1004cf4 <_fflush_r>
 1005a74:	103f6b26 	beq	r2,zero,1005824 <__sfvwrite_r+0x200>
 1005a78:	003f7f06 	br	1005878 <__sfvwrite_r+0x254>
 1005a7c:	400b883a 	mov	r5,r8
 1005a80:	e009883a 	mov	r4,fp
 1005a84:	10078c80 	call	10078c8 <_realloc_r>
 1005a88:	103f7626 	beq	r2,zero,1005864 <__sfvwrite_r+0x240>
 1005a8c:	1023883a 	mov	r17,r2
 1005a90:	003f5006 	br	10057d4 <__sfvwrite_r+0x1b0>
 1005a94:	00c00044 	movi	r3,1
 1005a98:	9d000044 	addi	r20,r19,1
 1005a9c:	d8c00015 	stw	r3,0(sp)
 1005aa0:	003f8206 	br	10058ac <__sfvwrite_r+0x288>
 1005aa4:	9080030b 	ldhu	r2,12(r18)
 1005aa8:	00c00244 	movi	r3,9
 1005aac:	013fffc4 	movi	r4,-1
 1005ab0:	10801014 	ori	r2,r2,64
 1005ab4:	9080030d 	sth	r2,12(r18)
 1005ab8:	e0c00015 	stw	r3,0(fp)
 1005abc:	003f0606 	br	10056d8 <__sfvwrite_r+0xb4>

01005ac0 <_fwalk_reent>:
 1005ac0:	defff704 	addi	sp,sp,-36
 1005ac4:	dcc00315 	stw	r19,12(sp)
 1005ac8:	24c0b804 	addi	r19,r4,736
 1005acc:	dd800615 	stw	r22,24(sp)
 1005ad0:	dd400515 	stw	r21,20(sp)
 1005ad4:	dfc00815 	stw	ra,32(sp)
 1005ad8:	ddc00715 	stw	r23,28(sp)
 1005adc:	dd000415 	stw	r20,16(sp)
 1005ae0:	dc800215 	stw	r18,8(sp)
 1005ae4:	dc400115 	stw	r17,4(sp)
 1005ae8:	dc000015 	stw	r16,0(sp)
 1005aec:	202b883a 	mov	r21,r4
 1005af0:	282d883a 	mov	r22,r5
 1005af4:	1004f7c0 	call	1004f7c <__sfp_lock_acquire>
 1005af8:	98002126 	beq	r19,zero,1005b80 <_fwalk_reent+0xc0>
 1005afc:	002f883a 	mov	r23,zero
 1005b00:	9c800117 	ldw	r18,4(r19)
 1005b04:	9c000217 	ldw	r16,8(r19)
 1005b08:	90bfffc4 	addi	r2,r18,-1
 1005b0c:	10000d16 	blt	r2,zero,1005b44 <_fwalk_reent+0x84>
 1005b10:	0023883a 	mov	r17,zero
 1005b14:	053fffc4 	movi	r20,-1
 1005b18:	8080030f 	ldh	r2,12(r16)
 1005b1c:	8c400044 	addi	r17,r17,1
 1005b20:	10000626 	beq	r2,zero,1005b3c <_fwalk_reent+0x7c>
 1005b24:	8080038f 	ldh	r2,14(r16)
 1005b28:	800b883a 	mov	r5,r16
 1005b2c:	a809883a 	mov	r4,r21
 1005b30:	15000226 	beq	r2,r20,1005b3c <_fwalk_reent+0x7c>
 1005b34:	b03ee83a 	callr	r22
 1005b38:	b8aeb03a 	or	r23,r23,r2
 1005b3c:	84001704 	addi	r16,r16,92
 1005b40:	947ff51e 	bne	r18,r17,1005b18 <_fwalk_reent+0x58>
 1005b44:	9cc00017 	ldw	r19,0(r19)
 1005b48:	983fed1e 	bne	r19,zero,1005b00 <_fwalk_reent+0x40>
 1005b4c:	1004f800 	call	1004f80 <__sfp_lock_release>
 1005b50:	b805883a 	mov	r2,r23
 1005b54:	dfc00817 	ldw	ra,32(sp)
 1005b58:	ddc00717 	ldw	r23,28(sp)
 1005b5c:	dd800617 	ldw	r22,24(sp)
 1005b60:	dd400517 	ldw	r21,20(sp)
 1005b64:	dd000417 	ldw	r20,16(sp)
 1005b68:	dcc00317 	ldw	r19,12(sp)
 1005b6c:	dc800217 	ldw	r18,8(sp)
 1005b70:	dc400117 	ldw	r17,4(sp)
 1005b74:	dc000017 	ldw	r16,0(sp)
 1005b78:	dec00904 	addi	sp,sp,36
 1005b7c:	f800283a 	ret
 1005b80:	002f883a 	mov	r23,zero
 1005b84:	003ff106 	br	1005b4c <_fwalk_reent+0x8c>

01005b88 <_fwalk>:
 1005b88:	defff804 	addi	sp,sp,-32
 1005b8c:	dcc00315 	stw	r19,12(sp)
 1005b90:	24c0b804 	addi	r19,r4,736
 1005b94:	dd400515 	stw	r21,20(sp)
 1005b98:	dfc00715 	stw	ra,28(sp)
 1005b9c:	dd800615 	stw	r22,24(sp)
 1005ba0:	dd000415 	stw	r20,16(sp)
 1005ba4:	dc800215 	stw	r18,8(sp)
 1005ba8:	dc400115 	stw	r17,4(sp)
 1005bac:	dc000015 	stw	r16,0(sp)
 1005bb0:	282b883a 	mov	r21,r5
 1005bb4:	1004f7c0 	call	1004f7c <__sfp_lock_acquire>
 1005bb8:	98001f26 	beq	r19,zero,1005c38 <_fwalk+0xb0>
 1005bbc:	002d883a 	mov	r22,zero
 1005bc0:	9c800117 	ldw	r18,4(r19)
 1005bc4:	9c000217 	ldw	r16,8(r19)
 1005bc8:	90bfffc4 	addi	r2,r18,-1
 1005bcc:	10000c16 	blt	r2,zero,1005c00 <_fwalk+0x78>
 1005bd0:	0023883a 	mov	r17,zero
 1005bd4:	053fffc4 	movi	r20,-1
 1005bd8:	8080030f 	ldh	r2,12(r16)
 1005bdc:	8c400044 	addi	r17,r17,1
 1005be0:	10000526 	beq	r2,zero,1005bf8 <_fwalk+0x70>
 1005be4:	8080038f 	ldh	r2,14(r16)
 1005be8:	8009883a 	mov	r4,r16
 1005bec:	15000226 	beq	r2,r20,1005bf8 <_fwalk+0x70>
 1005bf0:	a83ee83a 	callr	r21
 1005bf4:	b0acb03a 	or	r22,r22,r2
 1005bf8:	84001704 	addi	r16,r16,92
 1005bfc:	947ff61e 	bne	r18,r17,1005bd8 <_fwalk+0x50>
 1005c00:	9cc00017 	ldw	r19,0(r19)
 1005c04:	983fee1e 	bne	r19,zero,1005bc0 <_fwalk+0x38>
 1005c08:	1004f800 	call	1004f80 <__sfp_lock_release>
 1005c0c:	b005883a 	mov	r2,r22
 1005c10:	dfc00717 	ldw	ra,28(sp)
 1005c14:	dd800617 	ldw	r22,24(sp)
 1005c18:	dd400517 	ldw	r21,20(sp)
 1005c1c:	dd000417 	ldw	r20,16(sp)
 1005c20:	dcc00317 	ldw	r19,12(sp)
 1005c24:	dc800217 	ldw	r18,8(sp)
 1005c28:	dc400117 	ldw	r17,4(sp)
 1005c2c:	dc000017 	ldw	r16,0(sp)
 1005c30:	dec00804 	addi	sp,sp,32
 1005c34:	f800283a 	ret
 1005c38:	002d883a 	mov	r22,zero
 1005c3c:	003ff206 	br	1005c08 <_fwalk+0x80>

01005c40 <__locale_charset>:
 1005c40:	d0a00317 	ldw	r2,-32756(gp)
 1005c44:	f800283a 	ret

01005c48 <_localeconv_r>:
 1005c48:	00804074 	movhi	r2,257
 1005c4c:	10ba8704 	addi	r2,r2,-5604
 1005c50:	f800283a 	ret

01005c54 <localeconv>:
 1005c54:	00804074 	movhi	r2,257
 1005c58:	1081d504 	addi	r2,r2,1876
 1005c5c:	11000017 	ldw	r4,0(r2)
 1005c60:	1005c481 	jmpi	1005c48 <_localeconv_r>

01005c64 <_setlocale_r>:
 1005c64:	defffc04 	addi	sp,sp,-16
 1005c68:	00c04074 	movhi	r3,257
 1005c6c:	18fa8204 	addi	r3,r3,-5624
 1005c70:	dc800215 	stw	r18,8(sp)
 1005c74:	dc400115 	stw	r17,4(sp)
 1005c78:	dc000015 	stw	r16,0(sp)
 1005c7c:	2023883a 	mov	r17,r4
 1005c80:	2825883a 	mov	r18,r5
 1005c84:	dfc00315 	stw	ra,12(sp)
 1005c88:	3021883a 	mov	r16,r6
 1005c8c:	3009883a 	mov	r4,r6
 1005c90:	180b883a 	mov	r5,r3
 1005c94:	30000926 	beq	r6,zero,1005cbc <_setlocale_r+0x58>
 1005c98:	10080e80 	call	10080e8 <strcmp>
 1005c9c:	8009883a 	mov	r4,r16
 1005ca0:	01404074 	movhi	r5,257
 1005ca4:	297a6d04 	addi	r5,r5,-5708
 1005ca8:	10000b1e 	bne	r2,zero,1005cd8 <_setlocale_r+0x74>
 1005cac:	8c000d15 	stw	r16,52(r17)
 1005cb0:	8c800c15 	stw	r18,48(r17)
 1005cb4:	00c04074 	movhi	r3,257
 1005cb8:	18fa8204 	addi	r3,r3,-5624
 1005cbc:	1805883a 	mov	r2,r3
 1005cc0:	dfc00317 	ldw	ra,12(sp)
 1005cc4:	dc800217 	ldw	r18,8(sp)
 1005cc8:	dc400117 	ldw	r17,4(sp)
 1005ccc:	dc000017 	ldw	r16,0(sp)
 1005cd0:	dec00404 	addi	sp,sp,16
 1005cd4:	f800283a 	ret
 1005cd8:	10080e80 	call	10080e8 <strcmp>
 1005cdc:	0007883a 	mov	r3,zero
 1005ce0:	103ff226 	beq	r2,zero,1005cac <_setlocale_r+0x48>
 1005ce4:	003ff506 	br	1005cbc <_setlocale_r+0x58>

01005ce8 <setlocale>:
 1005ce8:	01804074 	movhi	r6,257
 1005cec:	3181d504 	addi	r6,r6,1876
 1005cf0:	2007883a 	mov	r3,r4
 1005cf4:	31000017 	ldw	r4,0(r6)
 1005cf8:	280d883a 	mov	r6,r5
 1005cfc:	180b883a 	mov	r5,r3
 1005d00:	1005c641 	jmpi	1005c64 <_setlocale_r>

01005d04 <__smakebuf_r>:
 1005d04:	2880030b 	ldhu	r2,12(r5)
 1005d08:	deffed04 	addi	sp,sp,-76
 1005d0c:	dc401015 	stw	r17,64(sp)
 1005d10:	1080008c 	andi	r2,r2,2
 1005d14:	dc000f15 	stw	r16,60(sp)
 1005d18:	dfc01215 	stw	ra,72(sp)
 1005d1c:	dc801115 	stw	r18,68(sp)
 1005d20:	2821883a 	mov	r16,r5
 1005d24:	2023883a 	mov	r17,r4
 1005d28:	10000b26 	beq	r2,zero,1005d58 <__smakebuf_r+0x54>
 1005d2c:	28c010c4 	addi	r3,r5,67
 1005d30:	00800044 	movi	r2,1
 1005d34:	28800515 	stw	r2,20(r5)
 1005d38:	28c00415 	stw	r3,16(r5)
 1005d3c:	28c00015 	stw	r3,0(r5)
 1005d40:	dfc01217 	ldw	ra,72(sp)
 1005d44:	dc801117 	ldw	r18,68(sp)
 1005d48:	dc401017 	ldw	r17,64(sp)
 1005d4c:	dc000f17 	ldw	r16,60(sp)
 1005d50:	dec01304 	addi	sp,sp,76
 1005d54:	f800283a 	ret
 1005d58:	2940038f 	ldh	r5,14(r5)
 1005d5c:	28002116 	blt	r5,zero,1005de4 <__smakebuf_r+0xe0>
 1005d60:	d80d883a 	mov	r6,sp
 1005d64:	10084640 	call	1008464 <_fstat_r>
 1005d68:	10001e16 	blt	r2,zero,1005de4 <__smakebuf_r+0xe0>
 1005d6c:	d8800117 	ldw	r2,4(sp)
 1005d70:	00e00014 	movui	r3,32768
 1005d74:	113c000c 	andi	r4,r2,61440
 1005d78:	20c03126 	beq	r4,r3,1005e40 <__smakebuf_r+0x13c>
 1005d7c:	8080030b 	ldhu	r2,12(r16)
 1005d80:	00c80004 	movi	r3,8192
 1005d84:	10820014 	ori	r2,r2,2048
 1005d88:	8080030d 	sth	r2,12(r16)
 1005d8c:	20c01e26 	beq	r4,r3,1005e08 <__smakebuf_r+0x104>
 1005d90:	04810004 	movi	r18,1024
 1005d94:	8809883a 	mov	r4,r17
 1005d98:	900b883a 	mov	r5,r18
 1005d9c:	1005e980 	call	1005e98 <_malloc_r>
 1005da0:	1009883a 	mov	r4,r2
 1005da4:	10003126 	beq	r2,zero,1005e6c <__smakebuf_r+0x168>
 1005da8:	80c0030b 	ldhu	r3,12(r16)
 1005dac:	00804034 	movhi	r2,256
 1005db0:	10941c04 	addi	r2,r2,20592
 1005db4:	88800f15 	stw	r2,60(r17)
 1005db8:	18c02014 	ori	r3,r3,128
 1005dbc:	84800515 	stw	r18,20(r16)
 1005dc0:	80c0030d 	sth	r3,12(r16)
 1005dc4:	81000415 	stw	r4,16(r16)
 1005dc8:	81000015 	stw	r4,0(r16)
 1005dcc:	dfc01217 	ldw	ra,72(sp)
 1005dd0:	dc801117 	ldw	r18,68(sp)
 1005dd4:	dc401017 	ldw	r17,64(sp)
 1005dd8:	dc000f17 	ldw	r16,60(sp)
 1005ddc:	dec01304 	addi	sp,sp,76
 1005de0:	f800283a 	ret
 1005de4:	80c0030b 	ldhu	r3,12(r16)
 1005de8:	1880200c 	andi	r2,r3,128
 1005dec:	10000426 	beq	r2,zero,1005e00 <__smakebuf_r+0xfc>
 1005df0:	04801004 	movi	r18,64
 1005df4:	18820014 	ori	r2,r3,2048
 1005df8:	8080030d 	sth	r2,12(r16)
 1005dfc:	003fe506 	br	1005d94 <__smakebuf_r+0x90>
 1005e00:	04810004 	movi	r18,1024
 1005e04:	003ffb06 	br	1005df4 <__smakebuf_r+0xf0>
 1005e08:	8140038f 	ldh	r5,14(r16)
 1005e0c:	8809883a 	mov	r4,r17
 1005e10:	10084d80 	call	10084d8 <_isatty_r>
 1005e14:	103fde26 	beq	r2,zero,1005d90 <__smakebuf_r+0x8c>
 1005e18:	8080030b 	ldhu	r2,12(r16)
 1005e1c:	80c010c4 	addi	r3,r16,67
 1005e20:	04810004 	movi	r18,1024
 1005e24:	10800054 	ori	r2,r2,1
 1005e28:	8080030d 	sth	r2,12(r16)
 1005e2c:	00800044 	movi	r2,1
 1005e30:	80c00415 	stw	r3,16(r16)
 1005e34:	80800515 	stw	r2,20(r16)
 1005e38:	80c00015 	stw	r3,0(r16)
 1005e3c:	003fd506 	br	1005d94 <__smakebuf_r+0x90>
 1005e40:	80c00a17 	ldw	r3,40(r16)
 1005e44:	00804034 	movhi	r2,256
 1005e48:	109fe904 	addi	r2,r2,32676
 1005e4c:	18bfcb1e 	bne	r3,r2,1005d7c <__smakebuf_r+0x78>
 1005e50:	8080030b 	ldhu	r2,12(r16)
 1005e54:	00c10004 	movi	r3,1024
 1005e58:	1825883a 	mov	r18,r3
 1005e5c:	10c4b03a 	or	r2,r2,r3
 1005e60:	8080030d 	sth	r2,12(r16)
 1005e64:	80c01315 	stw	r3,76(r16)
 1005e68:	003fca06 	br	1005d94 <__smakebuf_r+0x90>
 1005e6c:	8100030b 	ldhu	r4,12(r16)
 1005e70:	2080800c 	andi	r2,r4,512
 1005e74:	103fb21e 	bne	r2,zero,1005d40 <__smakebuf_r+0x3c>
 1005e78:	80c010c4 	addi	r3,r16,67
 1005e7c:	21000094 	ori	r4,r4,2
 1005e80:	00800044 	movi	r2,1
 1005e84:	80800515 	stw	r2,20(r16)
 1005e88:	8100030d 	sth	r4,12(r16)
 1005e8c:	80c00415 	stw	r3,16(r16)
 1005e90:	80c00015 	stw	r3,0(r16)
 1005e94:	003faa06 	br	1005d40 <__smakebuf_r+0x3c>

01005e98 <_malloc_r>:
 1005e98:	defff604 	addi	sp,sp,-40
 1005e9c:	28c002c4 	addi	r3,r5,11
 1005ea0:	00800584 	movi	r2,22
 1005ea4:	dc800215 	stw	r18,8(sp)
 1005ea8:	dfc00915 	stw	ra,36(sp)
 1005eac:	df000815 	stw	fp,32(sp)
 1005eb0:	ddc00715 	stw	r23,28(sp)
 1005eb4:	dd800615 	stw	r22,24(sp)
 1005eb8:	dd400515 	stw	r21,20(sp)
 1005ebc:	dd000415 	stw	r20,16(sp)
 1005ec0:	dcc00315 	stw	r19,12(sp)
 1005ec4:	dc400115 	stw	r17,4(sp)
 1005ec8:	dc000015 	stw	r16,0(sp)
 1005ecc:	2025883a 	mov	r18,r4
 1005ed0:	10c01236 	bltu	r2,r3,1005f1c <_malloc_r+0x84>
 1005ed4:	04400404 	movi	r17,16
 1005ed8:	8940142e 	bgeu	r17,r5,1005f2c <_malloc_r+0x94>
 1005edc:	00800304 	movi	r2,12
 1005ee0:	0007883a 	mov	r3,zero
 1005ee4:	90800015 	stw	r2,0(r18)
 1005ee8:	1805883a 	mov	r2,r3
 1005eec:	dfc00917 	ldw	ra,36(sp)
 1005ef0:	df000817 	ldw	fp,32(sp)
 1005ef4:	ddc00717 	ldw	r23,28(sp)
 1005ef8:	dd800617 	ldw	r22,24(sp)
 1005efc:	dd400517 	ldw	r21,20(sp)
 1005f00:	dd000417 	ldw	r20,16(sp)
 1005f04:	dcc00317 	ldw	r19,12(sp)
 1005f08:	dc800217 	ldw	r18,8(sp)
 1005f0c:	dc400117 	ldw	r17,4(sp)
 1005f10:	dc000017 	ldw	r16,0(sp)
 1005f14:	dec00a04 	addi	sp,sp,40
 1005f18:	f800283a 	ret
 1005f1c:	00bffe04 	movi	r2,-8
 1005f20:	18a2703a 	and	r17,r3,r2
 1005f24:	883fed16 	blt	r17,zero,1005edc <_malloc_r+0x44>
 1005f28:	897fec36 	bltu	r17,r5,1005edc <_malloc_r+0x44>
 1005f2c:	9009883a 	mov	r4,r18
 1005f30:	100ad580 	call	100ad58 <__malloc_lock>
 1005f34:	00807dc4 	movi	r2,503
 1005f38:	14402b2e 	bgeu	r2,r17,1005fe8 <_malloc_r+0x150>
 1005f3c:	8806d27a 	srli	r3,r17,9
 1005f40:	18003f1e 	bne	r3,zero,1006040 <_malloc_r+0x1a8>
 1005f44:	880cd0fa 	srli	r6,r17,3
 1005f48:	300490fa 	slli	r2,r6,3
 1005f4c:	02c04074 	movhi	r11,257
 1005f50:	5afc1404 	addi	r11,r11,-4016
 1005f54:	12cb883a 	add	r5,r2,r11
 1005f58:	2c000317 	ldw	r16,12(r5)
 1005f5c:	580f883a 	mov	r7,r11
 1005f60:	2c00041e 	bne	r5,r16,1005f74 <_malloc_r+0xdc>
 1005f64:	00000a06 	br	1005f90 <_malloc_r+0xf8>
 1005f68:	1800860e 	bge	r3,zero,1006184 <_malloc_r+0x2ec>
 1005f6c:	84000317 	ldw	r16,12(r16)
 1005f70:	2c000726 	beq	r5,r16,1005f90 <_malloc_r+0xf8>
 1005f74:	80800117 	ldw	r2,4(r16)
 1005f78:	00ffff04 	movi	r3,-4
 1005f7c:	10c8703a 	and	r4,r2,r3
 1005f80:	2447c83a 	sub	r3,r4,r17
 1005f84:	008003c4 	movi	r2,15
 1005f88:	10fff70e 	bge	r2,r3,1005f68 <_malloc_r+0xd0>
 1005f8c:	31bfffc4 	addi	r6,r6,-1
 1005f90:	32400044 	addi	r9,r6,1
 1005f94:	02804074 	movhi	r10,257
 1005f98:	52bc1604 	addi	r10,r10,-4008
 1005f9c:	54000217 	ldw	r16,8(r10)
 1005fa0:	8280a026 	beq	r16,r10,1006224 <_malloc_r+0x38c>
 1005fa4:	80800117 	ldw	r2,4(r16)
 1005fa8:	00ffff04 	movi	r3,-4
 1005fac:	10ca703a 	and	r5,r2,r3
 1005fb0:	2c4dc83a 	sub	r6,r5,r17
 1005fb4:	008003c4 	movi	r2,15
 1005fb8:	11808316 	blt	r2,r6,10061c8 <_malloc_r+0x330>
 1005fbc:	52800315 	stw	r10,12(r10)
 1005fc0:	52800215 	stw	r10,8(r10)
 1005fc4:	30002916 	blt	r6,zero,100606c <_malloc_r+0x1d4>
 1005fc8:	8147883a 	add	r3,r16,r5
 1005fcc:	18800117 	ldw	r2,4(r3)
 1005fd0:	9009883a 	mov	r4,r18
 1005fd4:	10800054 	ori	r2,r2,1
 1005fd8:	18800115 	stw	r2,4(r3)
 1005fdc:	100ad780 	call	100ad78 <__malloc_unlock>
 1005fe0:	80c00204 	addi	r3,r16,8
 1005fe4:	003fc006 	br	1005ee8 <_malloc_r+0x50>
 1005fe8:	02c04074 	movhi	r11,257
 1005fec:	5afc1404 	addi	r11,r11,-4016
 1005ff0:	8ac5883a 	add	r2,r17,r11
 1005ff4:	14000317 	ldw	r16,12(r2)
 1005ff8:	580f883a 	mov	r7,r11
 1005ffc:	8806d0fa 	srli	r3,r17,3
 1006000:	14006c26 	beq	r2,r16,10061b4 <_malloc_r+0x31c>
 1006004:	80c00117 	ldw	r3,4(r16)
 1006008:	00bfff04 	movi	r2,-4
 100600c:	81800317 	ldw	r6,12(r16)
 1006010:	1886703a 	and	r3,r3,r2
 1006014:	80c7883a 	add	r3,r16,r3
 1006018:	18800117 	ldw	r2,4(r3)
 100601c:	81400217 	ldw	r5,8(r16)
 1006020:	9009883a 	mov	r4,r18
 1006024:	10800054 	ori	r2,r2,1
 1006028:	18800115 	stw	r2,4(r3)
 100602c:	31400215 	stw	r5,8(r6)
 1006030:	29800315 	stw	r6,12(r5)
 1006034:	100ad780 	call	100ad78 <__malloc_unlock>
 1006038:	80c00204 	addi	r3,r16,8
 100603c:	003faa06 	br	1005ee8 <_malloc_r+0x50>
 1006040:	00800104 	movi	r2,4
 1006044:	10c0052e 	bgeu	r2,r3,100605c <_malloc_r+0x1c4>
 1006048:	00800504 	movi	r2,20
 100604c:	10c07836 	bltu	r2,r3,1006230 <_malloc_r+0x398>
 1006050:	198016c4 	addi	r6,r3,91
 1006054:	300490fa 	slli	r2,r6,3
 1006058:	003fbc06 	br	1005f4c <_malloc_r+0xb4>
 100605c:	8804d1ba 	srli	r2,r17,6
 1006060:	11800e04 	addi	r6,r2,56
 1006064:	300490fa 	slli	r2,r6,3
 1006068:	003fb806 	br	1005f4c <_malloc_r+0xb4>
 100606c:	00807fc4 	movi	r2,511
 1006070:	1140bb36 	bltu	r2,r5,1006360 <_malloc_r+0x4c8>
 1006074:	2806d0fa 	srli	r3,r5,3
 1006078:	573ffe04 	addi	fp,r10,-8
 100607c:	00800044 	movi	r2,1
 1006080:	180890fa 	slli	r4,r3,3
 1006084:	1807d0ba 	srai	r3,r3,2
 1006088:	e1c00117 	ldw	r7,4(fp)
 100608c:	5909883a 	add	r4,r11,r4
 1006090:	21400217 	ldw	r5,8(r4)
 1006094:	10c4983a 	sll	r2,r2,r3
 1006098:	81000315 	stw	r4,12(r16)
 100609c:	81400215 	stw	r5,8(r16)
 10060a0:	388eb03a 	or	r7,r7,r2
 10060a4:	2c000315 	stw	r16,12(r5)
 10060a8:	24000215 	stw	r16,8(r4)
 10060ac:	e1c00115 	stw	r7,4(fp)
 10060b0:	4807883a 	mov	r3,r9
 10060b4:	4800cd16 	blt	r9,zero,10063ec <_malloc_r+0x554>
 10060b8:	1807d0ba 	srai	r3,r3,2
 10060bc:	00800044 	movi	r2,1
 10060c0:	10c8983a 	sll	r4,r2,r3
 10060c4:	39004436 	bltu	r7,r4,10061d8 <_malloc_r+0x340>
 10060c8:	21c4703a 	and	r2,r4,r7
 10060cc:	10000a1e 	bne	r2,zero,10060f8 <_malloc_r+0x260>
 10060d0:	2109883a 	add	r4,r4,r4
 10060d4:	00bfff04 	movi	r2,-4
 10060d8:	4884703a 	and	r2,r9,r2
 10060dc:	3906703a 	and	r3,r7,r4
 10060e0:	12400104 	addi	r9,r2,4
 10060e4:	1800041e 	bne	r3,zero,10060f8 <_malloc_r+0x260>
 10060e8:	2109883a 	add	r4,r4,r4
 10060ec:	3904703a 	and	r2,r7,r4
 10060f0:	4a400104 	addi	r9,r9,4
 10060f4:	103ffc26 	beq	r2,zero,10060e8 <_malloc_r+0x250>
 10060f8:	480490fa 	slli	r2,r9,3
 10060fc:	4819883a 	mov	r12,r9
 1006100:	023fff04 	movi	r8,-4
 1006104:	589b883a 	add	r13,r11,r2
 1006108:	6807883a 	mov	r3,r13
 100610c:	014003c4 	movi	r5,15
 1006110:	1c000317 	ldw	r16,12(r3)
 1006114:	1c00041e 	bne	r3,r16,1006128 <_malloc_r+0x290>
 1006118:	0000a706 	br	10063b8 <_malloc_r+0x520>
 100611c:	3000ab0e 	bge	r6,zero,10063cc <_malloc_r+0x534>
 1006120:	84000317 	ldw	r16,12(r16)
 1006124:	1c00a426 	beq	r3,r16,10063b8 <_malloc_r+0x520>
 1006128:	80800117 	ldw	r2,4(r16)
 100612c:	1204703a 	and	r2,r2,r8
 1006130:	144dc83a 	sub	r6,r2,r17
 1006134:	29bff90e 	bge	r5,r6,100611c <_malloc_r+0x284>
 1006138:	81000317 	ldw	r4,12(r16)
 100613c:	80c00217 	ldw	r3,8(r16)
 1006140:	89400054 	ori	r5,r17,1
 1006144:	8445883a 	add	r2,r16,r17
 1006148:	20c00215 	stw	r3,8(r4)
 100614c:	19000315 	stw	r4,12(r3)
 1006150:	81400115 	stw	r5,4(r16)
 1006154:	1187883a 	add	r3,r2,r6
 1006158:	31000054 	ori	r4,r6,1
 100615c:	50800315 	stw	r2,12(r10)
 1006160:	50800215 	stw	r2,8(r10)
 1006164:	19800015 	stw	r6,0(r3)
 1006168:	11000115 	stw	r4,4(r2)
 100616c:	12800215 	stw	r10,8(r2)
 1006170:	12800315 	stw	r10,12(r2)
 1006174:	9009883a 	mov	r4,r18
 1006178:	100ad780 	call	100ad78 <__malloc_unlock>
 100617c:	80c00204 	addi	r3,r16,8
 1006180:	003f5906 	br	1005ee8 <_malloc_r+0x50>
 1006184:	8109883a 	add	r4,r16,r4
 1006188:	20800117 	ldw	r2,4(r4)
 100618c:	80c00217 	ldw	r3,8(r16)
 1006190:	81400317 	ldw	r5,12(r16)
 1006194:	10800054 	ori	r2,r2,1
 1006198:	20800115 	stw	r2,4(r4)
 100619c:	28c00215 	stw	r3,8(r5)
 10061a0:	19400315 	stw	r5,12(r3)
 10061a4:	9009883a 	mov	r4,r18
 10061a8:	100ad780 	call	100ad78 <__malloc_unlock>
 10061ac:	80c00204 	addi	r3,r16,8
 10061b0:	003f4d06 	br	1005ee8 <_malloc_r+0x50>
 10061b4:	80800204 	addi	r2,r16,8
 10061b8:	14000317 	ldw	r16,12(r2)
 10061bc:	143f911e 	bne	r2,r16,1006004 <_malloc_r+0x16c>
 10061c0:	1a400084 	addi	r9,r3,2
 10061c4:	003f7306 	br	1005f94 <_malloc_r+0xfc>
 10061c8:	88c00054 	ori	r3,r17,1
 10061cc:	8445883a 	add	r2,r16,r17
 10061d0:	80c00115 	stw	r3,4(r16)
 10061d4:	003fdf06 	br	1006154 <_malloc_r+0x2bc>
 10061d8:	e4000217 	ldw	r16,8(fp)
 10061dc:	00bfff04 	movi	r2,-4
 10061e0:	80c00117 	ldw	r3,4(r16)
 10061e4:	802d883a 	mov	r22,r16
 10061e8:	18aa703a 	and	r21,r3,r2
 10061ec:	ac401636 	bltu	r21,r17,1006248 <_malloc_r+0x3b0>
 10061f0:	ac49c83a 	sub	r4,r21,r17
 10061f4:	008003c4 	movi	r2,15
 10061f8:	1100130e 	bge	r2,r4,1006248 <_malloc_r+0x3b0>
 10061fc:	88800054 	ori	r2,r17,1
 1006200:	8447883a 	add	r3,r16,r17
 1006204:	80800115 	stw	r2,4(r16)
 1006208:	20800054 	ori	r2,r4,1
 100620c:	18800115 	stw	r2,4(r3)
 1006210:	e0c00215 	stw	r3,8(fp)
 1006214:	9009883a 	mov	r4,r18
 1006218:	100ad780 	call	100ad78 <__malloc_unlock>
 100621c:	80c00204 	addi	r3,r16,8
 1006220:	003f3106 	br	1005ee8 <_malloc_r+0x50>
 1006224:	39c00117 	ldw	r7,4(r7)
 1006228:	573ffe04 	addi	fp,r10,-8
 100622c:	003fa006 	br	10060b0 <_malloc_r+0x218>
 1006230:	00801504 	movi	r2,84
 1006234:	10c06736 	bltu	r2,r3,10063d4 <_malloc_r+0x53c>
 1006238:	8804d33a 	srli	r2,r17,12
 100623c:	11801b84 	addi	r6,r2,110
 1006240:	300490fa 	slli	r2,r6,3
 1006244:	003f4106 	br	1005f4c <_malloc_r+0xb4>
 1006248:	d0a6e717 	ldw	r2,-25700(gp)
 100624c:	d0e00517 	ldw	r3,-32748(gp)
 1006250:	053fffc4 	movi	r20,-1
 1006254:	10800404 	addi	r2,r2,16
 1006258:	88a7883a 	add	r19,r17,r2
 100625c:	1d000326 	beq	r3,r20,100626c <_malloc_r+0x3d4>
 1006260:	98c3ffc4 	addi	r3,r19,4095
 1006264:	00bc0004 	movi	r2,-4096
 1006268:	18a6703a 	and	r19,r3,r2
 100626c:	9009883a 	mov	r4,r18
 1006270:	980b883a 	mov	r5,r19
 1006274:	1007f2c0 	call	1007f2c <_sbrk_r>
 1006278:	1009883a 	mov	r4,r2
 100627c:	15000426 	beq	r2,r20,1006290 <_malloc_r+0x3f8>
 1006280:	854b883a 	add	r5,r16,r21
 1006284:	1029883a 	mov	r20,r2
 1006288:	11405a2e 	bgeu	r2,r5,10063f4 <_malloc_r+0x55c>
 100628c:	87000c26 	beq	r16,fp,10062c0 <_malloc_r+0x428>
 1006290:	e4000217 	ldw	r16,8(fp)
 1006294:	80c00117 	ldw	r3,4(r16)
 1006298:	00bfff04 	movi	r2,-4
 100629c:	1884703a 	and	r2,r3,r2
 10062a0:	14400336 	bltu	r2,r17,10062b0 <_malloc_r+0x418>
 10062a4:	1449c83a 	sub	r4,r2,r17
 10062a8:	008003c4 	movi	r2,15
 10062ac:	113fd316 	blt	r2,r4,10061fc <_malloc_r+0x364>
 10062b0:	9009883a 	mov	r4,r18
 10062b4:	100ad780 	call	100ad78 <__malloc_unlock>
 10062b8:	0007883a 	mov	r3,zero
 10062bc:	003f0a06 	br	1005ee8 <_malloc_r+0x50>
 10062c0:	05c04074 	movhi	r23,257
 10062c4:	bdc8c804 	addi	r23,r23,8992
 10062c8:	b8800017 	ldw	r2,0(r23)
 10062cc:	988d883a 	add	r6,r19,r2
 10062d0:	b9800015 	stw	r6,0(r23)
 10062d4:	d0e00517 	ldw	r3,-32748(gp)
 10062d8:	00bfffc4 	movi	r2,-1
 10062dc:	18808e26 	beq	r3,r2,1006518 <_malloc_r+0x680>
 10062e0:	2145c83a 	sub	r2,r4,r5
 10062e4:	3085883a 	add	r2,r6,r2
 10062e8:	b8800015 	stw	r2,0(r23)
 10062ec:	20c001cc 	andi	r3,r4,7
 10062f0:	18005f1e 	bne	r3,zero,1006470 <_malloc_r+0x5d8>
 10062f4:	000b883a 	mov	r5,zero
 10062f8:	a4c5883a 	add	r2,r20,r19
 10062fc:	1083ffcc 	andi	r2,r2,4095
 1006300:	00c40004 	movi	r3,4096
 1006304:	1887c83a 	sub	r3,r3,r2
 1006308:	28e7883a 	add	r19,r5,r3
 100630c:	9009883a 	mov	r4,r18
 1006310:	980b883a 	mov	r5,r19
 1006314:	1007f2c0 	call	1007f2c <_sbrk_r>
 1006318:	1007883a 	mov	r3,r2
 100631c:	00bfffc4 	movi	r2,-1
 1006320:	18807a26 	beq	r3,r2,100650c <_malloc_r+0x674>
 1006324:	1d05c83a 	sub	r2,r3,r20
 1006328:	9885883a 	add	r2,r19,r2
 100632c:	10c00054 	ori	r3,r2,1
 1006330:	b8800017 	ldw	r2,0(r23)
 1006334:	a021883a 	mov	r16,r20
 1006338:	a0c00115 	stw	r3,4(r20)
 100633c:	9885883a 	add	r2,r19,r2
 1006340:	b8800015 	stw	r2,0(r23)
 1006344:	e5000215 	stw	r20,8(fp)
 1006348:	b7003626 	beq	r22,fp,1006424 <_malloc_r+0x58c>
 100634c:	018003c4 	movi	r6,15
 1006350:	35404b36 	bltu	r6,r21,1006480 <_malloc_r+0x5e8>
 1006354:	00800044 	movi	r2,1
 1006358:	a0800115 	stw	r2,4(r20)
 100635c:	003fcd06 	br	1006294 <_malloc_r+0x3fc>
 1006360:	2808d27a 	srli	r4,r5,9
 1006364:	2000371e 	bne	r4,zero,1006444 <_malloc_r+0x5ac>
 1006368:	2808d0fa 	srli	r4,r5,3
 100636c:	200690fa 	slli	r3,r4,3
 1006370:	1ad1883a 	add	r8,r3,r11
 1006374:	41800217 	ldw	r6,8(r8)
 1006378:	41805b26 	beq	r8,r6,10064e8 <_malloc_r+0x650>
 100637c:	30800117 	ldw	r2,4(r6)
 1006380:	00ffff04 	movi	r3,-4
 1006384:	10c4703a 	and	r2,r2,r3
 1006388:	2880022e 	bgeu	r5,r2,1006394 <_malloc_r+0x4fc>
 100638c:	31800217 	ldw	r6,8(r6)
 1006390:	41bffa1e 	bne	r8,r6,100637c <_malloc_r+0x4e4>
 1006394:	32000317 	ldw	r8,12(r6)
 1006398:	39c00117 	ldw	r7,4(r7)
 100639c:	82000315 	stw	r8,12(r16)
 10063a0:	81800215 	stw	r6,8(r16)
 10063a4:	07004074 	movhi	fp,257
 10063a8:	e73c1404 	addi	fp,fp,-4016
 10063ac:	34000315 	stw	r16,12(r6)
 10063b0:	44000215 	stw	r16,8(r8)
 10063b4:	003f3e06 	br	10060b0 <_malloc_r+0x218>
 10063b8:	63000044 	addi	r12,r12,1
 10063bc:	608000cc 	andi	r2,r12,3
 10063c0:	10005d26 	beq	r2,zero,1006538 <_malloc_r+0x6a0>
 10063c4:	18c00204 	addi	r3,r3,8
 10063c8:	003f5106 	br	1006110 <_malloc_r+0x278>
 10063cc:	8089883a 	add	r4,r16,r2
 10063d0:	003f6d06 	br	1006188 <_malloc_r+0x2f0>
 10063d4:	00805504 	movi	r2,340
 10063d8:	10c02036 	bltu	r2,r3,100645c <_malloc_r+0x5c4>
 10063dc:	8804d3fa 	srli	r2,r17,15
 10063e0:	11801dc4 	addi	r6,r2,119
 10063e4:	300490fa 	slli	r2,r6,3
 10063e8:	003ed806 	br	1005f4c <_malloc_r+0xb4>
 10063ec:	48c000c4 	addi	r3,r9,3
 10063f0:	003f3106 	br	10060b8 <_malloc_r+0x220>
 10063f4:	05c04074 	movhi	r23,257
 10063f8:	bdc8c804 	addi	r23,r23,8992
 10063fc:	b8800017 	ldw	r2,0(r23)
 1006400:	988d883a 	add	r6,r19,r2
 1006404:	b9800015 	stw	r6,0(r23)
 1006408:	293fb21e 	bne	r5,r4,10062d4 <_malloc_r+0x43c>
 100640c:	2083ffcc 	andi	r2,r4,4095
 1006410:	103fb01e 	bne	r2,zero,10062d4 <_malloc_r+0x43c>
 1006414:	e4000217 	ldw	r16,8(fp)
 1006418:	9d45883a 	add	r2,r19,r21
 100641c:	10800054 	ori	r2,r2,1
 1006420:	80800115 	stw	r2,4(r16)
 1006424:	b8c00017 	ldw	r3,0(r23)
 1006428:	d0a6e817 	ldw	r2,-25696(gp)
 100642c:	10c0012e 	bgeu	r2,r3,1006434 <_malloc_r+0x59c>
 1006430:	d0e6e815 	stw	r3,-25696(gp)
 1006434:	d0a6e917 	ldw	r2,-25692(gp)
 1006438:	10ff962e 	bgeu	r2,r3,1006294 <_malloc_r+0x3fc>
 100643c:	d0e6e915 	stw	r3,-25692(gp)
 1006440:	003f9406 	br	1006294 <_malloc_r+0x3fc>
 1006444:	00800104 	movi	r2,4
 1006448:	11001e36 	bltu	r2,r4,10064c4 <_malloc_r+0x62c>
 100644c:	2804d1ba 	srli	r2,r5,6
 1006450:	11000e04 	addi	r4,r2,56
 1006454:	200690fa 	slli	r3,r4,3
 1006458:	003fc506 	br	1006370 <_malloc_r+0x4d8>
 100645c:	00815504 	movi	r2,1364
 1006460:	10c01d2e 	bgeu	r2,r3,10064d8 <_malloc_r+0x640>
 1006464:	01801f84 	movi	r6,126
 1006468:	0080fc04 	movi	r2,1008
 100646c:	003eb706 	br	1005f4c <_malloc_r+0xb4>
 1006470:	00800204 	movi	r2,8
 1006474:	10cbc83a 	sub	r5,r2,r3
 1006478:	2169883a 	add	r20,r4,r5
 100647c:	003f9e06 	br	10062f8 <_malloc_r+0x460>
 1006480:	00bffe04 	movi	r2,-8
 1006484:	a93ffd04 	addi	r4,r21,-12
 1006488:	2088703a 	and	r4,r4,r2
 100648c:	b10b883a 	add	r5,r22,r4
 1006490:	00c00144 	movi	r3,5
 1006494:	28c00215 	stw	r3,8(r5)
 1006498:	28c00115 	stw	r3,4(r5)
 100649c:	b0800117 	ldw	r2,4(r22)
 10064a0:	1080004c 	andi	r2,r2,1
 10064a4:	2084b03a 	or	r2,r4,r2
 10064a8:	b0800115 	stw	r2,4(r22)
 10064ac:	313fdd2e 	bgeu	r6,r4,1006424 <_malloc_r+0x58c>
 10064b0:	b1400204 	addi	r5,r22,8
 10064b4:	9009883a 	mov	r4,r18
 10064b8:	10053100 	call	1005310 <_free_r>
 10064bc:	e4000217 	ldw	r16,8(fp)
 10064c0:	003fd806 	br	1006424 <_malloc_r+0x58c>
 10064c4:	00800504 	movi	r2,20
 10064c8:	11001536 	bltu	r2,r4,1006520 <_malloc_r+0x688>
 10064cc:	210016c4 	addi	r4,r4,91
 10064d0:	200690fa 	slli	r3,r4,3
 10064d4:	003fa606 	br	1006370 <_malloc_r+0x4d8>
 10064d8:	8804d4ba 	srli	r2,r17,18
 10064dc:	11801f04 	addi	r6,r2,124
 10064e0:	300490fa 	slli	r2,r6,3
 10064e4:	003e9906 	br	1005f4c <_malloc_r+0xb4>
 10064e8:	2009d0ba 	srai	r4,r4,2
 10064ec:	01404074 	movhi	r5,257
 10064f0:	297c1404 	addi	r5,r5,-4016
 10064f4:	00c00044 	movi	r3,1
 10064f8:	28800117 	ldw	r2,4(r5)
 10064fc:	1906983a 	sll	r3,r3,r4
 1006500:	10c4b03a 	or	r2,r2,r3
 1006504:	28800115 	stw	r2,4(r5)
 1006508:	003fa306 	br	1006398 <_malloc_r+0x500>
 100650c:	0027883a 	mov	r19,zero
 1006510:	00c00044 	movi	r3,1
 1006514:	003f8606 	br	1006330 <_malloc_r+0x498>
 1006518:	d1200515 	stw	r4,-32748(gp)
 100651c:	003f7306 	br	10062ec <_malloc_r+0x454>
 1006520:	00801504 	movi	r2,84
 1006524:	11001936 	bltu	r2,r4,100658c <_malloc_r+0x6f4>
 1006528:	2804d33a 	srli	r2,r5,12
 100652c:	11001b84 	addi	r4,r2,110
 1006530:	200690fa 	slli	r3,r4,3
 1006534:	003f8e06 	br	1006370 <_malloc_r+0x4d8>
 1006538:	480b883a 	mov	r5,r9
 100653c:	6807883a 	mov	r3,r13
 1006540:	288000cc 	andi	r2,r5,3
 1006544:	18fffe04 	addi	r3,r3,-8
 1006548:	297fffc4 	addi	r5,r5,-1
 100654c:	10001526 	beq	r2,zero,10065a4 <_malloc_r+0x70c>
 1006550:	18800217 	ldw	r2,8(r3)
 1006554:	10fffa26 	beq	r2,r3,1006540 <_malloc_r+0x6a8>
 1006558:	2109883a 	add	r4,r4,r4
 100655c:	393f1e36 	bltu	r7,r4,10061d8 <_malloc_r+0x340>
 1006560:	203f1d26 	beq	r4,zero,10061d8 <_malloc_r+0x340>
 1006564:	21c4703a 	and	r2,r4,r7
 1006568:	10000226 	beq	r2,zero,1006574 <_malloc_r+0x6dc>
 100656c:	6013883a 	mov	r9,r12
 1006570:	003ee106 	br	10060f8 <_malloc_r+0x260>
 1006574:	2109883a 	add	r4,r4,r4
 1006578:	3904703a 	and	r2,r7,r4
 100657c:	63000104 	addi	r12,r12,4
 1006580:	103ffc26 	beq	r2,zero,1006574 <_malloc_r+0x6dc>
 1006584:	6013883a 	mov	r9,r12
 1006588:	003edb06 	br	10060f8 <_malloc_r+0x260>
 100658c:	00805504 	movi	r2,340
 1006590:	11000836 	bltu	r2,r4,10065b4 <_malloc_r+0x71c>
 1006594:	2804d3fa 	srli	r2,r5,15
 1006598:	11001dc4 	addi	r4,r2,119
 100659c:	200690fa 	slli	r3,r4,3
 10065a0:	003f7306 	br	1006370 <_malloc_r+0x4d8>
 10065a4:	0104303a 	nor	r2,zero,r4
 10065a8:	388e703a 	and	r7,r7,r2
 10065ac:	e1c00115 	stw	r7,4(fp)
 10065b0:	003fe906 	br	1006558 <_malloc_r+0x6c0>
 10065b4:	00815504 	movi	r2,1364
 10065b8:	1100032e 	bgeu	r2,r4,10065c8 <_malloc_r+0x730>
 10065bc:	01001f84 	movi	r4,126
 10065c0:	00c0fc04 	movi	r3,1008
 10065c4:	003f6a06 	br	1006370 <_malloc_r+0x4d8>
 10065c8:	2804d4ba 	srli	r2,r5,18
 10065cc:	11001f04 	addi	r4,r2,124
 10065d0:	200690fa 	slli	r3,r4,3
 10065d4:	003f6606 	br	1006370 <_malloc_r+0x4d8>

010065d8 <memchr>:
 10065d8:	008000c4 	movi	r2,3
 10065dc:	29403fcc 	andi	r5,r5,255
 10065e0:	2007883a 	mov	r3,r4
 10065e4:	1180022e 	bgeu	r2,r6,10065f0 <memchr+0x18>
 10065e8:	2084703a 	and	r2,r4,r2
 10065ec:	10000b26 	beq	r2,zero,100661c <memchr+0x44>
 10065f0:	313fffc4 	addi	r4,r6,-1
 10065f4:	3000051e 	bne	r6,zero,100660c <memchr+0x34>
 10065f8:	00002c06 	br	10066ac <memchr+0xd4>
 10065fc:	213fffc4 	addi	r4,r4,-1
 1006600:	00bfffc4 	movi	r2,-1
 1006604:	18c00044 	addi	r3,r3,1
 1006608:	20802826 	beq	r4,r2,10066ac <memchr+0xd4>
 100660c:	18800003 	ldbu	r2,0(r3)
 1006610:	28bffa1e 	bne	r5,r2,10065fc <memchr+0x24>
 1006614:	1805883a 	mov	r2,r3
 1006618:	f800283a 	ret
 100661c:	0011883a 	mov	r8,zero
 1006620:	0007883a 	mov	r3,zero
 1006624:	01c00104 	movi	r7,4
 1006628:	4004923a 	slli	r2,r8,8
 100662c:	18c00044 	addi	r3,r3,1
 1006630:	1151883a 	add	r8,r2,r5
 1006634:	19fffc1e 	bne	r3,r7,1006628 <memchr+0x50>
 1006638:	02bfbff4 	movhi	r10,65279
 100663c:	52bfbfc4 	addi	r10,r10,-257
 1006640:	02602074 	movhi	r9,32897
 1006644:	4a602004 	addi	r9,r9,-32640
 1006648:	02c000c4 	movi	r11,3
 100664c:	20800017 	ldw	r2,0(r4)
 1006650:	31bfff04 	addi	r6,r6,-4
 1006654:	200f883a 	mov	r7,r4
 1006658:	1204f03a 	xor	r2,r2,r8
 100665c:	1287883a 	add	r3,r2,r10
 1006660:	1a46703a 	and	r3,r3,r9
 1006664:	0084303a 	nor	r2,zero,r2
 1006668:	10c4703a 	and	r2,r2,r3
 100666c:	10000b26 	beq	r2,zero,100669c <memchr+0xc4>
 1006670:	20800003 	ldbu	r2,0(r4)
 1006674:	28800f26 	beq	r5,r2,10066b4 <memchr+0xdc>
 1006678:	20800043 	ldbu	r2,1(r4)
 100667c:	21c00044 	addi	r7,r4,1
 1006680:	28800c26 	beq	r5,r2,10066b4 <memchr+0xdc>
 1006684:	20800083 	ldbu	r2,2(r4)
 1006688:	21c00084 	addi	r7,r4,2
 100668c:	28800926 	beq	r5,r2,10066b4 <memchr+0xdc>
 1006690:	208000c3 	ldbu	r2,3(r4)
 1006694:	21c000c4 	addi	r7,r4,3
 1006698:	28800626 	beq	r5,r2,10066b4 <memchr+0xdc>
 100669c:	21000104 	addi	r4,r4,4
 10066a0:	59bfea36 	bltu	r11,r6,100664c <memchr+0x74>
 10066a4:	2007883a 	mov	r3,r4
 10066a8:	003fd106 	br	10065f0 <memchr+0x18>
 10066ac:	0005883a 	mov	r2,zero
 10066b0:	f800283a 	ret
 10066b4:	3805883a 	mov	r2,r7
 10066b8:	f800283a 	ret

010066bc <memcpy>:
 10066bc:	01c003c4 	movi	r7,15
 10066c0:	2007883a 	mov	r3,r4
 10066c4:	3980032e 	bgeu	r7,r6,10066d4 <memcpy+0x18>
 10066c8:	2904b03a 	or	r2,r5,r4
 10066cc:	108000cc 	andi	r2,r2,3
 10066d0:	10000926 	beq	r2,zero,10066f8 <memcpy+0x3c>
 10066d4:	30000626 	beq	r6,zero,10066f0 <memcpy+0x34>
 10066d8:	30cd883a 	add	r6,r6,r3
 10066dc:	28800003 	ldbu	r2,0(r5)
 10066e0:	29400044 	addi	r5,r5,1
 10066e4:	18800005 	stb	r2,0(r3)
 10066e8:	18c00044 	addi	r3,r3,1
 10066ec:	30fffb1e 	bne	r6,r3,10066dc <memcpy+0x20>
 10066f0:	2005883a 	mov	r2,r4
 10066f4:	f800283a 	ret
 10066f8:	3811883a 	mov	r8,r7
 10066fc:	200f883a 	mov	r7,r4
 1006700:	28c00017 	ldw	r3,0(r5)
 1006704:	31bffc04 	addi	r6,r6,-16
 1006708:	38c00015 	stw	r3,0(r7)
 100670c:	28800117 	ldw	r2,4(r5)
 1006710:	38800115 	stw	r2,4(r7)
 1006714:	28c00217 	ldw	r3,8(r5)
 1006718:	38c00215 	stw	r3,8(r7)
 100671c:	28800317 	ldw	r2,12(r5)
 1006720:	29400404 	addi	r5,r5,16
 1006724:	38800315 	stw	r2,12(r7)
 1006728:	39c00404 	addi	r7,r7,16
 100672c:	41bff436 	bltu	r8,r6,1006700 <memcpy+0x44>
 1006730:	008000c4 	movi	r2,3
 1006734:	1180072e 	bgeu	r2,r6,1006754 <memcpy+0x98>
 1006738:	1007883a 	mov	r3,r2
 100673c:	28800017 	ldw	r2,0(r5)
 1006740:	31bfff04 	addi	r6,r6,-4
 1006744:	29400104 	addi	r5,r5,4
 1006748:	38800015 	stw	r2,0(r7)
 100674c:	39c00104 	addi	r7,r7,4
 1006750:	19bffa36 	bltu	r3,r6,100673c <memcpy+0x80>
 1006754:	3807883a 	mov	r3,r7
 1006758:	003fde06 	br	10066d4 <memcpy+0x18>

0100675c <memmove>:
 100675c:	2807883a 	mov	r3,r5
 1006760:	2011883a 	mov	r8,r4
 1006764:	29000c2e 	bgeu	r5,r4,1006798 <memmove+0x3c>
 1006768:	298f883a 	add	r7,r5,r6
 100676c:	21c00a2e 	bgeu	r4,r7,1006798 <memmove+0x3c>
 1006770:	30000726 	beq	r6,zero,1006790 <memmove+0x34>
 1006774:	2187883a 	add	r3,r4,r6
 1006778:	198dc83a 	sub	r6,r3,r6
 100677c:	39ffffc4 	addi	r7,r7,-1
 1006780:	38800003 	ldbu	r2,0(r7)
 1006784:	18ffffc4 	addi	r3,r3,-1
 1006788:	18800005 	stb	r2,0(r3)
 100678c:	19bffb1e 	bne	r3,r6,100677c <memmove+0x20>
 1006790:	2005883a 	mov	r2,r4
 1006794:	f800283a 	ret
 1006798:	01c003c4 	movi	r7,15
 100679c:	39800a36 	bltu	r7,r6,10067c8 <memmove+0x6c>
 10067a0:	303ffb26 	beq	r6,zero,1006790 <memmove+0x34>
 10067a4:	400f883a 	mov	r7,r8
 10067a8:	320d883a 	add	r6,r6,r8
 10067ac:	28800003 	ldbu	r2,0(r5)
 10067b0:	29400044 	addi	r5,r5,1
 10067b4:	38800005 	stb	r2,0(r7)
 10067b8:	39c00044 	addi	r7,r7,1
 10067bc:	39bffb1e 	bne	r7,r6,10067ac <memmove+0x50>
 10067c0:	2005883a 	mov	r2,r4
 10067c4:	f800283a 	ret
 10067c8:	1904b03a 	or	r2,r3,r4
 10067cc:	108000cc 	andi	r2,r2,3
 10067d0:	103ff31e 	bne	r2,zero,10067a0 <memmove+0x44>
 10067d4:	3811883a 	mov	r8,r7
 10067d8:	180b883a 	mov	r5,r3
 10067dc:	200f883a 	mov	r7,r4
 10067e0:	28c00017 	ldw	r3,0(r5)
 10067e4:	31bffc04 	addi	r6,r6,-16
 10067e8:	38c00015 	stw	r3,0(r7)
 10067ec:	28800117 	ldw	r2,4(r5)
 10067f0:	38800115 	stw	r2,4(r7)
 10067f4:	28c00217 	ldw	r3,8(r5)
 10067f8:	38c00215 	stw	r3,8(r7)
 10067fc:	28800317 	ldw	r2,12(r5)
 1006800:	29400404 	addi	r5,r5,16
 1006804:	38800315 	stw	r2,12(r7)
 1006808:	39c00404 	addi	r7,r7,16
 100680c:	41bff436 	bltu	r8,r6,10067e0 <memmove+0x84>
 1006810:	008000c4 	movi	r2,3
 1006814:	1180072e 	bgeu	r2,r6,1006834 <memmove+0xd8>
 1006818:	1007883a 	mov	r3,r2
 100681c:	28800017 	ldw	r2,0(r5)
 1006820:	31bfff04 	addi	r6,r6,-4
 1006824:	29400104 	addi	r5,r5,4
 1006828:	38800015 	stw	r2,0(r7)
 100682c:	39c00104 	addi	r7,r7,4
 1006830:	19bffa36 	bltu	r3,r6,100681c <memmove+0xc0>
 1006834:	3811883a 	mov	r8,r7
 1006838:	003fd906 	br	10067a0 <memmove+0x44>

0100683c <memset>:
 100683c:	008000c4 	movi	r2,3
 1006840:	29403fcc 	andi	r5,r5,255
 1006844:	2007883a 	mov	r3,r4
 1006848:	1180022e 	bgeu	r2,r6,1006854 <memset+0x18>
 100684c:	2084703a 	and	r2,r4,r2
 1006850:	10000826 	beq	r2,zero,1006874 <memset+0x38>
 1006854:	30000526 	beq	r6,zero,100686c <memset+0x30>
 1006858:	2805883a 	mov	r2,r5
 100685c:	30cd883a 	add	r6,r6,r3
 1006860:	18800005 	stb	r2,0(r3)
 1006864:	18c00044 	addi	r3,r3,1
 1006868:	19bffd1e 	bne	r3,r6,1006860 <memset+0x24>
 100686c:	2005883a 	mov	r2,r4
 1006870:	f800283a 	ret
 1006874:	2804923a 	slli	r2,r5,8
 1006878:	020003c4 	movi	r8,15
 100687c:	200f883a 	mov	r7,r4
 1006880:	2884b03a 	or	r2,r5,r2
 1006884:	1006943a 	slli	r3,r2,16
 1006888:	10c6b03a 	or	r3,r2,r3
 100688c:	41800a2e 	bgeu	r8,r6,10068b8 <memset+0x7c>
 1006890:	4005883a 	mov	r2,r8
 1006894:	31bffc04 	addi	r6,r6,-16
 1006898:	38c00015 	stw	r3,0(r7)
 100689c:	38c00115 	stw	r3,4(r7)
 10068a0:	38c00215 	stw	r3,8(r7)
 10068a4:	38c00315 	stw	r3,12(r7)
 10068a8:	39c00404 	addi	r7,r7,16
 10068ac:	11bff936 	bltu	r2,r6,1006894 <memset+0x58>
 10068b0:	008000c4 	movi	r2,3
 10068b4:	1180052e 	bgeu	r2,r6,10068cc <memset+0x90>
 10068b8:	31bfff04 	addi	r6,r6,-4
 10068bc:	008000c4 	movi	r2,3
 10068c0:	38c00015 	stw	r3,0(r7)
 10068c4:	39c00104 	addi	r7,r7,4
 10068c8:	11bffb36 	bltu	r2,r6,10068b8 <memset+0x7c>
 10068cc:	3807883a 	mov	r3,r7
 10068d0:	003fe006 	br	1006854 <memset+0x18>

010068d4 <_Bfree>:
 10068d4:	28000826 	beq	r5,zero,10068f8 <_Bfree+0x24>
 10068d8:	28800117 	ldw	r2,4(r5)
 10068dc:	21001317 	ldw	r4,76(r4)
 10068e0:	1085883a 	add	r2,r2,r2
 10068e4:	1085883a 	add	r2,r2,r2
 10068e8:	1105883a 	add	r2,r2,r4
 10068ec:	10c00017 	ldw	r3,0(r2)
 10068f0:	28c00015 	stw	r3,0(r5)
 10068f4:	11400015 	stw	r5,0(r2)
 10068f8:	f800283a 	ret

010068fc <__hi0bits>:
 10068fc:	20bfffec 	andhi	r2,r4,65535
 1006900:	10001426 	beq	r2,zero,1006954 <__hi0bits+0x58>
 1006904:	0007883a 	mov	r3,zero
 1006908:	20bfc02c 	andhi	r2,r4,65280
 100690c:	1000021e 	bne	r2,zero,1006918 <__hi0bits+0x1c>
 1006910:	2008923a 	slli	r4,r4,8
 1006914:	18c00204 	addi	r3,r3,8
 1006918:	20bc002c 	andhi	r2,r4,61440
 100691c:	1000021e 	bne	r2,zero,1006928 <__hi0bits+0x2c>
 1006920:	2008913a 	slli	r4,r4,4
 1006924:	18c00104 	addi	r3,r3,4
 1006928:	20b0002c 	andhi	r2,r4,49152
 100692c:	1000031e 	bne	r2,zero,100693c <__hi0bits+0x40>
 1006930:	2105883a 	add	r2,r4,r4
 1006934:	18c00084 	addi	r3,r3,2
 1006938:	1089883a 	add	r4,r2,r2
 100693c:	20000316 	blt	r4,zero,100694c <__hi0bits+0x50>
 1006940:	2090002c 	andhi	r2,r4,16384
 1006944:	10000626 	beq	r2,zero,1006960 <__hi0bits+0x64>
 1006948:	18c00044 	addi	r3,r3,1
 100694c:	1805883a 	mov	r2,r3
 1006950:	f800283a 	ret
 1006954:	2008943a 	slli	r4,r4,16
 1006958:	00c00404 	movi	r3,16
 100695c:	003fea06 	br	1006908 <__hi0bits+0xc>
 1006960:	00c00804 	movi	r3,32
 1006964:	1805883a 	mov	r2,r3
 1006968:	f800283a 	ret

0100696c <__lo0bits>:
 100696c:	20c00017 	ldw	r3,0(r4)
 1006970:	188001cc 	andi	r2,r3,7
 1006974:	10000a26 	beq	r2,zero,10069a0 <__lo0bits+0x34>
 1006978:	1880004c 	andi	r2,r3,1
 100697c:	1005003a 	cmpeq	r2,r2,zero
 1006980:	10002126 	beq	r2,zero,1006a08 <__lo0bits+0x9c>
 1006984:	1880008c 	andi	r2,r3,2
 1006988:	1000251e 	bne	r2,zero,1006a20 <__lo0bits+0xb4>
 100698c:	1804d0ba 	srli	r2,r3,2
 1006990:	01400084 	movi	r5,2
 1006994:	20800015 	stw	r2,0(r4)
 1006998:	2805883a 	mov	r2,r5
 100699c:	f800283a 	ret
 10069a0:	18bfffcc 	andi	r2,r3,65535
 10069a4:	10001526 	beq	r2,zero,10069fc <__lo0bits+0x90>
 10069a8:	000b883a 	mov	r5,zero
 10069ac:	18803fcc 	andi	r2,r3,255
 10069b0:	1000021e 	bne	r2,zero,10069bc <__lo0bits+0x50>
 10069b4:	1806d23a 	srli	r3,r3,8
 10069b8:	29400204 	addi	r5,r5,8
 10069bc:	188003cc 	andi	r2,r3,15
 10069c0:	1000021e 	bne	r2,zero,10069cc <__lo0bits+0x60>
 10069c4:	1806d13a 	srli	r3,r3,4
 10069c8:	29400104 	addi	r5,r5,4
 10069cc:	188000cc 	andi	r2,r3,3
 10069d0:	1000021e 	bne	r2,zero,10069dc <__lo0bits+0x70>
 10069d4:	1806d0ba 	srli	r3,r3,2
 10069d8:	29400084 	addi	r5,r5,2
 10069dc:	1880004c 	andi	r2,r3,1
 10069e0:	1000031e 	bne	r2,zero,10069f0 <__lo0bits+0x84>
 10069e4:	1806d07a 	srli	r3,r3,1
 10069e8:	18000a26 	beq	r3,zero,1006a14 <__lo0bits+0xa8>
 10069ec:	29400044 	addi	r5,r5,1
 10069f0:	2805883a 	mov	r2,r5
 10069f4:	20c00015 	stw	r3,0(r4)
 10069f8:	f800283a 	ret
 10069fc:	1806d43a 	srli	r3,r3,16
 1006a00:	01400404 	movi	r5,16
 1006a04:	003fe906 	br	10069ac <__lo0bits+0x40>
 1006a08:	000b883a 	mov	r5,zero
 1006a0c:	2805883a 	mov	r2,r5
 1006a10:	f800283a 	ret
 1006a14:	01400804 	movi	r5,32
 1006a18:	2805883a 	mov	r2,r5
 1006a1c:	f800283a 	ret
 1006a20:	1804d07a 	srli	r2,r3,1
 1006a24:	01400044 	movi	r5,1
 1006a28:	20800015 	stw	r2,0(r4)
 1006a2c:	003fda06 	br	1006998 <__lo0bits+0x2c>

01006a30 <__mcmp>:
 1006a30:	20800417 	ldw	r2,16(r4)
 1006a34:	28c00417 	ldw	r3,16(r5)
 1006a38:	10cfc83a 	sub	r7,r2,r3
 1006a3c:	38000c1e 	bne	r7,zero,1006a70 <__mcmp+0x40>
 1006a40:	18c5883a 	add	r2,r3,r3
 1006a44:	1085883a 	add	r2,r2,r2
 1006a48:	10c00504 	addi	r3,r2,20
 1006a4c:	21000504 	addi	r4,r4,20
 1006a50:	28cb883a 	add	r5,r5,r3
 1006a54:	2085883a 	add	r2,r4,r2
 1006a58:	10bfff04 	addi	r2,r2,-4
 1006a5c:	297fff04 	addi	r5,r5,-4
 1006a60:	11800017 	ldw	r6,0(r2)
 1006a64:	28c00017 	ldw	r3,0(r5)
 1006a68:	30c0031e 	bne	r6,r3,1006a78 <__mcmp+0x48>
 1006a6c:	20bffa36 	bltu	r4,r2,1006a58 <__mcmp+0x28>
 1006a70:	3805883a 	mov	r2,r7
 1006a74:	f800283a 	ret
 1006a78:	30c00336 	bltu	r6,r3,1006a88 <__mcmp+0x58>
 1006a7c:	01c00044 	movi	r7,1
 1006a80:	3805883a 	mov	r2,r7
 1006a84:	f800283a 	ret
 1006a88:	01ffffc4 	movi	r7,-1
 1006a8c:	003ff806 	br	1006a70 <__mcmp+0x40>

01006a90 <__ulp>:
 1006a90:	295ffc2c 	andhi	r5,r5,32752
 1006a94:	013f3034 	movhi	r4,64704
 1006a98:	290b883a 	add	r5,r5,r4
 1006a9c:	0145c83a 	sub	r2,zero,r5
 1006aa0:	1007d53a 	srai	r3,r2,20
 1006aa4:	000d883a 	mov	r6,zero
 1006aa8:	0140040e 	bge	zero,r5,1006abc <__ulp+0x2c>
 1006aac:	280f883a 	mov	r7,r5
 1006ab0:	3807883a 	mov	r3,r7
 1006ab4:	3005883a 	mov	r2,r6
 1006ab8:	f800283a 	ret
 1006abc:	008004c4 	movi	r2,19
 1006ac0:	193ffb04 	addi	r4,r3,-20
 1006ac4:	10c00c0e 	bge	r2,r3,1006af8 <__ulp+0x68>
 1006ac8:	008007c4 	movi	r2,31
 1006acc:	1107c83a 	sub	r3,r2,r4
 1006ad0:	00800784 	movi	r2,30
 1006ad4:	01400044 	movi	r5,1
 1006ad8:	11000216 	blt	r2,r4,1006ae4 <__ulp+0x54>
 1006adc:	00800044 	movi	r2,1
 1006ae0:	10ca983a 	sll	r5,r2,r3
 1006ae4:	000f883a 	mov	r7,zero
 1006ae8:	280d883a 	mov	r6,r5
 1006aec:	3807883a 	mov	r3,r7
 1006af0:	3005883a 	mov	r2,r6
 1006af4:	f800283a 	ret
 1006af8:	00800234 	movhi	r2,8
 1006afc:	10cfd83a 	sra	r7,r2,r3
 1006b00:	000d883a 	mov	r6,zero
 1006b04:	3005883a 	mov	r2,r6
 1006b08:	3807883a 	mov	r3,r7
 1006b0c:	f800283a 	ret

01006b10 <__b2d>:
 1006b10:	20800417 	ldw	r2,16(r4)
 1006b14:	defff904 	addi	sp,sp,-28
 1006b18:	dd000415 	stw	r20,16(sp)
 1006b1c:	1085883a 	add	r2,r2,r2
 1006b20:	25000504 	addi	r20,r4,20
 1006b24:	1085883a 	add	r2,r2,r2
 1006b28:	dc000015 	stw	r16,0(sp)
 1006b2c:	a0a1883a 	add	r16,r20,r2
 1006b30:	dd400515 	stw	r21,20(sp)
 1006b34:	857fff17 	ldw	r21,-4(r16)
 1006b38:	dc400115 	stw	r17,4(sp)
 1006b3c:	dfc00615 	stw	ra,24(sp)
 1006b40:	a809883a 	mov	r4,r21
 1006b44:	2823883a 	mov	r17,r5
 1006b48:	dcc00315 	stw	r19,12(sp)
 1006b4c:	dc800215 	stw	r18,8(sp)
 1006b50:	10068fc0 	call	10068fc <__hi0bits>
 1006b54:	100b883a 	mov	r5,r2
 1006b58:	00800804 	movi	r2,32
 1006b5c:	1145c83a 	sub	r2,r2,r5
 1006b60:	88800015 	stw	r2,0(r17)
 1006b64:	00800284 	movi	r2,10
 1006b68:	80ffff04 	addi	r3,r16,-4
 1006b6c:	11401416 	blt	r2,r5,1006bc0 <__b2d+0xb0>
 1006b70:	008002c4 	movi	r2,11
 1006b74:	1149c83a 	sub	r4,r2,r5
 1006b78:	a0c02736 	bltu	r20,r3,1006c18 <__b2d+0x108>
 1006b7c:	000d883a 	mov	r6,zero
 1006b80:	28800544 	addi	r2,r5,21
 1006b84:	a906d83a 	srl	r3,r21,r4
 1006b88:	a884983a 	sll	r2,r21,r2
 1006b8c:	1ccffc34 	orhi	r19,r3,16368
 1006b90:	11a4b03a 	or	r18,r2,r6
 1006b94:	9005883a 	mov	r2,r18
 1006b98:	9807883a 	mov	r3,r19
 1006b9c:	dfc00617 	ldw	ra,24(sp)
 1006ba0:	dd400517 	ldw	r21,20(sp)
 1006ba4:	dd000417 	ldw	r20,16(sp)
 1006ba8:	dcc00317 	ldw	r19,12(sp)
 1006bac:	dc800217 	ldw	r18,8(sp)
 1006bb0:	dc400117 	ldw	r17,4(sp)
 1006bb4:	dc000017 	ldw	r16,0(sp)
 1006bb8:	dec00704 	addi	sp,sp,28
 1006bbc:	f800283a 	ret
 1006bc0:	a0c00e36 	bltu	r20,r3,1006bfc <__b2d+0xec>
 1006bc4:	293ffd44 	addi	r4,r5,-11
 1006bc8:	000d883a 	mov	r6,zero
 1006bcc:	20000f26 	beq	r4,zero,1006c0c <__b2d+0xfc>
 1006bd0:	00800804 	movi	r2,32
 1006bd4:	110bc83a 	sub	r5,r2,r4
 1006bd8:	a0c01236 	bltu	r20,r3,1006c24 <__b2d+0x114>
 1006bdc:	000f883a 	mov	r7,zero
 1006be0:	a904983a 	sll	r2,r21,r4
 1006be4:	3146d83a 	srl	r3,r6,r5
 1006be8:	3108983a 	sll	r4,r6,r4
 1006bec:	108ffc34 	orhi	r2,r2,16368
 1006bf0:	18a6b03a 	or	r19,r3,r2
 1006bf4:	3924b03a 	or	r18,r7,r4
 1006bf8:	003fe606 	br	1006b94 <__b2d+0x84>
 1006bfc:	293ffd44 	addi	r4,r5,-11
 1006c00:	81bffe17 	ldw	r6,-8(r16)
 1006c04:	80fffe04 	addi	r3,r16,-8
 1006c08:	203ff11e 	bne	r4,zero,1006bd0 <__b2d+0xc0>
 1006c0c:	accffc34 	orhi	r19,r21,16368
 1006c10:	3025883a 	mov	r18,r6
 1006c14:	003fdf06 	br	1006b94 <__b2d+0x84>
 1006c18:	18bfff17 	ldw	r2,-4(r3)
 1006c1c:	110cd83a 	srl	r6,r2,r4
 1006c20:	003fd706 	br	1006b80 <__b2d+0x70>
 1006c24:	18bfff17 	ldw	r2,-4(r3)
 1006c28:	114ed83a 	srl	r7,r2,r5
 1006c2c:	003fec06 	br	1006be0 <__b2d+0xd0>

01006c30 <__ratio>:
 1006c30:	defff904 	addi	sp,sp,-28
 1006c34:	dc400215 	stw	r17,8(sp)
 1006c38:	2823883a 	mov	r17,r5
 1006c3c:	d80b883a 	mov	r5,sp
 1006c40:	dfc00615 	stw	ra,24(sp)
 1006c44:	dd000515 	stw	r20,20(sp)
 1006c48:	dcc00415 	stw	r19,16(sp)
 1006c4c:	dc800315 	stw	r18,12(sp)
 1006c50:	2025883a 	mov	r18,r4
 1006c54:	1006b100 	call	1006b10 <__b2d>
 1006c58:	8809883a 	mov	r4,r17
 1006c5c:	d9400104 	addi	r5,sp,4
 1006c60:	1027883a 	mov	r19,r2
 1006c64:	1829883a 	mov	r20,r3
 1006c68:	1006b100 	call	1006b10 <__b2d>
 1006c6c:	89000417 	ldw	r4,16(r17)
 1006c70:	91c00417 	ldw	r7,16(r18)
 1006c74:	d9800117 	ldw	r6,4(sp)
 1006c78:	180b883a 	mov	r5,r3
 1006c7c:	390fc83a 	sub	r7,r7,r4
 1006c80:	1009883a 	mov	r4,r2
 1006c84:	d8800017 	ldw	r2,0(sp)
 1006c88:	380e917a 	slli	r7,r7,5
 1006c8c:	2011883a 	mov	r8,r4
 1006c90:	1185c83a 	sub	r2,r2,r6
 1006c94:	11c5883a 	add	r2,r2,r7
 1006c98:	1006953a 	slli	r3,r2,20
 1006c9c:	2813883a 	mov	r9,r5
 1006ca0:	00800d0e 	bge	zero,r2,1006cd8 <__ratio+0xa8>
 1006ca4:	1d29883a 	add	r20,r3,r20
 1006ca8:	a00b883a 	mov	r5,r20
 1006cac:	480f883a 	mov	r7,r9
 1006cb0:	9809883a 	mov	r4,r19
 1006cb4:	400d883a 	mov	r6,r8
 1006cb8:	1009a8c0 	call	1009a8c <__divdf3>
 1006cbc:	dfc00617 	ldw	ra,24(sp)
 1006cc0:	dd000517 	ldw	r20,20(sp)
 1006cc4:	dcc00417 	ldw	r19,16(sp)
 1006cc8:	dc800317 	ldw	r18,12(sp)
 1006ccc:	dc400217 	ldw	r17,8(sp)
 1006cd0:	dec00704 	addi	sp,sp,28
 1006cd4:	f800283a 	ret
 1006cd8:	28d3c83a 	sub	r9,r5,r3
 1006cdc:	003ff206 	br	1006ca8 <__ratio+0x78>

01006ce0 <_mprec_log10>:
 1006ce0:	defffe04 	addi	sp,sp,-8
 1006ce4:	008005c4 	movi	r2,23
 1006ce8:	dc000015 	stw	r16,0(sp)
 1006cec:	dfc00115 	stw	ra,4(sp)
 1006cf0:	2021883a 	mov	r16,r4
 1006cf4:	11000c16 	blt	r2,r4,1006d28 <_mprec_log10+0x48>
 1006cf8:	200490fa 	slli	r2,r4,3
 1006cfc:	00c04074 	movhi	r3,257
 1006d00:	18fa9304 	addi	r3,r3,-5556
 1006d04:	10c5883a 	add	r2,r2,r3
 1006d08:	12400117 	ldw	r9,4(r2)
 1006d0c:	12000017 	ldw	r8,0(r2)
 1006d10:	4807883a 	mov	r3,r9
 1006d14:	4005883a 	mov	r2,r8
 1006d18:	dfc00117 	ldw	ra,4(sp)
 1006d1c:	dc000017 	ldw	r16,0(sp)
 1006d20:	dec00204 	addi	sp,sp,8
 1006d24:	f800283a 	ret
 1006d28:	0011883a 	mov	r8,zero
 1006d2c:	024ffc34 	movhi	r9,16368
 1006d30:	0005883a 	mov	r2,zero
 1006d34:	00d00934 	movhi	r3,16420
 1006d38:	480b883a 	mov	r5,r9
 1006d3c:	4009883a 	mov	r4,r8
 1006d40:	180f883a 	mov	r7,r3
 1006d44:	100d883a 	mov	r6,r2
 1006d48:	10096c80 	call	10096c8 <__muldf3>
 1006d4c:	843fffc4 	addi	r16,r16,-1
 1006d50:	1011883a 	mov	r8,r2
 1006d54:	1813883a 	mov	r9,r3
 1006d58:	803ff51e 	bne	r16,zero,1006d30 <_mprec_log10+0x50>
 1006d5c:	4005883a 	mov	r2,r8
 1006d60:	4807883a 	mov	r3,r9
 1006d64:	dfc00117 	ldw	ra,4(sp)
 1006d68:	dc000017 	ldw	r16,0(sp)
 1006d6c:	dec00204 	addi	sp,sp,8
 1006d70:	f800283a 	ret

01006d74 <__copybits>:
 1006d74:	297fffc4 	addi	r5,r5,-1
 1006d78:	30800417 	ldw	r2,16(r6)
 1006d7c:	280bd17a 	srai	r5,r5,5
 1006d80:	31800504 	addi	r6,r6,20
 1006d84:	1085883a 	add	r2,r2,r2
 1006d88:	294b883a 	add	r5,r5,r5
 1006d8c:	294b883a 	add	r5,r5,r5
 1006d90:	1085883a 	add	r2,r2,r2
 1006d94:	290b883a 	add	r5,r5,r4
 1006d98:	3087883a 	add	r3,r6,r2
 1006d9c:	29400104 	addi	r5,r5,4
 1006da0:	30c0052e 	bgeu	r6,r3,1006db8 <__copybits+0x44>
 1006da4:	30800017 	ldw	r2,0(r6)
 1006da8:	31800104 	addi	r6,r6,4
 1006dac:	20800015 	stw	r2,0(r4)
 1006db0:	21000104 	addi	r4,r4,4
 1006db4:	30fffb36 	bltu	r6,r3,1006da4 <__copybits+0x30>
 1006db8:	2140032e 	bgeu	r4,r5,1006dc8 <__copybits+0x54>
 1006dbc:	20000015 	stw	zero,0(r4)
 1006dc0:	21000104 	addi	r4,r4,4
 1006dc4:	217ffd36 	bltu	r4,r5,1006dbc <__copybits+0x48>
 1006dc8:	f800283a 	ret

01006dcc <__any_on>:
 1006dcc:	20800417 	ldw	r2,16(r4)
 1006dd0:	2807d17a 	srai	r3,r5,5
 1006dd4:	21000504 	addi	r4,r4,20
 1006dd8:	10c00d0e 	bge	r2,r3,1006e10 <__any_on+0x44>
 1006ddc:	1085883a 	add	r2,r2,r2
 1006de0:	1085883a 	add	r2,r2,r2
 1006de4:	208d883a 	add	r6,r4,r2
 1006de8:	2180182e 	bgeu	r4,r6,1006e4c <__any_on+0x80>
 1006dec:	30bfff17 	ldw	r2,-4(r6)
 1006df0:	30ffff04 	addi	r3,r6,-4
 1006df4:	1000041e 	bne	r2,zero,1006e08 <__any_on+0x3c>
 1006df8:	20c0142e 	bgeu	r4,r3,1006e4c <__any_on+0x80>
 1006dfc:	18ffff04 	addi	r3,r3,-4
 1006e00:	18800017 	ldw	r2,0(r3)
 1006e04:	103ffc26 	beq	r2,zero,1006df8 <__any_on+0x2c>
 1006e08:	00800044 	movi	r2,1
 1006e0c:	f800283a 	ret
 1006e10:	18800a0e 	bge	r3,r2,1006e3c <__any_on+0x70>
 1006e14:	294007cc 	andi	r5,r5,31
 1006e18:	28000826 	beq	r5,zero,1006e3c <__any_on+0x70>
 1006e1c:	18c5883a 	add	r2,r3,r3
 1006e20:	1085883a 	add	r2,r2,r2
 1006e24:	208d883a 	add	r6,r4,r2
 1006e28:	30c00017 	ldw	r3,0(r6)
 1006e2c:	1944d83a 	srl	r2,r3,r5
 1006e30:	1144983a 	sll	r2,r2,r5
 1006e34:	18bff41e 	bne	r3,r2,1006e08 <__any_on+0x3c>
 1006e38:	003feb06 	br	1006de8 <__any_on+0x1c>
 1006e3c:	18c5883a 	add	r2,r3,r3
 1006e40:	1085883a 	add	r2,r2,r2
 1006e44:	208d883a 	add	r6,r4,r2
 1006e48:	003fe706 	br	1006de8 <__any_on+0x1c>
 1006e4c:	0005883a 	mov	r2,zero
 1006e50:	f800283a 	ret

01006e54 <_Balloc>:
 1006e54:	20c01317 	ldw	r3,76(r4)
 1006e58:	defffb04 	addi	sp,sp,-20
 1006e5c:	dcc00315 	stw	r19,12(sp)
 1006e60:	dc800215 	stw	r18,8(sp)
 1006e64:	dfc00415 	stw	ra,16(sp)
 1006e68:	2825883a 	mov	r18,r5
 1006e6c:	dc400115 	stw	r17,4(sp)
 1006e70:	dc000015 	stw	r16,0(sp)
 1006e74:	2027883a 	mov	r19,r4
 1006e78:	01800404 	movi	r6,16
 1006e7c:	01400104 	movi	r5,4
 1006e80:	18001726 	beq	r3,zero,1006ee0 <_Balloc+0x8c>
 1006e84:	01400044 	movi	r5,1
 1006e88:	9485883a 	add	r2,r18,r18
 1006e8c:	2ca2983a 	sll	r17,r5,r18
 1006e90:	1085883a 	add	r2,r2,r2
 1006e94:	10c7883a 	add	r3,r2,r3
 1006e98:	1c000017 	ldw	r16,0(r3)
 1006e9c:	8c4d883a 	add	r6,r17,r17
 1006ea0:	318d883a 	add	r6,r6,r6
 1006ea4:	9809883a 	mov	r4,r19
 1006ea8:	31800504 	addi	r6,r6,20
 1006eac:	80001226 	beq	r16,zero,1006ef8 <_Balloc+0xa4>
 1006eb0:	80800017 	ldw	r2,0(r16)
 1006eb4:	18800015 	stw	r2,0(r3)
 1006eb8:	80000415 	stw	zero,16(r16)
 1006ebc:	80000315 	stw	zero,12(r16)
 1006ec0:	8005883a 	mov	r2,r16
 1006ec4:	dfc00417 	ldw	ra,16(sp)
 1006ec8:	dcc00317 	ldw	r19,12(sp)
 1006ecc:	dc800217 	ldw	r18,8(sp)
 1006ed0:	dc400117 	ldw	r17,4(sp)
 1006ed4:	dc000017 	ldw	r16,0(sp)
 1006ed8:	dec00504 	addi	sp,sp,20
 1006edc:	f800283a 	ret
 1006ee0:	100821c0 	call	100821c <_calloc_r>
 1006ee4:	1007883a 	mov	r3,r2
 1006ee8:	0021883a 	mov	r16,zero
 1006eec:	98801315 	stw	r2,76(r19)
 1006ef0:	103fe41e 	bne	r2,zero,1006e84 <_Balloc+0x30>
 1006ef4:	003ff206 	br	1006ec0 <_Balloc+0x6c>
 1006ef8:	100821c0 	call	100821c <_calloc_r>
 1006efc:	103ff026 	beq	r2,zero,1006ec0 <_Balloc+0x6c>
 1006f00:	1021883a 	mov	r16,r2
 1006f04:	14800115 	stw	r18,4(r2)
 1006f08:	14400215 	stw	r17,8(r2)
 1006f0c:	003fea06 	br	1006eb8 <_Balloc+0x64>

01006f10 <__d2b>:
 1006f10:	defff504 	addi	sp,sp,-44
 1006f14:	dcc00515 	stw	r19,20(sp)
 1006f18:	04c00044 	movi	r19,1
 1006f1c:	dc000215 	stw	r16,8(sp)
 1006f20:	2821883a 	mov	r16,r5
 1006f24:	980b883a 	mov	r5,r19
 1006f28:	ddc00915 	stw	r23,36(sp)
 1006f2c:	dd800815 	stw	r22,32(sp)
 1006f30:	dd400715 	stw	r21,28(sp)
 1006f34:	dd000615 	stw	r20,24(sp)
 1006f38:	dc800415 	stw	r18,16(sp)
 1006f3c:	dc400315 	stw	r17,12(sp)
 1006f40:	dfc00a15 	stw	ra,40(sp)
 1006f44:	3023883a 	mov	r17,r6
 1006f48:	382d883a 	mov	r22,r7
 1006f4c:	ddc00b17 	ldw	r23,44(sp)
 1006f50:	1006e540 	call	1006e54 <_Balloc>
 1006f54:	1025883a 	mov	r18,r2
 1006f58:	00a00034 	movhi	r2,32768
 1006f5c:	10bfffc4 	addi	r2,r2,-1
 1006f60:	8888703a 	and	r4,r17,r2
 1006f64:	202ad53a 	srli	r21,r4,20
 1006f68:	00800434 	movhi	r2,16
 1006f6c:	10bfffc4 	addi	r2,r2,-1
 1006f70:	8886703a 	and	r3,r17,r2
 1006f74:	a829003a 	cmpeq	r20,r21,zero
 1006f78:	800b883a 	mov	r5,r16
 1006f7c:	d8c00115 	stw	r3,4(sp)
 1006f80:	94000504 	addi	r16,r18,20
 1006f84:	a000021e 	bne	r20,zero,1006f90 <__d2b+0x80>
 1006f88:	18c00434 	orhi	r3,r3,16
 1006f8c:	d8c00115 	stw	r3,4(sp)
 1006f90:	28002726 	beq	r5,zero,1007030 <__d2b+0x120>
 1006f94:	d809883a 	mov	r4,sp
 1006f98:	d9400015 	stw	r5,0(sp)
 1006f9c:	100696c0 	call	100696c <__lo0bits>
 1006fa0:	100d883a 	mov	r6,r2
 1006fa4:	10003526 	beq	r2,zero,100707c <__d2b+0x16c>
 1006fa8:	d8c00117 	ldw	r3,4(sp)
 1006fac:	00800804 	movi	r2,32
 1006fb0:	1185c83a 	sub	r2,r2,r6
 1006fb4:	d9000017 	ldw	r4,0(sp)
 1006fb8:	1886983a 	sll	r3,r3,r2
 1006fbc:	1906b03a 	or	r3,r3,r4
 1006fc0:	90c00515 	stw	r3,20(r18)
 1006fc4:	d8c00117 	ldw	r3,4(sp)
 1006fc8:	1986d83a 	srl	r3,r3,r6
 1006fcc:	d8c00115 	stw	r3,4(sp)
 1006fd0:	180b003a 	cmpeq	r5,r3,zero
 1006fd4:	00800084 	movi	r2,2
 1006fd8:	114bc83a 	sub	r5,r2,r5
 1006fdc:	80c00115 	stw	r3,4(r16)
 1006fe0:	91400415 	stw	r5,16(r18)
 1006fe4:	a0001a1e 	bne	r20,zero,1007050 <__d2b+0x140>
 1006fe8:	3545883a 	add	r2,r6,r21
 1006fec:	10bef344 	addi	r2,r2,-1075
 1006ff0:	00c00d44 	movi	r3,53
 1006ff4:	b0800015 	stw	r2,0(r22)
 1006ff8:	1987c83a 	sub	r3,r3,r6
 1006ffc:	b8c00015 	stw	r3,0(r23)
 1007000:	9005883a 	mov	r2,r18
 1007004:	dfc00a17 	ldw	ra,40(sp)
 1007008:	ddc00917 	ldw	r23,36(sp)
 100700c:	dd800817 	ldw	r22,32(sp)
 1007010:	dd400717 	ldw	r21,28(sp)
 1007014:	dd000617 	ldw	r20,24(sp)
 1007018:	dcc00517 	ldw	r19,20(sp)
 100701c:	dc800417 	ldw	r18,16(sp)
 1007020:	dc400317 	ldw	r17,12(sp)
 1007024:	dc000217 	ldw	r16,8(sp)
 1007028:	dec00b04 	addi	sp,sp,44
 100702c:	f800283a 	ret
 1007030:	d9000104 	addi	r4,sp,4
 1007034:	100696c0 	call	100696c <__lo0bits>
 1007038:	11800804 	addi	r6,r2,32
 100703c:	d8800117 	ldw	r2,4(sp)
 1007040:	94c00415 	stw	r19,16(r18)
 1007044:	980b883a 	mov	r5,r19
 1007048:	90800515 	stw	r2,20(r18)
 100704c:	a03fe626 	beq	r20,zero,1006fe8 <__d2b+0xd8>
 1007050:	2945883a 	add	r2,r5,r5
 1007054:	1085883a 	add	r2,r2,r2
 1007058:	1405883a 	add	r2,r2,r16
 100705c:	113fff17 	ldw	r4,-4(r2)
 1007060:	30fef384 	addi	r3,r6,-1074
 1007064:	2820917a 	slli	r16,r5,5
 1007068:	b0c00015 	stw	r3,0(r22)
 100706c:	10068fc0 	call	10068fc <__hi0bits>
 1007070:	80a1c83a 	sub	r16,r16,r2
 1007074:	bc000015 	stw	r16,0(r23)
 1007078:	003fe106 	br	1007000 <__d2b+0xf0>
 100707c:	d8800017 	ldw	r2,0(sp)
 1007080:	90800515 	stw	r2,20(r18)
 1007084:	d8c00117 	ldw	r3,4(sp)
 1007088:	003fd106 	br	1006fd0 <__d2b+0xc0>

0100708c <__mdiff>:
 100708c:	defffb04 	addi	sp,sp,-20
 1007090:	dc000015 	stw	r16,0(sp)
 1007094:	2821883a 	mov	r16,r5
 1007098:	dc800215 	stw	r18,8(sp)
 100709c:	300b883a 	mov	r5,r6
 10070a0:	2025883a 	mov	r18,r4
 10070a4:	8009883a 	mov	r4,r16
 10070a8:	dc400115 	stw	r17,4(sp)
 10070ac:	dfc00415 	stw	ra,16(sp)
 10070b0:	dcc00315 	stw	r19,12(sp)
 10070b4:	3023883a 	mov	r17,r6
 10070b8:	1006a300 	call	1006a30 <__mcmp>
 10070bc:	10004226 	beq	r2,zero,10071c8 <__mdiff+0x13c>
 10070c0:	10005016 	blt	r2,zero,1007204 <__mdiff+0x178>
 10070c4:	0027883a 	mov	r19,zero
 10070c8:	81400117 	ldw	r5,4(r16)
 10070cc:	9009883a 	mov	r4,r18
 10070d0:	1006e540 	call	1006e54 <_Balloc>
 10070d4:	1019883a 	mov	r12,r2
 10070d8:	82800417 	ldw	r10,16(r16)
 10070dc:	88800417 	ldw	r2,16(r17)
 10070e0:	81800504 	addi	r6,r16,20
 10070e4:	5287883a 	add	r3,r10,r10
 10070e8:	1085883a 	add	r2,r2,r2
 10070ec:	18c7883a 	add	r3,r3,r3
 10070f0:	1085883a 	add	r2,r2,r2
 10070f4:	8a000504 	addi	r8,r17,20
 10070f8:	64c00315 	stw	r19,12(r12)
 10070fc:	30db883a 	add	r13,r6,r3
 1007100:	4097883a 	add	r11,r8,r2
 1007104:	61c00504 	addi	r7,r12,20
 1007108:	0013883a 	mov	r9,zero
 100710c:	31000017 	ldw	r4,0(r6)
 1007110:	41400017 	ldw	r5,0(r8)
 1007114:	42000104 	addi	r8,r8,4
 1007118:	20bfffcc 	andi	r2,r4,65535
 100711c:	28ffffcc 	andi	r3,r5,65535
 1007120:	10c5c83a 	sub	r2,r2,r3
 1007124:	1245883a 	add	r2,r2,r9
 1007128:	2008d43a 	srli	r4,r4,16
 100712c:	280ad43a 	srli	r5,r5,16
 1007130:	1007d43a 	srai	r3,r2,16
 1007134:	3880000d 	sth	r2,0(r7)
 1007138:	2149c83a 	sub	r4,r4,r5
 100713c:	20c9883a 	add	r4,r4,r3
 1007140:	3900008d 	sth	r4,2(r7)
 1007144:	31800104 	addi	r6,r6,4
 1007148:	39c00104 	addi	r7,r7,4
 100714c:	2013d43a 	srai	r9,r4,16
 1007150:	42ffee36 	bltu	r8,r11,100710c <__mdiff+0x80>
 1007154:	33400c2e 	bgeu	r6,r13,1007188 <__mdiff+0xfc>
 1007158:	30800017 	ldw	r2,0(r6)
 100715c:	31800104 	addi	r6,r6,4
 1007160:	10ffffcc 	andi	r3,r2,65535
 1007164:	1a47883a 	add	r3,r3,r9
 1007168:	1004d43a 	srli	r2,r2,16
 100716c:	1809d43a 	srai	r4,r3,16
 1007170:	38c0000d 	sth	r3,0(r7)
 1007174:	1105883a 	add	r2,r2,r4
 1007178:	3880008d 	sth	r2,2(r7)
 100717c:	1013d43a 	srai	r9,r2,16
 1007180:	39c00104 	addi	r7,r7,4
 1007184:	337ff436 	bltu	r6,r13,1007158 <__mdiff+0xcc>
 1007188:	38bfff17 	ldw	r2,-4(r7)
 100718c:	38ffff04 	addi	r3,r7,-4
 1007190:	1000041e 	bne	r2,zero,10071a4 <__mdiff+0x118>
 1007194:	18ffff04 	addi	r3,r3,-4
 1007198:	18800017 	ldw	r2,0(r3)
 100719c:	52bfffc4 	addi	r10,r10,-1
 10071a0:	103ffc26 	beq	r2,zero,1007194 <__mdiff+0x108>
 10071a4:	6005883a 	mov	r2,r12
 10071a8:	62800415 	stw	r10,16(r12)
 10071ac:	dfc00417 	ldw	ra,16(sp)
 10071b0:	dcc00317 	ldw	r19,12(sp)
 10071b4:	dc800217 	ldw	r18,8(sp)
 10071b8:	dc400117 	ldw	r17,4(sp)
 10071bc:	dc000017 	ldw	r16,0(sp)
 10071c0:	dec00504 	addi	sp,sp,20
 10071c4:	f800283a 	ret
 10071c8:	9009883a 	mov	r4,r18
 10071cc:	000b883a 	mov	r5,zero
 10071d0:	1006e540 	call	1006e54 <_Balloc>
 10071d4:	1019883a 	mov	r12,r2
 10071d8:	00800044 	movi	r2,1
 10071dc:	60800415 	stw	r2,16(r12)
 10071e0:	6005883a 	mov	r2,r12
 10071e4:	60000515 	stw	zero,20(r12)
 10071e8:	dfc00417 	ldw	ra,16(sp)
 10071ec:	dcc00317 	ldw	r19,12(sp)
 10071f0:	dc800217 	ldw	r18,8(sp)
 10071f4:	dc400117 	ldw	r17,4(sp)
 10071f8:	dc000017 	ldw	r16,0(sp)
 10071fc:	dec00504 	addi	sp,sp,20
 1007200:	f800283a 	ret
 1007204:	880d883a 	mov	r6,r17
 1007208:	04c00044 	movi	r19,1
 100720c:	8023883a 	mov	r17,r16
 1007210:	3021883a 	mov	r16,r6
 1007214:	003fac06 	br	10070c8 <__mdiff+0x3c>

01007218 <__lshift>:
 1007218:	defff904 	addi	sp,sp,-28
 100721c:	28800417 	ldw	r2,16(r5)
 1007220:	dc000015 	stw	r16,0(sp)
 1007224:	3021d17a 	srai	r16,r6,5
 1007228:	28c00217 	ldw	r3,8(r5)
 100722c:	10800044 	addi	r2,r2,1
 1007230:	dc400115 	stw	r17,4(sp)
 1007234:	80a3883a 	add	r17,r16,r2
 1007238:	dd400515 	stw	r21,20(sp)
 100723c:	dd000415 	stw	r20,16(sp)
 1007240:	dc800215 	stw	r18,8(sp)
 1007244:	dfc00615 	stw	ra,24(sp)
 1007248:	2825883a 	mov	r18,r5
 100724c:	dcc00315 	stw	r19,12(sp)
 1007250:	3029883a 	mov	r20,r6
 1007254:	202b883a 	mov	r21,r4
 1007258:	29400117 	ldw	r5,4(r5)
 100725c:	1c40030e 	bge	r3,r17,100726c <__lshift+0x54>
 1007260:	18c7883a 	add	r3,r3,r3
 1007264:	29400044 	addi	r5,r5,1
 1007268:	1c7ffd16 	blt	r3,r17,1007260 <__lshift+0x48>
 100726c:	a809883a 	mov	r4,r21
 1007270:	1006e540 	call	1006e54 <_Balloc>
 1007274:	1027883a 	mov	r19,r2
 1007278:	11400504 	addi	r5,r2,20
 100727c:	0400090e 	bge	zero,r16,10072a4 <__lshift+0x8c>
 1007280:	2805883a 	mov	r2,r5
 1007284:	0007883a 	mov	r3,zero
 1007288:	18c00044 	addi	r3,r3,1
 100728c:	10000015 	stw	zero,0(r2)
 1007290:	10800104 	addi	r2,r2,4
 1007294:	80fffc1e 	bne	r16,r3,1007288 <__lshift+0x70>
 1007298:	8405883a 	add	r2,r16,r16
 100729c:	1085883a 	add	r2,r2,r2
 10072a0:	288b883a 	add	r5,r5,r2
 10072a4:	90800417 	ldw	r2,16(r18)
 10072a8:	91000504 	addi	r4,r18,20
 10072ac:	a18007cc 	andi	r6,r20,31
 10072b0:	1085883a 	add	r2,r2,r2
 10072b4:	1085883a 	add	r2,r2,r2
 10072b8:	208f883a 	add	r7,r4,r2
 10072bc:	30001e26 	beq	r6,zero,1007338 <__lshift+0x120>
 10072c0:	00800804 	movi	r2,32
 10072c4:	1191c83a 	sub	r8,r2,r6
 10072c8:	0007883a 	mov	r3,zero
 10072cc:	20800017 	ldw	r2,0(r4)
 10072d0:	1184983a 	sll	r2,r2,r6
 10072d4:	1884b03a 	or	r2,r3,r2
 10072d8:	28800015 	stw	r2,0(r5)
 10072dc:	20c00017 	ldw	r3,0(r4)
 10072e0:	21000104 	addi	r4,r4,4
 10072e4:	29400104 	addi	r5,r5,4
 10072e8:	1a06d83a 	srl	r3,r3,r8
 10072ec:	21fff736 	bltu	r4,r7,10072cc <__lshift+0xb4>
 10072f0:	28c00015 	stw	r3,0(r5)
 10072f4:	18000126 	beq	r3,zero,10072fc <__lshift+0xe4>
 10072f8:	8c400044 	addi	r17,r17,1
 10072fc:	88bfffc4 	addi	r2,r17,-1
 1007300:	98800415 	stw	r2,16(r19)
 1007304:	a809883a 	mov	r4,r21
 1007308:	900b883a 	mov	r5,r18
 100730c:	10068d40 	call	10068d4 <_Bfree>
 1007310:	9805883a 	mov	r2,r19
 1007314:	dfc00617 	ldw	ra,24(sp)
 1007318:	dd400517 	ldw	r21,20(sp)
 100731c:	dd000417 	ldw	r20,16(sp)
 1007320:	dcc00317 	ldw	r19,12(sp)
 1007324:	dc800217 	ldw	r18,8(sp)
 1007328:	dc400117 	ldw	r17,4(sp)
 100732c:	dc000017 	ldw	r16,0(sp)
 1007330:	dec00704 	addi	sp,sp,28
 1007334:	f800283a 	ret
 1007338:	20800017 	ldw	r2,0(r4)
 100733c:	21000104 	addi	r4,r4,4
 1007340:	28800015 	stw	r2,0(r5)
 1007344:	29400104 	addi	r5,r5,4
 1007348:	21ffec2e 	bgeu	r4,r7,10072fc <__lshift+0xe4>
 100734c:	20800017 	ldw	r2,0(r4)
 1007350:	21000104 	addi	r4,r4,4
 1007354:	28800015 	stw	r2,0(r5)
 1007358:	29400104 	addi	r5,r5,4
 100735c:	21fff636 	bltu	r4,r7,1007338 <__lshift+0x120>
 1007360:	003fe606 	br	10072fc <__lshift+0xe4>

01007364 <__multiply>:
 1007364:	defff904 	addi	sp,sp,-28
 1007368:	dcc00315 	stw	r19,12(sp)
 100736c:	dc800215 	stw	r18,8(sp)
 1007370:	2cc00417 	ldw	r19,16(r5)
 1007374:	34800417 	ldw	r18,16(r6)
 1007378:	dd000415 	stw	r20,16(sp)
 100737c:	dc400115 	stw	r17,4(sp)
 1007380:	dfc00615 	stw	ra,24(sp)
 1007384:	dd400515 	stw	r21,20(sp)
 1007388:	dc000015 	stw	r16,0(sp)
 100738c:	2823883a 	mov	r17,r5
 1007390:	3029883a 	mov	r20,r6
 1007394:	9c80040e 	bge	r19,r18,10073a8 <__multiply+0x44>
 1007398:	9027883a 	mov	r19,r18
 100739c:	2c800417 	ldw	r18,16(r5)
 10073a0:	2829883a 	mov	r20,r5
 10073a4:	3023883a 	mov	r17,r6
 10073a8:	88800217 	ldw	r2,8(r17)
 10073ac:	9ca1883a 	add	r16,r19,r18
 10073b0:	89400117 	ldw	r5,4(r17)
 10073b4:	1400010e 	bge	r2,r16,10073bc <__multiply+0x58>
 10073b8:	29400044 	addi	r5,r5,1
 10073bc:	1006e540 	call	1006e54 <_Balloc>
 10073c0:	102b883a 	mov	r21,r2
 10073c4:	8405883a 	add	r2,r16,r16
 10073c8:	1085883a 	add	r2,r2,r2
 10073cc:	a9000504 	addi	r4,r21,20
 10073d0:	209d883a 	add	r14,r4,r2
 10073d4:	2380042e 	bgeu	r4,r14,10073e8 <__multiply+0x84>
 10073d8:	2005883a 	mov	r2,r4
 10073dc:	10000015 	stw	zero,0(r2)
 10073e0:	10800104 	addi	r2,r2,4
 10073e4:	13bffd36 	bltu	r2,r14,10073dc <__multiply+0x78>
 10073e8:	9485883a 	add	r2,r18,r18
 10073ec:	9cc7883a 	add	r3,r19,r19
 10073f0:	a1800504 	addi	r6,r20,20
 10073f4:	1085883a 	add	r2,r2,r2
 10073f8:	8b400504 	addi	r13,r17,20
 10073fc:	18c7883a 	add	r3,r3,r3
 1007400:	309f883a 	add	r15,r6,r2
 1007404:	68d7883a 	add	r11,r13,r3
 1007408:	33c03b2e 	bgeu	r6,r15,10074f8 <__multiply+0x194>
 100740c:	2019883a 	mov	r12,r4
 1007410:	30800017 	ldw	r2,0(r6)
 1007414:	127fffcc 	andi	r9,r2,65535
 1007418:	48001826 	beq	r9,zero,100747c <__multiply+0x118>
 100741c:	6811883a 	mov	r8,r13
 1007420:	600f883a 	mov	r7,r12
 1007424:	0015883a 	mov	r10,zero
 1007428:	40c00017 	ldw	r3,0(r8)
 100742c:	39400017 	ldw	r5,0(r7)
 1007430:	42000104 	addi	r8,r8,4
 1007434:	193fffcc 	andi	r4,r3,65535
 1007438:	4909383a 	mul	r4,r9,r4
 100743c:	1806d43a 	srli	r3,r3,16
 1007440:	28bfffcc 	andi	r2,r5,65535
 1007444:	5085883a 	add	r2,r10,r2
 1007448:	2089883a 	add	r4,r4,r2
 100744c:	48c7383a 	mul	r3,r9,r3
 1007450:	280ad43a 	srli	r5,r5,16
 1007454:	2004d43a 	srli	r2,r4,16
 1007458:	3900000d 	sth	r4,0(r7)
 100745c:	1947883a 	add	r3,r3,r5
 1007460:	10c5883a 	add	r2,r2,r3
 1007464:	3880008d 	sth	r2,2(r7)
 1007468:	1014d43a 	srli	r10,r2,16
 100746c:	39c00104 	addi	r7,r7,4
 1007470:	42ffed36 	bltu	r8,r11,1007428 <__multiply+0xc4>
 1007474:	3a800015 	stw	r10,0(r7)
 1007478:	30800017 	ldw	r2,0(r6)
 100747c:	1012d43a 	srli	r9,r2,16
 1007480:	48001926 	beq	r9,zero,10074e8 <__multiply+0x184>
 1007484:	60800017 	ldw	r2,0(r12)
 1007488:	6811883a 	mov	r8,r13
 100748c:	600f883a 	mov	r7,r12
 1007490:	0015883a 	mov	r10,zero
 1007494:	100b883a 	mov	r5,r2
 1007498:	41000017 	ldw	r4,0(r8)
 100749c:	2806d43a 	srli	r3,r5,16
 10074a0:	3880000d 	sth	r2,0(r7)
 10074a4:	20bfffcc 	andi	r2,r4,65535
 10074a8:	4885383a 	mul	r2,r9,r2
 10074ac:	50c7883a 	add	r3,r10,r3
 10074b0:	2008d43a 	srli	r4,r4,16
 10074b4:	10c5883a 	add	r2,r2,r3
 10074b8:	3880008d 	sth	r2,2(r7)
 10074bc:	39c00104 	addi	r7,r7,4
 10074c0:	39400017 	ldw	r5,0(r7)
 10074c4:	4909383a 	mul	r4,r9,r4
 10074c8:	1004d43a 	srli	r2,r2,16
 10074cc:	28ffffcc 	andi	r3,r5,65535
 10074d0:	20c9883a 	add	r4,r4,r3
 10074d4:	1105883a 	add	r2,r2,r4
 10074d8:	42000104 	addi	r8,r8,4
 10074dc:	1014d43a 	srli	r10,r2,16
 10074e0:	42ffed36 	bltu	r8,r11,1007498 <__multiply+0x134>
 10074e4:	38800015 	stw	r2,0(r7)
 10074e8:	31800104 	addi	r6,r6,4
 10074ec:	33c0022e 	bgeu	r6,r15,10074f8 <__multiply+0x194>
 10074f0:	63000104 	addi	r12,r12,4
 10074f4:	003fc606 	br	1007410 <__multiply+0xac>
 10074f8:	0400090e 	bge	zero,r16,1007520 <__multiply+0x1bc>
 10074fc:	70bfff17 	ldw	r2,-4(r14)
 1007500:	70ffff04 	addi	r3,r14,-4
 1007504:	10000326 	beq	r2,zero,1007514 <__multiply+0x1b0>
 1007508:	00000506 	br	1007520 <__multiply+0x1bc>
 100750c:	18800017 	ldw	r2,0(r3)
 1007510:	1000031e 	bne	r2,zero,1007520 <__multiply+0x1bc>
 1007514:	843fffc4 	addi	r16,r16,-1
 1007518:	18ffff04 	addi	r3,r3,-4
 100751c:	803ffb1e 	bne	r16,zero,100750c <__multiply+0x1a8>
 1007520:	a805883a 	mov	r2,r21
 1007524:	ac000415 	stw	r16,16(r21)
 1007528:	dfc00617 	ldw	ra,24(sp)
 100752c:	dd400517 	ldw	r21,20(sp)
 1007530:	dd000417 	ldw	r20,16(sp)
 1007534:	dcc00317 	ldw	r19,12(sp)
 1007538:	dc800217 	ldw	r18,8(sp)
 100753c:	dc400117 	ldw	r17,4(sp)
 1007540:	dc000017 	ldw	r16,0(sp)
 1007544:	dec00704 	addi	sp,sp,28
 1007548:	f800283a 	ret

0100754c <__i2b>:
 100754c:	defffd04 	addi	sp,sp,-12
 1007550:	dc000015 	stw	r16,0(sp)
 1007554:	04000044 	movi	r16,1
 1007558:	dc800115 	stw	r18,4(sp)
 100755c:	2825883a 	mov	r18,r5
 1007560:	800b883a 	mov	r5,r16
 1007564:	dfc00215 	stw	ra,8(sp)
 1007568:	1006e540 	call	1006e54 <_Balloc>
 100756c:	14000415 	stw	r16,16(r2)
 1007570:	14800515 	stw	r18,20(r2)
 1007574:	dfc00217 	ldw	ra,8(sp)
 1007578:	dc800117 	ldw	r18,4(sp)
 100757c:	dc000017 	ldw	r16,0(sp)
 1007580:	dec00304 	addi	sp,sp,12
 1007584:	f800283a 	ret

01007588 <__multadd>:
 1007588:	defffa04 	addi	sp,sp,-24
 100758c:	dc800215 	stw	r18,8(sp)
 1007590:	2c800417 	ldw	r18,16(r5)
 1007594:	dd000415 	stw	r20,16(sp)
 1007598:	dcc00315 	stw	r19,12(sp)
 100759c:	dc000015 	stw	r16,0(sp)
 10075a0:	dfc00515 	stw	ra,20(sp)
 10075a4:	3821883a 	mov	r16,r7
 10075a8:	dc400115 	stw	r17,4(sp)
 10075ac:	2827883a 	mov	r19,r5
 10075b0:	2029883a 	mov	r20,r4
 10075b4:	2a000504 	addi	r8,r5,20
 10075b8:	000f883a 	mov	r7,zero
 10075bc:	40800017 	ldw	r2,0(r8)
 10075c0:	39c00044 	addi	r7,r7,1
 10075c4:	10ffffcc 	andi	r3,r2,65535
 10075c8:	1987383a 	mul	r3,r3,r6
 10075cc:	1004d43a 	srli	r2,r2,16
 10075d0:	1c07883a 	add	r3,r3,r16
 10075d4:	180ad43a 	srli	r5,r3,16
 10075d8:	1185383a 	mul	r2,r2,r6
 10075dc:	18ffffcc 	andi	r3,r3,65535
 10075e0:	1145883a 	add	r2,r2,r5
 10075e4:	1008943a 	slli	r4,r2,16
 10075e8:	1020d43a 	srli	r16,r2,16
 10075ec:	20c9883a 	add	r4,r4,r3
 10075f0:	41000015 	stw	r4,0(r8)
 10075f4:	42000104 	addi	r8,r8,4
 10075f8:	3cbff016 	blt	r7,r18,10075bc <__multadd+0x34>
 10075fc:	80000826 	beq	r16,zero,1007620 <__multadd+0x98>
 1007600:	98800217 	ldw	r2,8(r19)
 1007604:	90800f0e 	bge	r18,r2,1007644 <__multadd+0xbc>
 1007608:	9485883a 	add	r2,r18,r18
 100760c:	1085883a 	add	r2,r2,r2
 1007610:	14c5883a 	add	r2,r2,r19
 1007614:	90c00044 	addi	r3,r18,1
 1007618:	14000515 	stw	r16,20(r2)
 100761c:	98c00415 	stw	r3,16(r19)
 1007620:	9805883a 	mov	r2,r19
 1007624:	dfc00517 	ldw	ra,20(sp)
 1007628:	dd000417 	ldw	r20,16(sp)
 100762c:	dcc00317 	ldw	r19,12(sp)
 1007630:	dc800217 	ldw	r18,8(sp)
 1007634:	dc400117 	ldw	r17,4(sp)
 1007638:	dc000017 	ldw	r16,0(sp)
 100763c:	dec00604 	addi	sp,sp,24
 1007640:	f800283a 	ret
 1007644:	99400117 	ldw	r5,4(r19)
 1007648:	a009883a 	mov	r4,r20
 100764c:	29400044 	addi	r5,r5,1
 1007650:	1006e540 	call	1006e54 <_Balloc>
 1007654:	99800417 	ldw	r6,16(r19)
 1007658:	99400304 	addi	r5,r19,12
 100765c:	11000304 	addi	r4,r2,12
 1007660:	318d883a 	add	r6,r6,r6
 1007664:	318d883a 	add	r6,r6,r6
 1007668:	31800204 	addi	r6,r6,8
 100766c:	1023883a 	mov	r17,r2
 1007670:	10066bc0 	call	10066bc <memcpy>
 1007674:	980b883a 	mov	r5,r19
 1007678:	a009883a 	mov	r4,r20
 100767c:	10068d40 	call	10068d4 <_Bfree>
 1007680:	8827883a 	mov	r19,r17
 1007684:	003fe006 	br	1007608 <__multadd+0x80>

01007688 <__pow5mult>:
 1007688:	defffa04 	addi	sp,sp,-24
 100768c:	308000cc 	andi	r2,r6,3
 1007690:	dd000415 	stw	r20,16(sp)
 1007694:	dcc00315 	stw	r19,12(sp)
 1007698:	dc000015 	stw	r16,0(sp)
 100769c:	dfc00515 	stw	ra,20(sp)
 10076a0:	dc800215 	stw	r18,8(sp)
 10076a4:	dc400115 	stw	r17,4(sp)
 10076a8:	3021883a 	mov	r16,r6
 10076ac:	2027883a 	mov	r19,r4
 10076b0:	2829883a 	mov	r20,r5
 10076b4:	10002b1e 	bne	r2,zero,1007764 <__pow5mult+0xdc>
 10076b8:	8025d0ba 	srai	r18,r16,2
 10076bc:	90001b26 	beq	r18,zero,100772c <__pow5mult+0xa4>
 10076c0:	9c001217 	ldw	r16,72(r19)
 10076c4:	8000081e 	bne	r16,zero,10076e8 <__pow5mult+0x60>
 10076c8:	00003006 	br	100778c <__pow5mult+0x104>
 10076cc:	800b883a 	mov	r5,r16
 10076d0:	800d883a 	mov	r6,r16
 10076d4:	9809883a 	mov	r4,r19
 10076d8:	90001426 	beq	r18,zero,100772c <__pow5mult+0xa4>
 10076dc:	80800017 	ldw	r2,0(r16)
 10076e0:	10001b26 	beq	r2,zero,1007750 <__pow5mult+0xc8>
 10076e4:	1021883a 	mov	r16,r2
 10076e8:	9080004c 	andi	r2,r18,1
 10076ec:	1005003a 	cmpeq	r2,r2,zero
 10076f0:	9025d07a 	srai	r18,r18,1
 10076f4:	800d883a 	mov	r6,r16
 10076f8:	9809883a 	mov	r4,r19
 10076fc:	a00b883a 	mov	r5,r20
 1007700:	103ff21e 	bne	r2,zero,10076cc <__pow5mult+0x44>
 1007704:	10073640 	call	1007364 <__multiply>
 1007708:	a00b883a 	mov	r5,r20
 100770c:	9809883a 	mov	r4,r19
 1007710:	1023883a 	mov	r17,r2
 1007714:	10068d40 	call	10068d4 <_Bfree>
 1007718:	8829883a 	mov	r20,r17
 100771c:	800b883a 	mov	r5,r16
 1007720:	800d883a 	mov	r6,r16
 1007724:	9809883a 	mov	r4,r19
 1007728:	903fec1e 	bne	r18,zero,10076dc <__pow5mult+0x54>
 100772c:	a005883a 	mov	r2,r20
 1007730:	dfc00517 	ldw	ra,20(sp)
 1007734:	dd000417 	ldw	r20,16(sp)
 1007738:	dcc00317 	ldw	r19,12(sp)
 100773c:	dc800217 	ldw	r18,8(sp)
 1007740:	dc400117 	ldw	r17,4(sp)
 1007744:	dc000017 	ldw	r16,0(sp)
 1007748:	dec00604 	addi	sp,sp,24
 100774c:	f800283a 	ret
 1007750:	10073640 	call	1007364 <__multiply>
 1007754:	80800015 	stw	r2,0(r16)
 1007758:	1021883a 	mov	r16,r2
 100775c:	10000015 	stw	zero,0(r2)
 1007760:	003fe106 	br	10076e8 <__pow5mult+0x60>
 1007764:	1085883a 	add	r2,r2,r2
 1007768:	00c04074 	movhi	r3,257
 100776c:	18fad904 	addi	r3,r3,-5276
 1007770:	1085883a 	add	r2,r2,r2
 1007774:	10c5883a 	add	r2,r2,r3
 1007778:	11bfff17 	ldw	r6,-4(r2)
 100777c:	000f883a 	mov	r7,zero
 1007780:	10075880 	call	1007588 <__multadd>
 1007784:	1029883a 	mov	r20,r2
 1007788:	003fcb06 	br	10076b8 <__pow5mult+0x30>
 100778c:	9809883a 	mov	r4,r19
 1007790:	01409c44 	movi	r5,625
 1007794:	100754c0 	call	100754c <__i2b>
 1007798:	98801215 	stw	r2,72(r19)
 100779c:	1021883a 	mov	r16,r2
 10077a0:	10000015 	stw	zero,0(r2)
 10077a4:	003fd006 	br	10076e8 <__pow5mult+0x60>

010077a8 <__s2b>:
 10077a8:	defff904 	addi	sp,sp,-28
 10077ac:	dcc00315 	stw	r19,12(sp)
 10077b0:	dc800215 	stw	r18,8(sp)
 10077b4:	2827883a 	mov	r19,r5
 10077b8:	2025883a 	mov	r18,r4
 10077bc:	01400244 	movi	r5,9
 10077c0:	39000204 	addi	r4,r7,8
 10077c4:	dd000415 	stw	r20,16(sp)
 10077c8:	dc400115 	stw	r17,4(sp)
 10077cc:	dfc00615 	stw	ra,24(sp)
 10077d0:	dd400515 	stw	r21,20(sp)
 10077d4:	dc000015 	stw	r16,0(sp)
 10077d8:	3829883a 	mov	r20,r7
 10077dc:	3023883a 	mov	r17,r6
 10077e0:	100a36c0 	call	100a36c <__divsi3>
 10077e4:	00c00044 	movi	r3,1
 10077e8:	1880350e 	bge	r3,r2,10078c0 <__s2b+0x118>
 10077ec:	000b883a 	mov	r5,zero
 10077f0:	18c7883a 	add	r3,r3,r3
 10077f4:	29400044 	addi	r5,r5,1
 10077f8:	18bffd16 	blt	r3,r2,10077f0 <__s2b+0x48>
 10077fc:	9009883a 	mov	r4,r18
 1007800:	1006e540 	call	1006e54 <_Balloc>
 1007804:	1011883a 	mov	r8,r2
 1007808:	d8800717 	ldw	r2,28(sp)
 100780c:	00c00044 	movi	r3,1
 1007810:	01800244 	movi	r6,9
 1007814:	40800515 	stw	r2,20(r8)
 1007818:	40c00415 	stw	r3,16(r8)
 100781c:	3440260e 	bge	r6,r17,10078b8 <__s2b+0x110>
 1007820:	3021883a 	mov	r16,r6
 1007824:	99ab883a 	add	r21,r19,r6
 1007828:	9c05883a 	add	r2,r19,r16
 100782c:	11c00007 	ldb	r7,0(r2)
 1007830:	400b883a 	mov	r5,r8
 1007834:	9009883a 	mov	r4,r18
 1007838:	39fff404 	addi	r7,r7,-48
 100783c:	01800284 	movi	r6,10
 1007840:	10075880 	call	1007588 <__multadd>
 1007844:	84000044 	addi	r16,r16,1
 1007848:	1011883a 	mov	r8,r2
 100784c:	8c3ff61e 	bne	r17,r16,1007828 <__s2b+0x80>
 1007850:	ac45883a 	add	r2,r21,r17
 1007854:	117ffe04 	addi	r5,r2,-8
 1007858:	880d883a 	mov	r6,r17
 100785c:	35000c0e 	bge	r6,r20,1007890 <__s2b+0xe8>
 1007860:	a185c83a 	sub	r2,r20,r6
 1007864:	2821883a 	mov	r16,r5
 1007868:	28a3883a 	add	r17,r5,r2
 100786c:	81c00007 	ldb	r7,0(r16)
 1007870:	400b883a 	mov	r5,r8
 1007874:	9009883a 	mov	r4,r18
 1007878:	39fff404 	addi	r7,r7,-48
 100787c:	01800284 	movi	r6,10
 1007880:	10075880 	call	1007588 <__multadd>
 1007884:	84000044 	addi	r16,r16,1
 1007888:	1011883a 	mov	r8,r2
 100788c:	847ff71e 	bne	r16,r17,100786c <__s2b+0xc4>
 1007890:	4005883a 	mov	r2,r8
 1007894:	dfc00617 	ldw	ra,24(sp)
 1007898:	dd400517 	ldw	r21,20(sp)
 100789c:	dd000417 	ldw	r20,16(sp)
 10078a0:	dcc00317 	ldw	r19,12(sp)
 10078a4:	dc800217 	ldw	r18,8(sp)
 10078a8:	dc400117 	ldw	r17,4(sp)
 10078ac:	dc000017 	ldw	r16,0(sp)
 10078b0:	dec00704 	addi	sp,sp,28
 10078b4:	f800283a 	ret
 10078b8:	99400284 	addi	r5,r19,10
 10078bc:	003fe706 	br	100785c <__s2b+0xb4>
 10078c0:	000b883a 	mov	r5,zero
 10078c4:	003fcd06 	br	10077fc <__s2b+0x54>

010078c8 <_realloc_r>:
 10078c8:	defff404 	addi	sp,sp,-48
 10078cc:	dd800815 	stw	r22,32(sp)
 10078d0:	dc800415 	stw	r18,16(sp)
 10078d4:	dc400315 	stw	r17,12(sp)
 10078d8:	dfc00b15 	stw	ra,44(sp)
 10078dc:	df000a15 	stw	fp,40(sp)
 10078e0:	ddc00915 	stw	r23,36(sp)
 10078e4:	dd400715 	stw	r21,28(sp)
 10078e8:	dd000615 	stw	r20,24(sp)
 10078ec:	dcc00515 	stw	r19,20(sp)
 10078f0:	dc000215 	stw	r16,8(sp)
 10078f4:	2825883a 	mov	r18,r5
 10078f8:	3023883a 	mov	r17,r6
 10078fc:	202d883a 	mov	r22,r4
 1007900:	2800c926 	beq	r5,zero,1007c28 <_realloc_r+0x360>
 1007904:	100ad580 	call	100ad58 <__malloc_lock>
 1007908:	943ffe04 	addi	r16,r18,-8
 100790c:	88c002c4 	addi	r3,r17,11
 1007910:	00800584 	movi	r2,22
 1007914:	82000117 	ldw	r8,4(r16)
 1007918:	10c01b2e 	bgeu	r2,r3,1007988 <_realloc_r+0xc0>
 100791c:	00bffe04 	movi	r2,-8
 1007920:	188e703a 	and	r7,r3,r2
 1007924:	3839883a 	mov	fp,r7
 1007928:	38001a16 	blt	r7,zero,1007994 <_realloc_r+0xcc>
 100792c:	e4401936 	bltu	fp,r17,1007994 <_realloc_r+0xcc>
 1007930:	013fff04 	movi	r4,-4
 1007934:	4126703a 	and	r19,r8,r4
 1007938:	99c02616 	blt	r19,r7,10079d4 <_realloc_r+0x10c>
 100793c:	802b883a 	mov	r21,r16
 1007940:	9829883a 	mov	r20,r19
 1007944:	84000204 	addi	r16,r16,8
 1007948:	a80f883a 	mov	r7,r21
 100794c:	a70dc83a 	sub	r6,r20,fp
 1007950:	008003c4 	movi	r2,15
 1007954:	1180c136 	bltu	r2,r6,1007c5c <_realloc_r+0x394>
 1007958:	38800117 	ldw	r2,4(r7)
 100795c:	a549883a 	add	r4,r20,r21
 1007960:	1080004c 	andi	r2,r2,1
 1007964:	a084b03a 	or	r2,r20,r2
 1007968:	38800115 	stw	r2,4(r7)
 100796c:	20c00117 	ldw	r3,4(r4)
 1007970:	18c00054 	ori	r3,r3,1
 1007974:	20c00115 	stw	r3,4(r4)
 1007978:	b009883a 	mov	r4,r22
 100797c:	100ad780 	call	100ad78 <__malloc_unlock>
 1007980:	8023883a 	mov	r17,r16
 1007984:	00000606 	br	10079a0 <_realloc_r+0xd8>
 1007988:	01c00404 	movi	r7,16
 100798c:	3839883a 	mov	fp,r7
 1007990:	e47fe72e 	bgeu	fp,r17,1007930 <_realloc_r+0x68>
 1007994:	00800304 	movi	r2,12
 1007998:	0023883a 	mov	r17,zero
 100799c:	b0800015 	stw	r2,0(r22)
 10079a0:	8805883a 	mov	r2,r17
 10079a4:	dfc00b17 	ldw	ra,44(sp)
 10079a8:	df000a17 	ldw	fp,40(sp)
 10079ac:	ddc00917 	ldw	r23,36(sp)
 10079b0:	dd800817 	ldw	r22,32(sp)
 10079b4:	dd400717 	ldw	r21,28(sp)
 10079b8:	dd000617 	ldw	r20,24(sp)
 10079bc:	dcc00517 	ldw	r19,20(sp)
 10079c0:	dc800417 	ldw	r18,16(sp)
 10079c4:	dc400317 	ldw	r17,12(sp)
 10079c8:	dc000217 	ldw	r16,8(sp)
 10079cc:	dec00c04 	addi	sp,sp,48
 10079d0:	f800283a 	ret
 10079d4:	00804074 	movhi	r2,257
 10079d8:	10bc1404 	addi	r2,r2,-4016
 10079dc:	12400217 	ldw	r9,8(r2)
 10079e0:	84cd883a 	add	r6,r16,r19
 10079e4:	802b883a 	mov	r21,r16
 10079e8:	3240b926 	beq	r6,r9,1007cd0 <_realloc_r+0x408>
 10079ec:	31400117 	ldw	r5,4(r6)
 10079f0:	00bfff84 	movi	r2,-2
 10079f4:	2884703a 	and	r2,r5,r2
 10079f8:	1185883a 	add	r2,r2,r6
 10079fc:	10c00117 	ldw	r3,4(r2)
 1007a00:	18c0004c 	andi	r3,r3,1
 1007a04:	1807003a 	cmpeq	r3,r3,zero
 1007a08:	1800a326 	beq	r3,zero,1007c98 <_realloc_r+0x3d0>
 1007a0c:	2908703a 	and	r4,r5,r4
 1007a10:	9929883a 	add	r20,r19,r4
 1007a14:	a1c0a30e 	bge	r20,r7,1007ca4 <_realloc_r+0x3dc>
 1007a18:	4080004c 	andi	r2,r8,1
 1007a1c:	1000551e 	bne	r2,zero,1007b74 <_realloc_r+0x2ac>
 1007a20:	80800017 	ldw	r2,0(r16)
 1007a24:	80afc83a 	sub	r23,r16,r2
 1007a28:	b8c00117 	ldw	r3,4(r23)
 1007a2c:	00bfff04 	movi	r2,-4
 1007a30:	1884703a 	and	r2,r3,r2
 1007a34:	30002e26 	beq	r6,zero,1007af0 <_realloc_r+0x228>
 1007a38:	3240b926 	beq	r6,r9,1007d20 <_realloc_r+0x458>
 1007a3c:	98a9883a 	add	r20,r19,r2
 1007a40:	2509883a 	add	r4,r4,r20
 1007a44:	d9000015 	stw	r4,0(sp)
 1007a48:	21c02a16 	blt	r4,r7,1007af4 <_realloc_r+0x22c>
 1007a4c:	30800317 	ldw	r2,12(r6)
 1007a50:	30c00217 	ldw	r3,8(r6)
 1007a54:	01400904 	movi	r5,36
 1007a58:	99bfff04 	addi	r6,r19,-4
 1007a5c:	18800315 	stw	r2,12(r3)
 1007a60:	10c00215 	stw	r3,8(r2)
 1007a64:	b9000317 	ldw	r4,12(r23)
 1007a68:	b8800217 	ldw	r2,8(r23)
 1007a6c:	b82b883a 	mov	r21,r23
 1007a70:	bc000204 	addi	r16,r23,8
 1007a74:	20800215 	stw	r2,8(r4)
 1007a78:	11000315 	stw	r4,12(r2)
 1007a7c:	2980e436 	bltu	r5,r6,1007e10 <_realloc_r+0x548>
 1007a80:	008004c4 	movi	r2,19
 1007a84:	9009883a 	mov	r4,r18
 1007a88:	8011883a 	mov	r8,r16
 1007a8c:	11800f2e 	bgeu	r2,r6,1007acc <_realloc_r+0x204>
 1007a90:	90800017 	ldw	r2,0(r18)
 1007a94:	ba000404 	addi	r8,r23,16
 1007a98:	91000204 	addi	r4,r18,8
 1007a9c:	b8800215 	stw	r2,8(r23)
 1007aa0:	90c00117 	ldw	r3,4(r18)
 1007aa4:	008006c4 	movi	r2,27
 1007aa8:	b8c00315 	stw	r3,12(r23)
 1007aac:	1180072e 	bgeu	r2,r6,1007acc <_realloc_r+0x204>
 1007ab0:	90c00217 	ldw	r3,8(r18)
 1007ab4:	ba000604 	addi	r8,r23,24
 1007ab8:	91000404 	addi	r4,r18,16
 1007abc:	b8c00415 	stw	r3,16(r23)
 1007ac0:	90800317 	ldw	r2,12(r18)
 1007ac4:	b8800515 	stw	r2,20(r23)
 1007ac8:	3140e726 	beq	r6,r5,1007e68 <_realloc_r+0x5a0>
 1007acc:	20800017 	ldw	r2,0(r4)
 1007ad0:	dd000017 	ldw	r20,0(sp)
 1007ad4:	b80f883a 	mov	r7,r23
 1007ad8:	40800015 	stw	r2,0(r8)
 1007adc:	20c00117 	ldw	r3,4(r4)
 1007ae0:	40c00115 	stw	r3,4(r8)
 1007ae4:	20800217 	ldw	r2,8(r4)
 1007ae8:	40800215 	stw	r2,8(r8)
 1007aec:	003f9706 	br	100794c <_realloc_r+0x84>
 1007af0:	98a9883a 	add	r20,r19,r2
 1007af4:	a1c01f16 	blt	r20,r7,1007b74 <_realloc_r+0x2ac>
 1007af8:	b8c00317 	ldw	r3,12(r23)
 1007afc:	b8800217 	ldw	r2,8(r23)
 1007b00:	99bfff04 	addi	r6,r19,-4
 1007b04:	01400904 	movi	r5,36
 1007b08:	b82b883a 	mov	r21,r23
 1007b0c:	18800215 	stw	r2,8(r3)
 1007b10:	10c00315 	stw	r3,12(r2)
 1007b14:	bc000204 	addi	r16,r23,8
 1007b18:	2980c336 	bltu	r5,r6,1007e28 <_realloc_r+0x560>
 1007b1c:	008004c4 	movi	r2,19
 1007b20:	9009883a 	mov	r4,r18
 1007b24:	8011883a 	mov	r8,r16
 1007b28:	11800f2e 	bgeu	r2,r6,1007b68 <_realloc_r+0x2a0>
 1007b2c:	90800017 	ldw	r2,0(r18)
 1007b30:	ba000404 	addi	r8,r23,16
 1007b34:	91000204 	addi	r4,r18,8
 1007b38:	b8800215 	stw	r2,8(r23)
 1007b3c:	90c00117 	ldw	r3,4(r18)
 1007b40:	008006c4 	movi	r2,27
 1007b44:	b8c00315 	stw	r3,12(r23)
 1007b48:	1180072e 	bgeu	r2,r6,1007b68 <_realloc_r+0x2a0>
 1007b4c:	90c00217 	ldw	r3,8(r18)
 1007b50:	ba000604 	addi	r8,r23,24
 1007b54:	91000404 	addi	r4,r18,16
 1007b58:	b8c00415 	stw	r3,16(r23)
 1007b5c:	90800317 	ldw	r2,12(r18)
 1007b60:	b8800515 	stw	r2,20(r23)
 1007b64:	3140c726 	beq	r6,r5,1007e84 <_realloc_r+0x5bc>
 1007b68:	20800017 	ldw	r2,0(r4)
 1007b6c:	b80f883a 	mov	r7,r23
 1007b70:	003fd906 	br	1007ad8 <_realloc_r+0x210>
 1007b74:	880b883a 	mov	r5,r17
 1007b78:	b009883a 	mov	r4,r22
 1007b7c:	1005e980 	call	1005e98 <_malloc_r>
 1007b80:	1023883a 	mov	r17,r2
 1007b84:	10002526 	beq	r2,zero,1007c1c <_realloc_r+0x354>
 1007b88:	80800117 	ldw	r2,4(r16)
 1007b8c:	00ffff84 	movi	r3,-2
 1007b90:	893ffe04 	addi	r4,r17,-8
 1007b94:	10c4703a 	and	r2,r2,r3
 1007b98:	8085883a 	add	r2,r16,r2
 1007b9c:	20809526 	beq	r4,r2,1007df4 <_realloc_r+0x52c>
 1007ba0:	99bfff04 	addi	r6,r19,-4
 1007ba4:	01c00904 	movi	r7,36
 1007ba8:	39804536 	bltu	r7,r6,1007cc0 <_realloc_r+0x3f8>
 1007bac:	008004c4 	movi	r2,19
 1007bb0:	9009883a 	mov	r4,r18
 1007bb4:	880b883a 	mov	r5,r17
 1007bb8:	11800f2e 	bgeu	r2,r6,1007bf8 <_realloc_r+0x330>
 1007bbc:	90800017 	ldw	r2,0(r18)
 1007bc0:	89400204 	addi	r5,r17,8
 1007bc4:	91000204 	addi	r4,r18,8
 1007bc8:	88800015 	stw	r2,0(r17)
 1007bcc:	90c00117 	ldw	r3,4(r18)
 1007bd0:	008006c4 	movi	r2,27
 1007bd4:	88c00115 	stw	r3,4(r17)
 1007bd8:	1180072e 	bgeu	r2,r6,1007bf8 <_realloc_r+0x330>
 1007bdc:	90c00217 	ldw	r3,8(r18)
 1007be0:	89400404 	addi	r5,r17,16
 1007be4:	91000404 	addi	r4,r18,16
 1007be8:	88c00215 	stw	r3,8(r17)
 1007bec:	90800317 	ldw	r2,12(r18)
 1007bf0:	88800315 	stw	r2,12(r17)
 1007bf4:	31c09126 	beq	r6,r7,1007e3c <_realloc_r+0x574>
 1007bf8:	20800017 	ldw	r2,0(r4)
 1007bfc:	28800015 	stw	r2,0(r5)
 1007c00:	20c00117 	ldw	r3,4(r4)
 1007c04:	28c00115 	stw	r3,4(r5)
 1007c08:	20800217 	ldw	r2,8(r4)
 1007c0c:	28800215 	stw	r2,8(r5)
 1007c10:	900b883a 	mov	r5,r18
 1007c14:	b009883a 	mov	r4,r22
 1007c18:	10053100 	call	1005310 <_free_r>
 1007c1c:	b009883a 	mov	r4,r22
 1007c20:	100ad780 	call	100ad78 <__malloc_unlock>
 1007c24:	003f5e06 	br	10079a0 <_realloc_r+0xd8>
 1007c28:	300b883a 	mov	r5,r6
 1007c2c:	dfc00b17 	ldw	ra,44(sp)
 1007c30:	df000a17 	ldw	fp,40(sp)
 1007c34:	ddc00917 	ldw	r23,36(sp)
 1007c38:	dd800817 	ldw	r22,32(sp)
 1007c3c:	dd400717 	ldw	r21,28(sp)
 1007c40:	dd000617 	ldw	r20,24(sp)
 1007c44:	dcc00517 	ldw	r19,20(sp)
 1007c48:	dc800417 	ldw	r18,16(sp)
 1007c4c:	dc400317 	ldw	r17,12(sp)
 1007c50:	dc000217 	ldw	r16,8(sp)
 1007c54:	dec00c04 	addi	sp,sp,48
 1007c58:	1005e981 	jmpi	1005e98 <_malloc_r>
 1007c5c:	38800117 	ldw	r2,4(r7)
 1007c60:	e54b883a 	add	r5,fp,r21
 1007c64:	31000054 	ori	r4,r6,1
 1007c68:	1080004c 	andi	r2,r2,1
 1007c6c:	1704b03a 	or	r2,r2,fp
 1007c70:	38800115 	stw	r2,4(r7)
 1007c74:	29000115 	stw	r4,4(r5)
 1007c78:	2987883a 	add	r3,r5,r6
 1007c7c:	18800117 	ldw	r2,4(r3)
 1007c80:	29400204 	addi	r5,r5,8
 1007c84:	b009883a 	mov	r4,r22
 1007c88:	10800054 	ori	r2,r2,1
 1007c8c:	18800115 	stw	r2,4(r3)
 1007c90:	10053100 	call	1005310 <_free_r>
 1007c94:	003f3806 	br	1007978 <_realloc_r+0xb0>
 1007c98:	000d883a 	mov	r6,zero
 1007c9c:	0009883a 	mov	r4,zero
 1007ca0:	003f5d06 	br	1007a18 <_realloc_r+0x150>
 1007ca4:	30c00217 	ldw	r3,8(r6)
 1007ca8:	30800317 	ldw	r2,12(r6)
 1007cac:	800f883a 	mov	r7,r16
 1007cb0:	84000204 	addi	r16,r16,8
 1007cb4:	10c00215 	stw	r3,8(r2)
 1007cb8:	18800315 	stw	r2,12(r3)
 1007cbc:	003f2306 	br	100794c <_realloc_r+0x84>
 1007cc0:	8809883a 	mov	r4,r17
 1007cc4:	900b883a 	mov	r5,r18
 1007cc8:	100675c0 	call	100675c <memmove>
 1007ccc:	003fd006 	br	1007c10 <_realloc_r+0x348>
 1007cd0:	30800117 	ldw	r2,4(r6)
 1007cd4:	e0c00404 	addi	r3,fp,16
 1007cd8:	1108703a 	and	r4,r2,r4
 1007cdc:	9905883a 	add	r2,r19,r4
 1007ce0:	10ff4d16 	blt	r2,r3,1007a18 <_realloc_r+0x150>
 1007ce4:	1705c83a 	sub	r2,r2,fp
 1007ce8:	870b883a 	add	r5,r16,fp
 1007cec:	10800054 	ori	r2,r2,1
 1007cf0:	28800115 	stw	r2,4(r5)
 1007cf4:	80c00117 	ldw	r3,4(r16)
 1007cf8:	00804074 	movhi	r2,257
 1007cfc:	10bc1404 	addi	r2,r2,-4016
 1007d00:	b009883a 	mov	r4,r22
 1007d04:	18c0004c 	andi	r3,r3,1
 1007d08:	e0c6b03a 	or	r3,fp,r3
 1007d0c:	11400215 	stw	r5,8(r2)
 1007d10:	80c00115 	stw	r3,4(r16)
 1007d14:	100ad780 	call	100ad78 <__malloc_unlock>
 1007d18:	84400204 	addi	r17,r16,8
 1007d1c:	003f2006 	br	10079a0 <_realloc_r+0xd8>
 1007d20:	98a9883a 	add	r20,r19,r2
 1007d24:	2509883a 	add	r4,r4,r20
 1007d28:	e0800404 	addi	r2,fp,16
 1007d2c:	d9000115 	stw	r4,4(sp)
 1007d30:	20bf7016 	blt	r4,r2,1007af4 <_realloc_r+0x22c>
 1007d34:	b8c00317 	ldw	r3,12(r23)
 1007d38:	b8800217 	ldw	r2,8(r23)
 1007d3c:	99bfff04 	addi	r6,r19,-4
 1007d40:	01400904 	movi	r5,36
 1007d44:	18800215 	stw	r2,8(r3)
 1007d48:	10c00315 	stw	r3,12(r2)
 1007d4c:	bc400204 	addi	r17,r23,8
 1007d50:	29804136 	bltu	r5,r6,1007e58 <_realloc_r+0x590>
 1007d54:	008004c4 	movi	r2,19
 1007d58:	9009883a 	mov	r4,r18
 1007d5c:	880f883a 	mov	r7,r17
 1007d60:	11800f2e 	bgeu	r2,r6,1007da0 <_realloc_r+0x4d8>
 1007d64:	90800017 	ldw	r2,0(r18)
 1007d68:	b9c00404 	addi	r7,r23,16
 1007d6c:	91000204 	addi	r4,r18,8
 1007d70:	b8800215 	stw	r2,8(r23)
 1007d74:	90c00117 	ldw	r3,4(r18)
 1007d78:	008006c4 	movi	r2,27
 1007d7c:	b8c00315 	stw	r3,12(r23)
 1007d80:	1180072e 	bgeu	r2,r6,1007da0 <_realloc_r+0x4d8>
 1007d84:	90c00217 	ldw	r3,8(r18)
 1007d88:	b9c00604 	addi	r7,r23,24
 1007d8c:	91000404 	addi	r4,r18,16
 1007d90:	b8c00415 	stw	r3,16(r23)
 1007d94:	90800317 	ldw	r2,12(r18)
 1007d98:	b8800515 	stw	r2,20(r23)
 1007d9c:	31404026 	beq	r6,r5,1007ea0 <_realloc_r+0x5d8>
 1007da0:	20800017 	ldw	r2,0(r4)
 1007da4:	38800015 	stw	r2,0(r7)
 1007da8:	20c00117 	ldw	r3,4(r4)
 1007dac:	38c00115 	stw	r3,4(r7)
 1007db0:	20800217 	ldw	r2,8(r4)
 1007db4:	38800215 	stw	r2,8(r7)
 1007db8:	d8c00117 	ldw	r3,4(sp)
 1007dbc:	bf0b883a 	add	r5,r23,fp
 1007dc0:	b009883a 	mov	r4,r22
 1007dc4:	1f05c83a 	sub	r2,r3,fp
 1007dc8:	10800054 	ori	r2,r2,1
 1007dcc:	28800115 	stw	r2,4(r5)
 1007dd0:	b8c00117 	ldw	r3,4(r23)
 1007dd4:	00804074 	movhi	r2,257
 1007dd8:	10bc1404 	addi	r2,r2,-4016
 1007ddc:	11400215 	stw	r5,8(r2)
 1007de0:	18c0004c 	andi	r3,r3,1
 1007de4:	e0c6b03a 	or	r3,fp,r3
 1007de8:	b8c00115 	stw	r3,4(r23)
 1007dec:	100ad780 	call	100ad78 <__malloc_unlock>
 1007df0:	003eeb06 	br	10079a0 <_realloc_r+0xd8>
 1007df4:	20800117 	ldw	r2,4(r4)
 1007df8:	00ffff04 	movi	r3,-4
 1007dfc:	800f883a 	mov	r7,r16
 1007e00:	10c4703a 	and	r2,r2,r3
 1007e04:	98a9883a 	add	r20,r19,r2
 1007e08:	84000204 	addi	r16,r16,8
 1007e0c:	003ecf06 	br	100794c <_realloc_r+0x84>
 1007e10:	900b883a 	mov	r5,r18
 1007e14:	8009883a 	mov	r4,r16
 1007e18:	100675c0 	call	100675c <memmove>
 1007e1c:	dd000017 	ldw	r20,0(sp)
 1007e20:	b80f883a 	mov	r7,r23
 1007e24:	003ec906 	br	100794c <_realloc_r+0x84>
 1007e28:	900b883a 	mov	r5,r18
 1007e2c:	8009883a 	mov	r4,r16
 1007e30:	100675c0 	call	100675c <memmove>
 1007e34:	b80f883a 	mov	r7,r23
 1007e38:	003ec406 	br	100794c <_realloc_r+0x84>
 1007e3c:	90c00417 	ldw	r3,16(r18)
 1007e40:	89400604 	addi	r5,r17,24
 1007e44:	91000604 	addi	r4,r18,24
 1007e48:	88c00415 	stw	r3,16(r17)
 1007e4c:	90800517 	ldw	r2,20(r18)
 1007e50:	88800515 	stw	r2,20(r17)
 1007e54:	003f6806 	br	1007bf8 <_realloc_r+0x330>
 1007e58:	900b883a 	mov	r5,r18
 1007e5c:	8809883a 	mov	r4,r17
 1007e60:	100675c0 	call	100675c <memmove>
 1007e64:	003fd406 	br	1007db8 <_realloc_r+0x4f0>
 1007e68:	90c00417 	ldw	r3,16(r18)
 1007e6c:	91000604 	addi	r4,r18,24
 1007e70:	ba000804 	addi	r8,r23,32
 1007e74:	b8c00615 	stw	r3,24(r23)
 1007e78:	90800517 	ldw	r2,20(r18)
 1007e7c:	b8800715 	stw	r2,28(r23)
 1007e80:	003f1206 	br	1007acc <_realloc_r+0x204>
 1007e84:	90c00417 	ldw	r3,16(r18)
 1007e88:	91000604 	addi	r4,r18,24
 1007e8c:	ba000804 	addi	r8,r23,32
 1007e90:	b8c00615 	stw	r3,24(r23)
 1007e94:	90800517 	ldw	r2,20(r18)
 1007e98:	b8800715 	stw	r2,28(r23)
 1007e9c:	003f3206 	br	1007b68 <_realloc_r+0x2a0>
 1007ea0:	90c00417 	ldw	r3,16(r18)
 1007ea4:	91000604 	addi	r4,r18,24
 1007ea8:	b9c00804 	addi	r7,r23,32
 1007eac:	b8c00615 	stw	r3,24(r23)
 1007eb0:	90800517 	ldw	r2,20(r18)
 1007eb4:	b8800715 	stw	r2,28(r23)
 1007eb8:	003fb906 	br	1007da0 <_realloc_r+0x4d8>

01007ebc <__isinfd>:
 1007ebc:	200d883a 	mov	r6,r4
 1007ec0:	0109c83a 	sub	r4,zero,r4
 1007ec4:	2188b03a 	or	r4,r4,r6
 1007ec8:	2008d7fa 	srli	r4,r4,31
 1007ecc:	00a00034 	movhi	r2,32768
 1007ed0:	10bfffc4 	addi	r2,r2,-1
 1007ed4:	1144703a 	and	r2,r2,r5
 1007ed8:	2088b03a 	or	r4,r4,r2
 1007edc:	009ffc34 	movhi	r2,32752
 1007ee0:	1105c83a 	sub	r2,r2,r4
 1007ee4:	0087c83a 	sub	r3,zero,r2
 1007ee8:	10c4b03a 	or	r2,r2,r3
 1007eec:	1004d7fa 	srli	r2,r2,31
 1007ef0:	00c00044 	movi	r3,1
 1007ef4:	1885c83a 	sub	r2,r3,r2
 1007ef8:	f800283a 	ret

01007efc <__isnand>:
 1007efc:	200d883a 	mov	r6,r4
 1007f00:	0109c83a 	sub	r4,zero,r4
 1007f04:	2188b03a 	or	r4,r4,r6
 1007f08:	2008d7fa 	srli	r4,r4,31
 1007f0c:	00a00034 	movhi	r2,32768
 1007f10:	10bfffc4 	addi	r2,r2,-1
 1007f14:	1144703a 	and	r2,r2,r5
 1007f18:	2088b03a 	or	r4,r4,r2
 1007f1c:	009ffc34 	movhi	r2,32752
 1007f20:	1105c83a 	sub	r2,r2,r4
 1007f24:	1004d7fa 	srli	r2,r2,31
 1007f28:	f800283a 	ret

01007f2c <_sbrk_r>:
 1007f2c:	defffd04 	addi	sp,sp,-12
 1007f30:	dc000015 	stw	r16,0(sp)
 1007f34:	04004074 	movhi	r16,257
 1007f38:	8408bf04 	addi	r16,r16,8956
 1007f3c:	dc400115 	stw	r17,4(sp)
 1007f40:	80000015 	stw	zero,0(r16)
 1007f44:	2023883a 	mov	r17,r4
 1007f48:	2809883a 	mov	r4,r5
 1007f4c:	dfc00215 	stw	ra,8(sp)
 1007f50:	100b2100 	call	100b210 <sbrk>
 1007f54:	1007883a 	mov	r3,r2
 1007f58:	00bfffc4 	movi	r2,-1
 1007f5c:	18800626 	beq	r3,r2,1007f78 <_sbrk_r+0x4c>
 1007f60:	1805883a 	mov	r2,r3
 1007f64:	dfc00217 	ldw	ra,8(sp)
 1007f68:	dc400117 	ldw	r17,4(sp)
 1007f6c:	dc000017 	ldw	r16,0(sp)
 1007f70:	dec00304 	addi	sp,sp,12
 1007f74:	f800283a 	ret
 1007f78:	80800017 	ldw	r2,0(r16)
 1007f7c:	103ff826 	beq	r2,zero,1007f60 <_sbrk_r+0x34>
 1007f80:	88800015 	stw	r2,0(r17)
 1007f84:	1805883a 	mov	r2,r3
 1007f88:	dfc00217 	ldw	ra,8(sp)
 1007f8c:	dc400117 	ldw	r17,4(sp)
 1007f90:	dc000017 	ldw	r16,0(sp)
 1007f94:	dec00304 	addi	sp,sp,12
 1007f98:	f800283a 	ret

01007f9c <__sclose>:
 1007f9c:	2940038f 	ldh	r5,14(r5)
 1007fa0:	10082d01 	jmpi	10082d0 <_close_r>

01007fa4 <__sseek>:
 1007fa4:	defffe04 	addi	sp,sp,-8
 1007fa8:	dc000015 	stw	r16,0(sp)
 1007fac:	2821883a 	mov	r16,r5
 1007fb0:	2940038f 	ldh	r5,14(r5)
 1007fb4:	dfc00115 	stw	ra,4(sp)
 1007fb8:	10085480 	call	1008548 <_lseek_r>
 1007fbc:	1007883a 	mov	r3,r2
 1007fc0:	00bfffc4 	movi	r2,-1
 1007fc4:	18800926 	beq	r3,r2,1007fec <__sseek+0x48>
 1007fc8:	8080030b 	ldhu	r2,12(r16)
 1007fcc:	80c01415 	stw	r3,80(r16)
 1007fd0:	10840014 	ori	r2,r2,4096
 1007fd4:	8080030d 	sth	r2,12(r16)
 1007fd8:	1805883a 	mov	r2,r3
 1007fdc:	dfc00117 	ldw	ra,4(sp)
 1007fe0:	dc000017 	ldw	r16,0(sp)
 1007fe4:	dec00204 	addi	sp,sp,8
 1007fe8:	f800283a 	ret
 1007fec:	8080030b 	ldhu	r2,12(r16)
 1007ff0:	10bbffcc 	andi	r2,r2,61439
 1007ff4:	8080030d 	sth	r2,12(r16)
 1007ff8:	1805883a 	mov	r2,r3
 1007ffc:	dfc00117 	ldw	ra,4(sp)
 1008000:	dc000017 	ldw	r16,0(sp)
 1008004:	dec00204 	addi	sp,sp,8
 1008008:	f800283a 	ret

0100800c <__swrite>:
 100800c:	2880030b 	ldhu	r2,12(r5)
 1008010:	defffb04 	addi	sp,sp,-20
 1008014:	dcc00315 	stw	r19,12(sp)
 1008018:	1080400c 	andi	r2,r2,256
 100801c:	dc800215 	stw	r18,8(sp)
 1008020:	dc400115 	stw	r17,4(sp)
 1008024:	dc000015 	stw	r16,0(sp)
 1008028:	3027883a 	mov	r19,r6
 100802c:	3825883a 	mov	r18,r7
 1008030:	dfc00415 	stw	ra,16(sp)
 1008034:	2821883a 	mov	r16,r5
 1008038:	000d883a 	mov	r6,zero
 100803c:	01c00084 	movi	r7,2
 1008040:	2023883a 	mov	r17,r4
 1008044:	10000226 	beq	r2,zero,1008050 <__swrite+0x44>
 1008048:	2940038f 	ldh	r5,14(r5)
 100804c:	10085480 	call	1008548 <_lseek_r>
 1008050:	8080030b 	ldhu	r2,12(r16)
 1008054:	8140038f 	ldh	r5,14(r16)
 1008058:	8809883a 	mov	r4,r17
 100805c:	10bbffcc 	andi	r2,r2,61439
 1008060:	980d883a 	mov	r6,r19
 1008064:	900f883a 	mov	r7,r18
 1008068:	8080030d 	sth	r2,12(r16)
 100806c:	dfc00417 	ldw	ra,16(sp)
 1008070:	dcc00317 	ldw	r19,12(sp)
 1008074:	dc800217 	ldw	r18,8(sp)
 1008078:	dc400117 	ldw	r17,4(sp)
 100807c:	dc000017 	ldw	r16,0(sp)
 1008080:	dec00504 	addi	sp,sp,20
 1008084:	10081a41 	jmpi	10081a4 <_write_r>

01008088 <__sread>:
 1008088:	defffe04 	addi	sp,sp,-8
 100808c:	dc000015 	stw	r16,0(sp)
 1008090:	2821883a 	mov	r16,r5
 1008094:	2940038f 	ldh	r5,14(r5)
 1008098:	dfc00115 	stw	ra,4(sp)
 100809c:	10085c00 	call	10085c0 <_read_r>
 10080a0:	1007883a 	mov	r3,r2
 10080a4:	10000816 	blt	r2,zero,10080c8 <__sread+0x40>
 10080a8:	80801417 	ldw	r2,80(r16)
 10080ac:	10c5883a 	add	r2,r2,r3
 10080b0:	80801415 	stw	r2,80(r16)
 10080b4:	1805883a 	mov	r2,r3
 10080b8:	dfc00117 	ldw	ra,4(sp)
 10080bc:	dc000017 	ldw	r16,0(sp)
 10080c0:	dec00204 	addi	sp,sp,8
 10080c4:	f800283a 	ret
 10080c8:	8080030b 	ldhu	r2,12(r16)
 10080cc:	10bbffcc 	andi	r2,r2,61439
 10080d0:	8080030d 	sth	r2,12(r16)
 10080d4:	1805883a 	mov	r2,r3
 10080d8:	dfc00117 	ldw	ra,4(sp)
 10080dc:	dc000017 	ldw	r16,0(sp)
 10080e0:	dec00204 	addi	sp,sp,8
 10080e4:	f800283a 	ret

010080e8 <strcmp>:
 10080e8:	2144b03a 	or	r2,r4,r5
 10080ec:	108000cc 	andi	r2,r2,3
 10080f0:	10001d1e 	bne	r2,zero,1008168 <strcmp+0x80>
 10080f4:	200f883a 	mov	r7,r4
 10080f8:	28800017 	ldw	r2,0(r5)
 10080fc:	21000017 	ldw	r4,0(r4)
 1008100:	280d883a 	mov	r6,r5
 1008104:	2080161e 	bne	r4,r2,1008160 <strcmp+0x78>
 1008108:	023fbff4 	movhi	r8,65279
 100810c:	423fbfc4 	addi	r8,r8,-257
 1008110:	2207883a 	add	r3,r4,r8
 1008114:	01602074 	movhi	r5,32897
 1008118:	29602004 	addi	r5,r5,-32640
 100811c:	1946703a 	and	r3,r3,r5
 1008120:	0104303a 	nor	r2,zero,r4
 1008124:	10c4703a 	and	r2,r2,r3
 1008128:	10001c1e 	bne	r2,zero,100819c <strcmp+0xb4>
 100812c:	4013883a 	mov	r9,r8
 1008130:	2811883a 	mov	r8,r5
 1008134:	00000106 	br	100813c <strcmp+0x54>
 1008138:	1800181e 	bne	r3,zero,100819c <strcmp+0xb4>
 100813c:	39c00104 	addi	r7,r7,4
 1008140:	39000017 	ldw	r4,0(r7)
 1008144:	31800104 	addi	r6,r6,4
 1008148:	31400017 	ldw	r5,0(r6)
 100814c:	2245883a 	add	r2,r4,r9
 1008150:	1204703a 	and	r2,r2,r8
 1008154:	0106303a 	nor	r3,zero,r4
 1008158:	1886703a 	and	r3,r3,r2
 100815c:	217ff626 	beq	r4,r5,1008138 <strcmp+0x50>
 1008160:	3809883a 	mov	r4,r7
 1008164:	300b883a 	mov	r5,r6
 1008168:	20c00007 	ldb	r3,0(r4)
 100816c:	1800051e 	bne	r3,zero,1008184 <strcmp+0x9c>
 1008170:	00000606 	br	100818c <strcmp+0xa4>
 1008174:	21000044 	addi	r4,r4,1
 1008178:	20c00007 	ldb	r3,0(r4)
 100817c:	29400044 	addi	r5,r5,1
 1008180:	18000226 	beq	r3,zero,100818c <strcmp+0xa4>
 1008184:	28800007 	ldb	r2,0(r5)
 1008188:	18bffa26 	beq	r3,r2,1008174 <strcmp+0x8c>
 100818c:	20c00003 	ldbu	r3,0(r4)
 1008190:	28800003 	ldbu	r2,0(r5)
 1008194:	1885c83a 	sub	r2,r3,r2
 1008198:	f800283a 	ret
 100819c:	0005883a 	mov	r2,zero
 10081a0:	f800283a 	ret

010081a4 <_write_r>:
 10081a4:	defffd04 	addi	sp,sp,-12
 10081a8:	dc000015 	stw	r16,0(sp)
 10081ac:	04004074 	movhi	r16,257
 10081b0:	8408bf04 	addi	r16,r16,8956
 10081b4:	dc400115 	stw	r17,4(sp)
 10081b8:	80000015 	stw	zero,0(r16)
 10081bc:	2023883a 	mov	r17,r4
 10081c0:	2809883a 	mov	r4,r5
 10081c4:	300b883a 	mov	r5,r6
 10081c8:	380d883a 	mov	r6,r7
 10081cc:	dfc00215 	stw	ra,8(sp)
 10081d0:	100b4a00 	call	100b4a0 <write>
 10081d4:	1007883a 	mov	r3,r2
 10081d8:	00bfffc4 	movi	r2,-1
 10081dc:	18800626 	beq	r3,r2,10081f8 <_write_r+0x54>
 10081e0:	1805883a 	mov	r2,r3
 10081e4:	dfc00217 	ldw	ra,8(sp)
 10081e8:	dc400117 	ldw	r17,4(sp)
 10081ec:	dc000017 	ldw	r16,0(sp)
 10081f0:	dec00304 	addi	sp,sp,12
 10081f4:	f800283a 	ret
 10081f8:	80800017 	ldw	r2,0(r16)
 10081fc:	103ff826 	beq	r2,zero,10081e0 <_write_r+0x3c>
 1008200:	88800015 	stw	r2,0(r17)
 1008204:	1805883a 	mov	r2,r3
 1008208:	dfc00217 	ldw	ra,8(sp)
 100820c:	dc400117 	ldw	r17,4(sp)
 1008210:	dc000017 	ldw	r16,0(sp)
 1008214:	dec00304 	addi	sp,sp,12
 1008218:	f800283a 	ret

0100821c <_calloc_r>:
 100821c:	298b383a 	mul	r5,r5,r6
 1008220:	defffe04 	addi	sp,sp,-8
 1008224:	dc000015 	stw	r16,0(sp)
 1008228:	dfc00115 	stw	ra,4(sp)
 100822c:	1005e980 	call	1005e98 <_malloc_r>
 1008230:	1021883a 	mov	r16,r2
 1008234:	01c00904 	movi	r7,36
 1008238:	10000d26 	beq	r2,zero,1008270 <_calloc_r+0x54>
 100823c:	10ffff17 	ldw	r3,-4(r2)
 1008240:	1009883a 	mov	r4,r2
 1008244:	00bfff04 	movi	r2,-4
 1008248:	1886703a 	and	r3,r3,r2
 100824c:	1887883a 	add	r3,r3,r2
 1008250:	180d883a 	mov	r6,r3
 1008254:	000b883a 	mov	r5,zero
 1008258:	38c01736 	bltu	r7,r3,10082b8 <_calloc_r+0x9c>
 100825c:	008004c4 	movi	r2,19
 1008260:	10c00836 	bltu	r2,r3,1008284 <_calloc_r+0x68>
 1008264:	20000215 	stw	zero,8(r4)
 1008268:	20000015 	stw	zero,0(r4)
 100826c:	20000115 	stw	zero,4(r4)
 1008270:	8005883a 	mov	r2,r16
 1008274:	dfc00117 	ldw	ra,4(sp)
 1008278:	dc000017 	ldw	r16,0(sp)
 100827c:	dec00204 	addi	sp,sp,8
 1008280:	f800283a 	ret
 1008284:	008006c4 	movi	r2,27
 1008288:	80000015 	stw	zero,0(r16)
 100828c:	80000115 	stw	zero,4(r16)
 1008290:	81000204 	addi	r4,r16,8
 1008294:	10fff32e 	bgeu	r2,r3,1008264 <_calloc_r+0x48>
 1008298:	80000215 	stw	zero,8(r16)
 100829c:	80000315 	stw	zero,12(r16)
 10082a0:	81000404 	addi	r4,r16,16
 10082a4:	19ffef1e 	bne	r3,r7,1008264 <_calloc_r+0x48>
 10082a8:	81000604 	addi	r4,r16,24
 10082ac:	80000415 	stw	zero,16(r16)
 10082b0:	80000515 	stw	zero,20(r16)
 10082b4:	003feb06 	br	1008264 <_calloc_r+0x48>
 10082b8:	100683c0 	call	100683c <memset>
 10082bc:	8005883a 	mov	r2,r16
 10082c0:	dfc00117 	ldw	ra,4(sp)
 10082c4:	dc000017 	ldw	r16,0(sp)
 10082c8:	dec00204 	addi	sp,sp,8
 10082cc:	f800283a 	ret

010082d0 <_close_r>:
 10082d0:	defffd04 	addi	sp,sp,-12
 10082d4:	dc000015 	stw	r16,0(sp)
 10082d8:	04004074 	movhi	r16,257
 10082dc:	8408bf04 	addi	r16,r16,8956
 10082e0:	dc400115 	stw	r17,4(sp)
 10082e4:	80000015 	stw	zero,0(r16)
 10082e8:	2023883a 	mov	r17,r4
 10082ec:	2809883a 	mov	r4,r5
 10082f0:	dfc00215 	stw	ra,8(sp)
 10082f4:	100a6d40 	call	100a6d4 <close>
 10082f8:	1007883a 	mov	r3,r2
 10082fc:	00bfffc4 	movi	r2,-1
 1008300:	18800626 	beq	r3,r2,100831c <_close_r+0x4c>
 1008304:	1805883a 	mov	r2,r3
 1008308:	dfc00217 	ldw	ra,8(sp)
 100830c:	dc400117 	ldw	r17,4(sp)
 1008310:	dc000017 	ldw	r16,0(sp)
 1008314:	dec00304 	addi	sp,sp,12
 1008318:	f800283a 	ret
 100831c:	80800017 	ldw	r2,0(r16)
 1008320:	103ff826 	beq	r2,zero,1008304 <_close_r+0x34>
 1008324:	88800015 	stw	r2,0(r17)
 1008328:	1805883a 	mov	r2,r3
 100832c:	dfc00217 	ldw	ra,8(sp)
 1008330:	dc400117 	ldw	r17,4(sp)
 1008334:	dc000017 	ldw	r16,0(sp)
 1008338:	dec00304 	addi	sp,sp,12
 100833c:	f800283a 	ret

01008340 <_fclose_r>:
 1008340:	defffc04 	addi	sp,sp,-16
 1008344:	dc400115 	stw	r17,4(sp)
 1008348:	dc000015 	stw	r16,0(sp)
 100834c:	dfc00315 	stw	ra,12(sp)
 1008350:	dc800215 	stw	r18,8(sp)
 1008354:	2821883a 	mov	r16,r5
 1008358:	2023883a 	mov	r17,r4
 100835c:	28002926 	beq	r5,zero,1008404 <_fclose_r+0xc4>
 1008360:	1004f7c0 	call	1004f7c <__sfp_lock_acquire>
 1008364:	88000226 	beq	r17,zero,1008370 <_fclose_r+0x30>
 1008368:	88800e17 	ldw	r2,56(r17)
 100836c:	10002d26 	beq	r2,zero,1008424 <_fclose_r+0xe4>
 1008370:	8080030f 	ldh	r2,12(r16)
 1008374:	10002226 	beq	r2,zero,1008400 <_fclose_r+0xc0>
 1008378:	8809883a 	mov	r4,r17
 100837c:	800b883a 	mov	r5,r16
 1008380:	1004cf40 	call	1004cf4 <_fflush_r>
 1008384:	1025883a 	mov	r18,r2
 1008388:	80800b17 	ldw	r2,44(r16)
 100838c:	10000426 	beq	r2,zero,10083a0 <_fclose_r+0x60>
 1008390:	81400717 	ldw	r5,28(r16)
 1008394:	8809883a 	mov	r4,r17
 1008398:	103ee83a 	callr	r2
 100839c:	10002a16 	blt	r2,zero,1008448 <_fclose_r+0x108>
 10083a0:	8080030b 	ldhu	r2,12(r16)
 10083a4:	1080200c 	andi	r2,r2,128
 10083a8:	1000231e 	bne	r2,zero,1008438 <_fclose_r+0xf8>
 10083ac:	81400c17 	ldw	r5,48(r16)
 10083b0:	28000526 	beq	r5,zero,10083c8 <_fclose_r+0x88>
 10083b4:	80801004 	addi	r2,r16,64
 10083b8:	28800226 	beq	r5,r2,10083c4 <_fclose_r+0x84>
 10083bc:	8809883a 	mov	r4,r17
 10083c0:	10053100 	call	1005310 <_free_r>
 10083c4:	80000c15 	stw	zero,48(r16)
 10083c8:	81401117 	ldw	r5,68(r16)
 10083cc:	28000326 	beq	r5,zero,10083dc <_fclose_r+0x9c>
 10083d0:	8809883a 	mov	r4,r17
 10083d4:	10053100 	call	1005310 <_free_r>
 10083d8:	80001115 	stw	zero,68(r16)
 10083dc:	8000030d 	sth	zero,12(r16)
 10083e0:	1004f800 	call	1004f80 <__sfp_lock_release>
 10083e4:	9005883a 	mov	r2,r18
 10083e8:	dfc00317 	ldw	ra,12(sp)
 10083ec:	dc800217 	ldw	r18,8(sp)
 10083f0:	dc400117 	ldw	r17,4(sp)
 10083f4:	dc000017 	ldw	r16,0(sp)
 10083f8:	dec00404 	addi	sp,sp,16
 10083fc:	f800283a 	ret
 1008400:	1004f800 	call	1004f80 <__sfp_lock_release>
 1008404:	0025883a 	mov	r18,zero
 1008408:	9005883a 	mov	r2,r18
 100840c:	dfc00317 	ldw	ra,12(sp)
 1008410:	dc800217 	ldw	r18,8(sp)
 1008414:	dc400117 	ldw	r17,4(sp)
 1008418:	dc000017 	ldw	r16,0(sp)
 100841c:	dec00404 	addi	sp,sp,16
 1008420:	f800283a 	ret
 1008424:	8809883a 	mov	r4,r17
 1008428:	1004f8c0 	call	1004f8c <__sinit>
 100842c:	8080030f 	ldh	r2,12(r16)
 1008430:	103fd11e 	bne	r2,zero,1008378 <_fclose_r+0x38>
 1008434:	003ff206 	br	1008400 <_fclose_r+0xc0>
 1008438:	81400417 	ldw	r5,16(r16)
 100843c:	8809883a 	mov	r4,r17
 1008440:	10053100 	call	1005310 <_free_r>
 1008444:	003fd906 	br	10083ac <_fclose_r+0x6c>
 1008448:	04bfffc4 	movi	r18,-1
 100844c:	003fd406 	br	10083a0 <_fclose_r+0x60>

01008450 <fclose>:
 1008450:	00804074 	movhi	r2,257
 1008454:	1081d504 	addi	r2,r2,1876
 1008458:	200b883a 	mov	r5,r4
 100845c:	11000017 	ldw	r4,0(r2)
 1008460:	10083401 	jmpi	1008340 <_fclose_r>

01008464 <_fstat_r>:
 1008464:	defffd04 	addi	sp,sp,-12
 1008468:	dc000015 	stw	r16,0(sp)
 100846c:	04004074 	movhi	r16,257
 1008470:	8408bf04 	addi	r16,r16,8956
 1008474:	dc400115 	stw	r17,4(sp)
 1008478:	80000015 	stw	zero,0(r16)
 100847c:	2023883a 	mov	r17,r4
 1008480:	2809883a 	mov	r4,r5
 1008484:	300b883a 	mov	r5,r6
 1008488:	dfc00215 	stw	ra,8(sp)
 100848c:	100a85c0 	call	100a85c <fstat>
 1008490:	1007883a 	mov	r3,r2
 1008494:	00bfffc4 	movi	r2,-1
 1008498:	18800626 	beq	r3,r2,10084b4 <_fstat_r+0x50>
 100849c:	1805883a 	mov	r2,r3
 10084a0:	dfc00217 	ldw	ra,8(sp)
 10084a4:	dc400117 	ldw	r17,4(sp)
 10084a8:	dc000017 	ldw	r16,0(sp)
 10084ac:	dec00304 	addi	sp,sp,12
 10084b0:	f800283a 	ret
 10084b4:	80800017 	ldw	r2,0(r16)
 10084b8:	103ff826 	beq	r2,zero,100849c <_fstat_r+0x38>
 10084bc:	88800015 	stw	r2,0(r17)
 10084c0:	1805883a 	mov	r2,r3
 10084c4:	dfc00217 	ldw	ra,8(sp)
 10084c8:	dc400117 	ldw	r17,4(sp)
 10084cc:	dc000017 	ldw	r16,0(sp)
 10084d0:	dec00304 	addi	sp,sp,12
 10084d4:	f800283a 	ret

010084d8 <_isatty_r>:
 10084d8:	defffd04 	addi	sp,sp,-12
 10084dc:	dc000015 	stw	r16,0(sp)
 10084e0:	04004074 	movhi	r16,257
 10084e4:	8408bf04 	addi	r16,r16,8956
 10084e8:	dc400115 	stw	r17,4(sp)
 10084ec:	80000015 	stw	zero,0(r16)
 10084f0:	2023883a 	mov	r17,r4
 10084f4:	2809883a 	mov	r4,r5
 10084f8:	dfc00215 	stw	ra,8(sp)
 10084fc:	100a9900 	call	100a990 <isatty>
 1008500:	1007883a 	mov	r3,r2
 1008504:	00bfffc4 	movi	r2,-1
 1008508:	18800626 	beq	r3,r2,1008524 <_isatty_r+0x4c>
 100850c:	1805883a 	mov	r2,r3
 1008510:	dfc00217 	ldw	ra,8(sp)
 1008514:	dc400117 	ldw	r17,4(sp)
 1008518:	dc000017 	ldw	r16,0(sp)
 100851c:	dec00304 	addi	sp,sp,12
 1008520:	f800283a 	ret
 1008524:	80800017 	ldw	r2,0(r16)
 1008528:	103ff826 	beq	r2,zero,100850c <_isatty_r+0x34>
 100852c:	88800015 	stw	r2,0(r17)
 1008530:	1805883a 	mov	r2,r3
 1008534:	dfc00217 	ldw	ra,8(sp)
 1008538:	dc400117 	ldw	r17,4(sp)
 100853c:	dc000017 	ldw	r16,0(sp)
 1008540:	dec00304 	addi	sp,sp,12
 1008544:	f800283a 	ret

01008548 <_lseek_r>:
 1008548:	defffd04 	addi	sp,sp,-12
 100854c:	dc000015 	stw	r16,0(sp)
 1008550:	04004074 	movhi	r16,257
 1008554:	8408bf04 	addi	r16,r16,8956
 1008558:	dc400115 	stw	r17,4(sp)
 100855c:	80000015 	stw	zero,0(r16)
 1008560:	2023883a 	mov	r17,r4
 1008564:	2809883a 	mov	r4,r5
 1008568:	300b883a 	mov	r5,r6
 100856c:	380d883a 	mov	r6,r7
 1008570:	dfc00215 	stw	ra,8(sp)
 1008574:	100ab9c0 	call	100ab9c <lseek>
 1008578:	1007883a 	mov	r3,r2
 100857c:	00bfffc4 	movi	r2,-1
 1008580:	18800626 	beq	r3,r2,100859c <_lseek_r+0x54>
 1008584:	1805883a 	mov	r2,r3
 1008588:	dfc00217 	ldw	ra,8(sp)
 100858c:	dc400117 	ldw	r17,4(sp)
 1008590:	dc000017 	ldw	r16,0(sp)
 1008594:	dec00304 	addi	sp,sp,12
 1008598:	f800283a 	ret
 100859c:	80800017 	ldw	r2,0(r16)
 10085a0:	103ff826 	beq	r2,zero,1008584 <_lseek_r+0x3c>
 10085a4:	88800015 	stw	r2,0(r17)
 10085a8:	1805883a 	mov	r2,r3
 10085ac:	dfc00217 	ldw	ra,8(sp)
 10085b0:	dc400117 	ldw	r17,4(sp)
 10085b4:	dc000017 	ldw	r16,0(sp)
 10085b8:	dec00304 	addi	sp,sp,12
 10085bc:	f800283a 	ret

010085c0 <_read_r>:
 10085c0:	defffd04 	addi	sp,sp,-12
 10085c4:	dc000015 	stw	r16,0(sp)
 10085c8:	04004074 	movhi	r16,257
 10085cc:	8408bf04 	addi	r16,r16,8956
 10085d0:	dc400115 	stw	r17,4(sp)
 10085d4:	80000015 	stw	zero,0(r16)
 10085d8:	2023883a 	mov	r17,r4
 10085dc:	2809883a 	mov	r4,r5
 10085e0:	300b883a 	mov	r5,r6
 10085e4:	380d883a 	mov	r6,r7
 10085e8:	dfc00215 	stw	ra,8(sp)
 10085ec:	100b0300 	call	100b030 <read>
 10085f0:	1007883a 	mov	r3,r2
 10085f4:	00bfffc4 	movi	r2,-1
 10085f8:	18800626 	beq	r3,r2,1008614 <_read_r+0x54>
 10085fc:	1805883a 	mov	r2,r3
 1008600:	dfc00217 	ldw	ra,8(sp)
 1008604:	dc400117 	ldw	r17,4(sp)
 1008608:	dc000017 	ldw	r16,0(sp)
 100860c:	dec00304 	addi	sp,sp,12
 1008610:	f800283a 	ret
 1008614:	80800017 	ldw	r2,0(r16)
 1008618:	103ff826 	beq	r2,zero,10085fc <_read_r+0x3c>
 100861c:	88800015 	stw	r2,0(r17)
 1008620:	1805883a 	mov	r2,r3
 1008624:	dfc00217 	ldw	ra,8(sp)
 1008628:	dc400117 	ldw	r17,4(sp)
 100862c:	dc000017 	ldw	r16,0(sp)
 1008630:	dec00304 	addi	sp,sp,12
 1008634:	f800283a 	ret

01008638 <__udivdi3>:
 1008638:	defff004 	addi	sp,sp,-64
 100863c:	2005883a 	mov	r2,r4
 1008640:	3011883a 	mov	r8,r6
 1008644:	df000e15 	stw	fp,56(sp)
 1008648:	dd000a15 	stw	r20,40(sp)
 100864c:	dc000615 	stw	r16,24(sp)
 1008650:	dfc00f15 	stw	ra,60(sp)
 1008654:	ddc00d15 	stw	r23,52(sp)
 1008658:	dd800c15 	stw	r22,48(sp)
 100865c:	dd400b15 	stw	r21,44(sp)
 1008660:	dcc00915 	stw	r19,36(sp)
 1008664:	dc800815 	stw	r18,32(sp)
 1008668:	dc400715 	stw	r17,28(sp)
 100866c:	4021883a 	mov	r16,r8
 1008670:	1039883a 	mov	fp,r2
 1008674:	2829883a 	mov	r20,r5
 1008678:	38003b1e 	bne	r7,zero,1008768 <__udivdi3+0x130>
 100867c:	2a005c36 	bltu	r5,r8,10087f0 <__udivdi3+0x1b8>
 1008680:	4000a626 	beq	r8,zero,100891c <__udivdi3+0x2e4>
 1008684:	00bfffd4 	movui	r2,65535
 1008688:	14009e36 	bltu	r2,r16,1008904 <__udivdi3+0x2cc>
 100868c:	00803fc4 	movi	r2,255
 1008690:	14013d36 	bltu	r2,r16,1008b88 <__udivdi3+0x550>
 1008694:	000b883a 	mov	r5,zero
 1008698:	0005883a 	mov	r2,zero
 100869c:	8084d83a 	srl	r2,r16,r2
 10086a0:	01004074 	movhi	r4,257
 10086a4:	213a1d04 	addi	r4,r4,-6028
 10086a8:	01800804 	movi	r6,32
 10086ac:	1105883a 	add	r2,r2,r4
 10086b0:	10c00003 	ldbu	r3,0(r2)
 10086b4:	28c7883a 	add	r3,r5,r3
 10086b8:	30edc83a 	sub	r22,r6,r3
 10086bc:	b000ee1e 	bne	r22,zero,1008a78 <__udivdi3+0x440>
 10086c0:	802ad43a 	srli	r21,r16,16
 10086c4:	00800044 	movi	r2,1
 10086c8:	a423c83a 	sub	r17,r20,r16
 10086cc:	85ffffcc 	andi	r23,r16,65535
 10086d0:	d8800315 	stw	r2,12(sp)
 10086d4:	8809883a 	mov	r4,r17
 10086d8:	a80b883a 	mov	r5,r21
 10086dc:	100a42c0 	call	100a42c <__udivsi3>
 10086e0:	8809883a 	mov	r4,r17
 10086e4:	a80b883a 	mov	r5,r21
 10086e8:	102d883a 	mov	r22,r2
 10086ec:	100a4340 	call	100a434 <__umodsi3>
 10086f0:	1004943a 	slli	r2,r2,16
 10086f4:	e006d43a 	srli	r3,fp,16
 10086f8:	bda3383a 	mul	r17,r23,r22
 10086fc:	10c4b03a 	or	r2,r2,r3
 1008700:	1440042e 	bgeu	r2,r17,1008714 <__udivdi3+0xdc>
 1008704:	1405883a 	add	r2,r2,r16
 1008708:	b5bfffc4 	addi	r22,r22,-1
 100870c:	14000136 	bltu	r2,r16,1008714 <__udivdi3+0xdc>
 1008710:	14413d36 	bltu	r2,r17,1008c08 <__udivdi3+0x5d0>
 1008714:	1463c83a 	sub	r17,r2,r17
 1008718:	8809883a 	mov	r4,r17
 100871c:	a80b883a 	mov	r5,r21
 1008720:	100a42c0 	call	100a42c <__udivsi3>
 1008724:	8809883a 	mov	r4,r17
 1008728:	a80b883a 	mov	r5,r21
 100872c:	1029883a 	mov	r20,r2
 1008730:	100a4340 	call	100a434 <__umodsi3>
 1008734:	1004943a 	slli	r2,r2,16
 1008738:	bd09383a 	mul	r4,r23,r20
 100873c:	e0ffffcc 	andi	r3,fp,65535
 1008740:	10c4b03a 	or	r2,r2,r3
 1008744:	1100042e 	bgeu	r2,r4,1008758 <__udivdi3+0x120>
 1008748:	8085883a 	add	r2,r16,r2
 100874c:	a53fffc4 	addi	r20,r20,-1
 1008750:	14000136 	bltu	r2,r16,1008758 <__udivdi3+0x120>
 1008754:	11012036 	bltu	r2,r4,1008bd8 <__udivdi3+0x5a0>
 1008758:	b004943a 	slli	r2,r22,16
 100875c:	d9000317 	ldw	r4,12(sp)
 1008760:	a084b03a 	or	r2,r20,r2
 1008764:	00001506 	br	10087bc <__udivdi3+0x184>
 1008768:	380d883a 	mov	r6,r7
 100876c:	29c06236 	bltu	r5,r7,10088f8 <__udivdi3+0x2c0>
 1008770:	00bfffd4 	movui	r2,65535
 1008774:	11c05a36 	bltu	r2,r7,10088e0 <__udivdi3+0x2a8>
 1008778:	00803fc4 	movi	r2,255
 100877c:	11c0fc36 	bltu	r2,r7,1008b70 <__udivdi3+0x538>
 1008780:	000b883a 	mov	r5,zero
 1008784:	0005883a 	mov	r2,zero
 1008788:	3084d83a 	srl	r2,r6,r2
 100878c:	01004074 	movhi	r4,257
 1008790:	213a1d04 	addi	r4,r4,-6028
 1008794:	01c00804 	movi	r7,32
 1008798:	1105883a 	add	r2,r2,r4
 100879c:	10c00003 	ldbu	r3,0(r2)
 10087a0:	28c7883a 	add	r3,r5,r3
 10087a4:	38efc83a 	sub	r23,r7,r3
 10087a8:	b800691e 	bne	r23,zero,1008950 <__udivdi3+0x318>
 10087ac:	35000136 	bltu	r6,r20,10087b4 <__udivdi3+0x17c>
 10087b0:	e4005136 	bltu	fp,r16,10088f8 <__udivdi3+0x2c0>
 10087b4:	00800044 	movi	r2,1
 10087b8:	0009883a 	mov	r4,zero
 10087bc:	2007883a 	mov	r3,r4
 10087c0:	dfc00f17 	ldw	ra,60(sp)
 10087c4:	df000e17 	ldw	fp,56(sp)
 10087c8:	ddc00d17 	ldw	r23,52(sp)
 10087cc:	dd800c17 	ldw	r22,48(sp)
 10087d0:	dd400b17 	ldw	r21,44(sp)
 10087d4:	dd000a17 	ldw	r20,40(sp)
 10087d8:	dcc00917 	ldw	r19,36(sp)
 10087dc:	dc800817 	ldw	r18,32(sp)
 10087e0:	dc400717 	ldw	r17,28(sp)
 10087e4:	dc000617 	ldw	r16,24(sp)
 10087e8:	dec01004 	addi	sp,sp,64
 10087ec:	f800283a 	ret
 10087f0:	00bfffd4 	movui	r2,65535
 10087f4:	12005036 	bltu	r2,r8,1008938 <__udivdi3+0x300>
 10087f8:	00803fc4 	movi	r2,255
 10087fc:	1200e836 	bltu	r2,r8,1008ba0 <__udivdi3+0x568>
 1008800:	000b883a 	mov	r5,zero
 1008804:	0005883a 	mov	r2,zero
 1008808:	8084d83a 	srl	r2,r16,r2
 100880c:	01004074 	movhi	r4,257
 1008810:	213a1d04 	addi	r4,r4,-6028
 1008814:	01800804 	movi	r6,32
 1008818:	1105883a 	add	r2,r2,r4
 100881c:	10c00003 	ldbu	r3,0(r2)
 1008820:	28c7883a 	add	r3,r5,r3
 1008824:	30cbc83a 	sub	r5,r6,r3
 1008828:	28000626 	beq	r5,zero,1008844 <__udivdi3+0x20c>
 100882c:	3145c83a 	sub	r2,r6,r5
 1008830:	e084d83a 	srl	r2,fp,r2
 1008834:	a146983a 	sll	r3,r20,r5
 1008838:	e178983a 	sll	fp,fp,r5
 100883c:	8160983a 	sll	r16,r16,r5
 1008840:	18a8b03a 	or	r20,r3,r2
 1008844:	802ad43a 	srli	r21,r16,16
 1008848:	a009883a 	mov	r4,r20
 100884c:	85ffffcc 	andi	r23,r16,65535
 1008850:	a80b883a 	mov	r5,r21
 1008854:	100a42c0 	call	100a42c <__udivsi3>
 1008858:	a009883a 	mov	r4,r20
 100885c:	a80b883a 	mov	r5,r21
 1008860:	102d883a 	mov	r22,r2
 1008864:	100a4340 	call	100a434 <__umodsi3>
 1008868:	1004943a 	slli	r2,r2,16
 100886c:	e006d43a 	srli	r3,fp,16
 1008870:	bda3383a 	mul	r17,r23,r22
 1008874:	10c4b03a 	or	r2,r2,r3
 1008878:	1440042e 	bgeu	r2,r17,100888c <__udivdi3+0x254>
 100887c:	1405883a 	add	r2,r2,r16
 1008880:	b5bfffc4 	addi	r22,r22,-1
 1008884:	14000136 	bltu	r2,r16,100888c <__udivdi3+0x254>
 1008888:	1440d536 	bltu	r2,r17,1008be0 <__udivdi3+0x5a8>
 100888c:	1463c83a 	sub	r17,r2,r17
 1008890:	8809883a 	mov	r4,r17
 1008894:	a80b883a 	mov	r5,r21
 1008898:	100a42c0 	call	100a42c <__udivsi3>
 100889c:	8809883a 	mov	r4,r17
 10088a0:	a80b883a 	mov	r5,r21
 10088a4:	1029883a 	mov	r20,r2
 10088a8:	100a4340 	call	100a434 <__umodsi3>
 10088ac:	1004943a 	slli	r2,r2,16
 10088b0:	bd09383a 	mul	r4,r23,r20
 10088b4:	e0ffffcc 	andi	r3,fp,65535
 10088b8:	10c4b03a 	or	r2,r2,r3
 10088bc:	1100042e 	bgeu	r2,r4,10088d0 <__udivdi3+0x298>
 10088c0:	8085883a 	add	r2,r16,r2
 10088c4:	a53fffc4 	addi	r20,r20,-1
 10088c8:	14000136 	bltu	r2,r16,10088d0 <__udivdi3+0x298>
 10088cc:	1100c736 	bltu	r2,r4,1008bec <__udivdi3+0x5b4>
 10088d0:	b004943a 	slli	r2,r22,16
 10088d4:	0009883a 	mov	r4,zero
 10088d8:	a084b03a 	or	r2,r20,r2
 10088dc:	003fb706 	br	10087bc <__udivdi3+0x184>
 10088e0:	00804034 	movhi	r2,256
 10088e4:	10bfffc4 	addi	r2,r2,-1
 10088e8:	11c0a436 	bltu	r2,r7,1008b7c <__udivdi3+0x544>
 10088ec:	01400404 	movi	r5,16
 10088f0:	2805883a 	mov	r2,r5
 10088f4:	003fa406 	br	1008788 <__udivdi3+0x150>
 10088f8:	0005883a 	mov	r2,zero
 10088fc:	0009883a 	mov	r4,zero
 1008900:	003fae06 	br	10087bc <__udivdi3+0x184>
 1008904:	00804034 	movhi	r2,256
 1008908:	10bfffc4 	addi	r2,r2,-1
 100890c:	1400a136 	bltu	r2,r16,1008b94 <__udivdi3+0x55c>
 1008910:	01400404 	movi	r5,16
 1008914:	2805883a 	mov	r2,r5
 1008918:	003f6006 	br	100869c <__udivdi3+0x64>
 100891c:	01000044 	movi	r4,1
 1008920:	000b883a 	mov	r5,zero
 1008924:	100a42c0 	call	100a42c <__udivsi3>
 1008928:	1021883a 	mov	r16,r2
 100892c:	00bfffd4 	movui	r2,65535
 1008930:	143ff436 	bltu	r2,r16,1008904 <__udivdi3+0x2cc>
 1008934:	003f5506 	br	100868c <__udivdi3+0x54>
 1008938:	00804034 	movhi	r2,256
 100893c:	10bfffc4 	addi	r2,r2,-1
 1008940:	12009a36 	bltu	r2,r8,1008bac <__udivdi3+0x574>
 1008944:	01400404 	movi	r5,16
 1008948:	2805883a 	mov	r2,r5
 100894c:	003fae06 	br	1008808 <__udivdi3+0x1d0>
 1008950:	3dc5c83a 	sub	r2,r7,r23
 1008954:	35c8983a 	sll	r4,r6,r23
 1008958:	8086d83a 	srl	r3,r16,r2
 100895c:	a0a2d83a 	srl	r17,r20,r2
 1008960:	e084d83a 	srl	r2,fp,r2
 1008964:	20eab03a 	or	r21,r4,r3
 1008968:	a82cd43a 	srli	r22,r21,16
 100896c:	a5c6983a 	sll	r3,r20,r23
 1008970:	8809883a 	mov	r4,r17
 1008974:	b00b883a 	mov	r5,r22
 1008978:	1886b03a 	or	r3,r3,r2
 100897c:	d8c00215 	stw	r3,8(sp)
 1008980:	100a42c0 	call	100a42c <__udivsi3>
 1008984:	8809883a 	mov	r4,r17
 1008988:	b00b883a 	mov	r5,r22
 100898c:	1029883a 	mov	r20,r2
 1008990:	100a4340 	call	100a434 <__umodsi3>
 1008994:	a8ffffcc 	andi	r3,r21,65535
 1008998:	d8c00515 	stw	r3,20(sp)
 100899c:	d9000217 	ldw	r4,8(sp)
 10089a0:	d9400517 	ldw	r5,20(sp)
 10089a4:	1004943a 	slli	r2,r2,16
 10089a8:	2006d43a 	srli	r3,r4,16
 10089ac:	85e0983a 	sll	r16,r16,r23
 10089b0:	2d23383a 	mul	r17,r5,r20
 10089b4:	10c4b03a 	or	r2,r2,r3
 10089b8:	dc000015 	stw	r16,0(sp)
 10089bc:	1440032e 	bgeu	r2,r17,10089cc <__udivdi3+0x394>
 10089c0:	1545883a 	add	r2,r2,r21
 10089c4:	a53fffc4 	addi	r20,r20,-1
 10089c8:	15407f2e 	bgeu	r2,r21,1008bc8 <__udivdi3+0x590>
 10089cc:	1463c83a 	sub	r17,r2,r17
 10089d0:	8809883a 	mov	r4,r17
 10089d4:	b00b883a 	mov	r5,r22
 10089d8:	100a42c0 	call	100a42c <__udivsi3>
 10089dc:	8809883a 	mov	r4,r17
 10089e0:	b00b883a 	mov	r5,r22
 10089e4:	1021883a 	mov	r16,r2
 10089e8:	100a4340 	call	100a434 <__umodsi3>
 10089ec:	d8c00517 	ldw	r3,20(sp)
 10089f0:	d9000217 	ldw	r4,8(sp)
 10089f4:	1004943a 	slli	r2,r2,16
 10089f8:	1c0f383a 	mul	r7,r3,r16
 10089fc:	20ffffcc 	andi	r3,r4,65535
 1008a00:	10e2b03a 	or	r17,r2,r3
 1008a04:	89c0032e 	bgeu	r17,r7,1008a14 <__udivdi3+0x3dc>
 1008a08:	8d63883a 	add	r17,r17,r21
 1008a0c:	843fffc4 	addi	r16,r16,-1
 1008a10:	8d40692e 	bgeu	r17,r21,1008bb8 <__udivdi3+0x580>
 1008a14:	a008943a 	slli	r4,r20,16
 1008a18:	d9400017 	ldw	r5,0(sp)
 1008a1c:	89e3c83a 	sub	r17,r17,r7
 1008a20:	8110b03a 	or	r8,r16,r4
 1008a24:	280cd43a 	srli	r6,r5,16
 1008a28:	28ffffcc 	andi	r3,r5,65535
 1008a2c:	40bfffcc 	andi	r2,r8,65535
 1008a30:	400ad43a 	srli	r5,r8,16
 1008a34:	10d3383a 	mul	r9,r2,r3
 1008a38:	1185383a 	mul	r2,r2,r6
 1008a3c:	28c7383a 	mul	r3,r5,r3
 1008a40:	4808d43a 	srli	r4,r9,16
 1008a44:	298b383a 	mul	r5,r5,r6
 1008a48:	10c5883a 	add	r2,r2,r3
 1008a4c:	2089883a 	add	r4,r4,r2
 1008a50:	20c0022e 	bgeu	r4,r3,1008a5c <__udivdi3+0x424>
 1008a54:	00800074 	movhi	r2,1
 1008a58:	288b883a 	add	r5,r5,r2
 1008a5c:	2004d43a 	srli	r2,r4,16
 1008a60:	288b883a 	add	r5,r5,r2
 1008a64:	89403f36 	bltu	r17,r5,1008b64 <__udivdi3+0x52c>
 1008a68:	89403926 	beq	r17,r5,1008b50 <__udivdi3+0x518>
 1008a6c:	4005883a 	mov	r2,r8
 1008a70:	0009883a 	mov	r4,zero
 1008a74:	003f5106 	br	10087bc <__udivdi3+0x184>
 1008a78:	85a0983a 	sll	r16,r16,r22
 1008a7c:	3585c83a 	sub	r2,r6,r22
 1008a80:	a0a2d83a 	srl	r17,r20,r2
 1008a84:	802ad43a 	srli	r21,r16,16
 1008a88:	e084d83a 	srl	r2,fp,r2
 1008a8c:	a586983a 	sll	r3,r20,r22
 1008a90:	8809883a 	mov	r4,r17
 1008a94:	a80b883a 	mov	r5,r21
 1008a98:	1886b03a 	or	r3,r3,r2
 1008a9c:	d8c00115 	stw	r3,4(sp)
 1008aa0:	100a42c0 	call	100a42c <__udivsi3>
 1008aa4:	8809883a 	mov	r4,r17
 1008aa8:	a80b883a 	mov	r5,r21
 1008aac:	d8800415 	stw	r2,16(sp)
 1008ab0:	100a4340 	call	100a434 <__umodsi3>
 1008ab4:	d9000117 	ldw	r4,4(sp)
 1008ab8:	d9400417 	ldw	r5,16(sp)
 1008abc:	1004943a 	slli	r2,r2,16
 1008ac0:	85ffffcc 	andi	r23,r16,65535
 1008ac4:	2006d43a 	srli	r3,r4,16
 1008ac8:	b963383a 	mul	r17,r23,r5
 1008acc:	10c4b03a 	or	r2,r2,r3
 1008ad0:	1440042e 	bgeu	r2,r17,1008ae4 <__udivdi3+0x4ac>
 1008ad4:	297fffc4 	addi	r5,r5,-1
 1008ad8:	1405883a 	add	r2,r2,r16
 1008adc:	d9400415 	stw	r5,16(sp)
 1008ae0:	1400442e 	bgeu	r2,r16,1008bf4 <__udivdi3+0x5bc>
 1008ae4:	1463c83a 	sub	r17,r2,r17
 1008ae8:	8809883a 	mov	r4,r17
 1008aec:	a80b883a 	mov	r5,r21
 1008af0:	100a42c0 	call	100a42c <__udivsi3>
 1008af4:	8809883a 	mov	r4,r17
 1008af8:	a80b883a 	mov	r5,r21
 1008afc:	1029883a 	mov	r20,r2
 1008b00:	100a4340 	call	100a434 <__umodsi3>
 1008b04:	d9400117 	ldw	r5,4(sp)
 1008b08:	1004943a 	slli	r2,r2,16
 1008b0c:	bd09383a 	mul	r4,r23,r20
 1008b10:	28ffffcc 	andi	r3,r5,65535
 1008b14:	10c6b03a 	or	r3,r2,r3
 1008b18:	1900062e 	bgeu	r3,r4,1008b34 <__udivdi3+0x4fc>
 1008b1c:	1c07883a 	add	r3,r3,r16
 1008b20:	a53fffc4 	addi	r20,r20,-1
 1008b24:	1c000336 	bltu	r3,r16,1008b34 <__udivdi3+0x4fc>
 1008b28:	1900022e 	bgeu	r3,r4,1008b34 <__udivdi3+0x4fc>
 1008b2c:	a53fffc4 	addi	r20,r20,-1
 1008b30:	1c07883a 	add	r3,r3,r16
 1008b34:	d9400417 	ldw	r5,16(sp)
 1008b38:	e5b8983a 	sll	fp,fp,r22
 1008b3c:	1923c83a 	sub	r17,r3,r4
 1008b40:	2804943a 	slli	r2,r5,16
 1008b44:	a0a8b03a 	or	r20,r20,r2
 1008b48:	dd000315 	stw	r20,12(sp)
 1008b4c:	003ee106 	br	10086d4 <__udivdi3+0x9c>
 1008b50:	2004943a 	slli	r2,r4,16
 1008b54:	e5c8983a 	sll	r4,fp,r23
 1008b58:	48ffffcc 	andi	r3,r9,65535
 1008b5c:	10c5883a 	add	r2,r2,r3
 1008b60:	20bfc22e 	bgeu	r4,r2,1008a6c <__udivdi3+0x434>
 1008b64:	40bfffc4 	addi	r2,r8,-1
 1008b68:	0009883a 	mov	r4,zero
 1008b6c:	003f1306 	br	10087bc <__udivdi3+0x184>
 1008b70:	01400204 	movi	r5,8
 1008b74:	2805883a 	mov	r2,r5
 1008b78:	003f0306 	br	1008788 <__udivdi3+0x150>
 1008b7c:	01400604 	movi	r5,24
 1008b80:	2805883a 	mov	r2,r5
 1008b84:	003f0006 	br	1008788 <__udivdi3+0x150>
 1008b88:	01400204 	movi	r5,8
 1008b8c:	2805883a 	mov	r2,r5
 1008b90:	003ec206 	br	100869c <__udivdi3+0x64>
 1008b94:	01400604 	movi	r5,24
 1008b98:	2805883a 	mov	r2,r5
 1008b9c:	003ebf06 	br	100869c <__udivdi3+0x64>
 1008ba0:	01400204 	movi	r5,8
 1008ba4:	2805883a 	mov	r2,r5
 1008ba8:	003f1706 	br	1008808 <__udivdi3+0x1d0>
 1008bac:	01400604 	movi	r5,24
 1008bb0:	2805883a 	mov	r2,r5
 1008bb4:	003f1406 	br	1008808 <__udivdi3+0x1d0>
 1008bb8:	89ff962e 	bgeu	r17,r7,1008a14 <__udivdi3+0x3dc>
 1008bbc:	8d63883a 	add	r17,r17,r21
 1008bc0:	843fffc4 	addi	r16,r16,-1
 1008bc4:	003f9306 	br	1008a14 <__udivdi3+0x3dc>
 1008bc8:	147f802e 	bgeu	r2,r17,10089cc <__udivdi3+0x394>
 1008bcc:	a53fffc4 	addi	r20,r20,-1
 1008bd0:	1545883a 	add	r2,r2,r21
 1008bd4:	003f7d06 	br	10089cc <__udivdi3+0x394>
 1008bd8:	a53fffc4 	addi	r20,r20,-1
 1008bdc:	003ede06 	br	1008758 <__udivdi3+0x120>
 1008be0:	b5bfffc4 	addi	r22,r22,-1
 1008be4:	1405883a 	add	r2,r2,r16
 1008be8:	003f2806 	br	100888c <__udivdi3+0x254>
 1008bec:	a53fffc4 	addi	r20,r20,-1
 1008bf0:	003f3706 	br	10088d0 <__udivdi3+0x298>
 1008bf4:	147fbb2e 	bgeu	r2,r17,1008ae4 <__udivdi3+0x4ac>
 1008bf8:	297fffc4 	addi	r5,r5,-1
 1008bfc:	1405883a 	add	r2,r2,r16
 1008c00:	d9400415 	stw	r5,16(sp)
 1008c04:	003fb706 	br	1008ae4 <__udivdi3+0x4ac>
 1008c08:	b5bfffc4 	addi	r22,r22,-1
 1008c0c:	1405883a 	add	r2,r2,r16
 1008c10:	003ec006 	br	1008714 <__udivdi3+0xdc>

01008c14 <__umoddi3>:
 1008c14:	defff104 	addi	sp,sp,-60
 1008c18:	dd800b15 	stw	r22,44(sp)
 1008c1c:	dd000915 	stw	r20,36(sp)
 1008c20:	dc000515 	stw	r16,20(sp)
 1008c24:	dfc00e15 	stw	ra,56(sp)
 1008c28:	df000d15 	stw	fp,52(sp)
 1008c2c:	ddc00c15 	stw	r23,48(sp)
 1008c30:	dd400a15 	stw	r21,40(sp)
 1008c34:	dcc00815 	stw	r19,32(sp)
 1008c38:	dc800715 	stw	r18,28(sp)
 1008c3c:	dc400615 	stw	r17,24(sp)
 1008c40:	3021883a 	mov	r16,r6
 1008c44:	202d883a 	mov	r22,r4
 1008c48:	2829883a 	mov	r20,r5
 1008c4c:	38002b1e 	bne	r7,zero,1008cfc <__umoddi3+0xe8>
 1008c50:	29805036 	bltu	r5,r6,1008d94 <__umoddi3+0x180>
 1008c54:	30008a26 	beq	r6,zero,1008e80 <__umoddi3+0x26c>
 1008c58:	00bfffd4 	movui	r2,65535
 1008c5c:	14008236 	bltu	r2,r16,1008e68 <__umoddi3+0x254>
 1008c60:	00803fc4 	movi	r2,255
 1008c64:	14013636 	bltu	r2,r16,1009140 <__umoddi3+0x52c>
 1008c68:	000b883a 	mov	r5,zero
 1008c6c:	0005883a 	mov	r2,zero
 1008c70:	8084d83a 	srl	r2,r16,r2
 1008c74:	01004074 	movhi	r4,257
 1008c78:	213a1d04 	addi	r4,r4,-6028
 1008c7c:	01800804 	movi	r6,32
 1008c80:	1105883a 	add	r2,r2,r4
 1008c84:	10c00003 	ldbu	r3,0(r2)
 1008c88:	28c7883a 	add	r3,r5,r3
 1008c8c:	30efc83a 	sub	r23,r6,r3
 1008c90:	b800941e 	bne	r23,zero,1008ee4 <__umoddi3+0x2d0>
 1008c94:	802ad43a 	srli	r21,r16,16
 1008c98:	a423c83a 	sub	r17,r20,r16
 1008c9c:	0039883a 	mov	fp,zero
 1008ca0:	853fffcc 	andi	r20,r16,65535
 1008ca4:	8809883a 	mov	r4,r17
 1008ca8:	a80b883a 	mov	r5,r21
 1008cac:	100a42c0 	call	100a42c <__udivsi3>
 1008cb0:	8809883a 	mov	r4,r17
 1008cb4:	a80b883a 	mov	r5,r21
 1008cb8:	a0a3383a 	mul	r17,r20,r2
 1008cbc:	100a4340 	call	100a434 <__umodsi3>
 1008cc0:	1004943a 	slli	r2,r2,16
 1008cc4:	b006d43a 	srli	r3,r22,16
 1008cc8:	10c4b03a 	or	r2,r2,r3
 1008ccc:	1440032e 	bgeu	r2,r17,1008cdc <__umoddi3+0xc8>
 1008cd0:	1405883a 	add	r2,r2,r16
 1008cd4:	14000136 	bltu	r2,r16,1008cdc <__umoddi3+0xc8>
 1008cd8:	14413536 	bltu	r2,r17,10091b0 <__umoddi3+0x59c>
 1008cdc:	1463c83a 	sub	r17,r2,r17
 1008ce0:	8809883a 	mov	r4,r17
 1008ce4:	a80b883a 	mov	r5,r21
 1008ce8:	100a42c0 	call	100a42c <__udivsi3>
 1008cec:	8809883a 	mov	r4,r17
 1008cf0:	a0a3383a 	mul	r17,r20,r2
 1008cf4:	a80b883a 	mov	r5,r21
 1008cf8:	00004d06 	br	1008e30 <__umoddi3+0x21c>
 1008cfc:	380d883a 	mov	r6,r7
 1008d00:	29c0102e 	bgeu	r5,r7,1008d44 <__umoddi3+0x130>
 1008d04:	2011883a 	mov	r8,r4
 1008d08:	2813883a 	mov	r9,r5
 1008d0c:	4005883a 	mov	r2,r8
 1008d10:	4807883a 	mov	r3,r9
 1008d14:	dfc00e17 	ldw	ra,56(sp)
 1008d18:	df000d17 	ldw	fp,52(sp)
 1008d1c:	ddc00c17 	ldw	r23,48(sp)
 1008d20:	dd800b17 	ldw	r22,44(sp)
 1008d24:	dd400a17 	ldw	r21,40(sp)
 1008d28:	dd000917 	ldw	r20,36(sp)
 1008d2c:	dcc00817 	ldw	r19,32(sp)
 1008d30:	dc800717 	ldw	r18,28(sp)
 1008d34:	dc400617 	ldw	r17,24(sp)
 1008d38:	dc000517 	ldw	r16,20(sp)
 1008d3c:	dec00f04 	addi	sp,sp,60
 1008d40:	f800283a 	ret
 1008d44:	00bfffd4 	movui	r2,65535
 1008d48:	11c05a36 	bltu	r2,r7,1008eb4 <__umoddi3+0x2a0>
 1008d4c:	00803fc4 	movi	r2,255
 1008d50:	11c0fe36 	bltu	r2,r7,100914c <__umoddi3+0x538>
 1008d54:	000b883a 	mov	r5,zero
 1008d58:	0005883a 	mov	r2,zero
 1008d5c:	3084d83a 	srl	r2,r6,r2
 1008d60:	01004074 	movhi	r4,257
 1008d64:	213a1d04 	addi	r4,r4,-6028
 1008d68:	01c00804 	movi	r7,32
 1008d6c:	1105883a 	add	r2,r2,r4
 1008d70:	10c00003 	ldbu	r3,0(r2)
 1008d74:	28c7883a 	add	r3,r5,r3
 1008d78:	38ebc83a 	sub	r21,r7,r3
 1008d7c:	a800851e 	bne	r21,zero,1008f94 <__umoddi3+0x380>
 1008d80:	35005236 	bltu	r6,r20,1008ecc <__umoddi3+0x2b8>
 1008d84:	b400512e 	bgeu	r22,r16,1008ecc <__umoddi3+0x2b8>
 1008d88:	b011883a 	mov	r8,r22
 1008d8c:	a013883a 	mov	r9,r20
 1008d90:	003fde06 	br	1008d0c <__umoddi3+0xf8>
 1008d94:	00bfffd4 	movui	r2,65535
 1008d98:	11804036 	bltu	r2,r6,1008e9c <__umoddi3+0x288>
 1008d9c:	00803fc4 	movi	r2,255
 1008da0:	1180ed36 	bltu	r2,r6,1009158 <__umoddi3+0x544>
 1008da4:	000b883a 	mov	r5,zero
 1008da8:	0005883a 	mov	r2,zero
 1008dac:	8084d83a 	srl	r2,r16,r2
 1008db0:	01004074 	movhi	r4,257
 1008db4:	213a1d04 	addi	r4,r4,-6028
 1008db8:	01800804 	movi	r6,32
 1008dbc:	1105883a 	add	r2,r2,r4
 1008dc0:	10c00003 	ldbu	r3,0(r2)
 1008dc4:	28c7883a 	add	r3,r5,r3
 1008dc8:	30c7c83a 	sub	r3,r6,r3
 1008dcc:	1800bf1e 	bne	r3,zero,10090cc <__umoddi3+0x4b8>
 1008dd0:	0039883a 	mov	fp,zero
 1008dd4:	802ad43a 	srli	r21,r16,16
 1008dd8:	a009883a 	mov	r4,r20
 1008ddc:	85ffffcc 	andi	r23,r16,65535
 1008de0:	a80b883a 	mov	r5,r21
 1008de4:	100a42c0 	call	100a42c <__udivsi3>
 1008de8:	a009883a 	mov	r4,r20
 1008dec:	a80b883a 	mov	r5,r21
 1008df0:	b8a3383a 	mul	r17,r23,r2
 1008df4:	100a4340 	call	100a434 <__umodsi3>
 1008df8:	1004943a 	slli	r2,r2,16
 1008dfc:	b006d43a 	srli	r3,r22,16
 1008e00:	10c4b03a 	or	r2,r2,r3
 1008e04:	1440032e 	bgeu	r2,r17,1008e14 <__umoddi3+0x200>
 1008e08:	1405883a 	add	r2,r2,r16
 1008e0c:	14000136 	bltu	r2,r16,1008e14 <__umoddi3+0x200>
 1008e10:	1440e536 	bltu	r2,r17,10091a8 <__umoddi3+0x594>
 1008e14:	1463c83a 	sub	r17,r2,r17
 1008e18:	8809883a 	mov	r4,r17
 1008e1c:	a80b883a 	mov	r5,r21
 1008e20:	100a42c0 	call	100a42c <__udivsi3>
 1008e24:	8809883a 	mov	r4,r17
 1008e28:	b8a3383a 	mul	r17,r23,r2
 1008e2c:	a80b883a 	mov	r5,r21
 1008e30:	100a4340 	call	100a434 <__umodsi3>
 1008e34:	1004943a 	slli	r2,r2,16
 1008e38:	b0ffffcc 	andi	r3,r22,65535
 1008e3c:	10c4b03a 	or	r2,r2,r3
 1008e40:	1440042e 	bgeu	r2,r17,1008e54 <__umoddi3+0x240>
 1008e44:	1405883a 	add	r2,r2,r16
 1008e48:	14000236 	bltu	r2,r16,1008e54 <__umoddi3+0x240>
 1008e4c:	1440012e 	bgeu	r2,r17,1008e54 <__umoddi3+0x240>
 1008e50:	1405883a 	add	r2,r2,r16
 1008e54:	1445c83a 	sub	r2,r2,r17
 1008e58:	1724d83a 	srl	r18,r2,fp
 1008e5c:	0013883a 	mov	r9,zero
 1008e60:	9011883a 	mov	r8,r18
 1008e64:	003fa906 	br	1008d0c <__umoddi3+0xf8>
 1008e68:	00804034 	movhi	r2,256
 1008e6c:	10bfffc4 	addi	r2,r2,-1
 1008e70:	1400b036 	bltu	r2,r16,1009134 <__umoddi3+0x520>
 1008e74:	01400404 	movi	r5,16
 1008e78:	2805883a 	mov	r2,r5
 1008e7c:	003f7c06 	br	1008c70 <__umoddi3+0x5c>
 1008e80:	01000044 	movi	r4,1
 1008e84:	000b883a 	mov	r5,zero
 1008e88:	100a42c0 	call	100a42c <__udivsi3>
 1008e8c:	1021883a 	mov	r16,r2
 1008e90:	00bfffd4 	movui	r2,65535
 1008e94:	143ff436 	bltu	r2,r16,1008e68 <__umoddi3+0x254>
 1008e98:	003f7106 	br	1008c60 <__umoddi3+0x4c>
 1008e9c:	00804034 	movhi	r2,256
 1008ea0:	10bfffc4 	addi	r2,r2,-1
 1008ea4:	1180af36 	bltu	r2,r6,1009164 <__umoddi3+0x550>
 1008ea8:	01400404 	movi	r5,16
 1008eac:	2805883a 	mov	r2,r5
 1008eb0:	003fbe06 	br	1008dac <__umoddi3+0x198>
 1008eb4:	00804034 	movhi	r2,256
 1008eb8:	10bfffc4 	addi	r2,r2,-1
 1008ebc:	11c0ac36 	bltu	r2,r7,1009170 <__umoddi3+0x55c>
 1008ec0:	01400404 	movi	r5,16
 1008ec4:	2805883a 	mov	r2,r5
 1008ec8:	003fa406 	br	1008d5c <__umoddi3+0x148>
 1008ecc:	b409c83a 	sub	r4,r22,r16
 1008ed0:	b105803a 	cmpltu	r2,r22,r4
 1008ed4:	a187c83a 	sub	r3,r20,r6
 1008ed8:	18a9c83a 	sub	r20,r3,r2
 1008edc:	202d883a 	mov	r22,r4
 1008ee0:	003fa906 	br	1008d88 <__umoddi3+0x174>
 1008ee4:	85e0983a 	sll	r16,r16,r23
 1008ee8:	35c5c83a 	sub	r2,r6,r23
 1008eec:	a0a2d83a 	srl	r17,r20,r2
 1008ef0:	802ad43a 	srli	r21,r16,16
 1008ef4:	b084d83a 	srl	r2,r22,r2
 1008ef8:	a5c6983a 	sll	r3,r20,r23
 1008efc:	8809883a 	mov	r4,r17
 1008f00:	a80b883a 	mov	r5,r21
 1008f04:	1886b03a 	or	r3,r3,r2
 1008f08:	d8c00115 	stw	r3,4(sp)
 1008f0c:	853fffcc 	andi	r20,r16,65535
 1008f10:	100a42c0 	call	100a42c <__udivsi3>
 1008f14:	8809883a 	mov	r4,r17
 1008f18:	a80b883a 	mov	r5,r21
 1008f1c:	a0a3383a 	mul	r17,r20,r2
 1008f20:	100a4340 	call	100a434 <__umodsi3>
 1008f24:	d9000117 	ldw	r4,4(sp)
 1008f28:	1004943a 	slli	r2,r2,16
 1008f2c:	b839883a 	mov	fp,r23
 1008f30:	2006d43a 	srli	r3,r4,16
 1008f34:	10c4b03a 	or	r2,r2,r3
 1008f38:	1440022e 	bgeu	r2,r17,1008f44 <__umoddi3+0x330>
 1008f3c:	1405883a 	add	r2,r2,r16
 1008f40:	1400962e 	bgeu	r2,r16,100919c <__umoddi3+0x588>
 1008f44:	1463c83a 	sub	r17,r2,r17
 1008f48:	8809883a 	mov	r4,r17
 1008f4c:	a80b883a 	mov	r5,r21
 1008f50:	100a42c0 	call	100a42c <__udivsi3>
 1008f54:	8809883a 	mov	r4,r17
 1008f58:	a80b883a 	mov	r5,r21
 1008f5c:	a0a3383a 	mul	r17,r20,r2
 1008f60:	100a4340 	call	100a434 <__umodsi3>
 1008f64:	d9400117 	ldw	r5,4(sp)
 1008f68:	1004943a 	slli	r2,r2,16
 1008f6c:	28ffffcc 	andi	r3,r5,65535
 1008f70:	10c4b03a 	or	r2,r2,r3
 1008f74:	1440042e 	bgeu	r2,r17,1008f88 <__umoddi3+0x374>
 1008f78:	1405883a 	add	r2,r2,r16
 1008f7c:	14000236 	bltu	r2,r16,1008f88 <__umoddi3+0x374>
 1008f80:	1440012e 	bgeu	r2,r17,1008f88 <__umoddi3+0x374>
 1008f84:	1405883a 	add	r2,r2,r16
 1008f88:	b5ec983a 	sll	r22,r22,r23
 1008f8c:	1463c83a 	sub	r17,r2,r17
 1008f90:	003f4406 	br	1008ca4 <__umoddi3+0x90>
 1008f94:	3d4fc83a 	sub	r7,r7,r21
 1008f98:	3546983a 	sll	r3,r6,r21
 1008f9c:	81c4d83a 	srl	r2,r16,r7
 1008fa0:	a1e2d83a 	srl	r17,r20,r7
 1008fa4:	a54c983a 	sll	r6,r20,r21
 1008fa8:	18aeb03a 	or	r23,r3,r2
 1008fac:	b828d43a 	srli	r20,r23,16
 1008fb0:	b1c4d83a 	srl	r2,r22,r7
 1008fb4:	8809883a 	mov	r4,r17
 1008fb8:	a00b883a 	mov	r5,r20
 1008fbc:	308cb03a 	or	r6,r6,r2
 1008fc0:	d9c00315 	stw	r7,12(sp)
 1008fc4:	d9800215 	stw	r6,8(sp)
 1008fc8:	100a42c0 	call	100a42c <__udivsi3>
 1008fcc:	8809883a 	mov	r4,r17
 1008fd0:	a00b883a 	mov	r5,r20
 1008fd4:	1039883a 	mov	fp,r2
 1008fd8:	100a4340 	call	100a434 <__umodsi3>
 1008fdc:	b8ffffcc 	andi	r3,r23,65535
 1008fe0:	d8c00415 	stw	r3,16(sp)
 1008fe4:	d9000217 	ldw	r4,8(sp)
 1008fe8:	d9400417 	ldw	r5,16(sp)
 1008fec:	1004943a 	slli	r2,r2,16
 1008ff0:	2006d43a 	srli	r3,r4,16
 1008ff4:	8560983a 	sll	r16,r16,r21
 1008ff8:	2f23383a 	mul	r17,r5,fp
 1008ffc:	10c4b03a 	or	r2,r2,r3
 1009000:	dc000015 	stw	r16,0(sp)
 1009004:	b56c983a 	sll	r22,r22,r21
 1009008:	1440032e 	bgeu	r2,r17,1009018 <__umoddi3+0x404>
 100900c:	15c5883a 	add	r2,r2,r23
 1009010:	e73fffc4 	addi	fp,fp,-1
 1009014:	15c05d2e 	bgeu	r2,r23,100918c <__umoddi3+0x578>
 1009018:	1463c83a 	sub	r17,r2,r17
 100901c:	8809883a 	mov	r4,r17
 1009020:	a00b883a 	mov	r5,r20
 1009024:	100a42c0 	call	100a42c <__udivsi3>
 1009028:	8809883a 	mov	r4,r17
 100902c:	a00b883a 	mov	r5,r20
 1009030:	1021883a 	mov	r16,r2
 1009034:	100a4340 	call	100a434 <__umodsi3>
 1009038:	d8c00417 	ldw	r3,16(sp)
 100903c:	d9000217 	ldw	r4,8(sp)
 1009040:	1004943a 	slli	r2,r2,16
 1009044:	1c23383a 	mul	r17,r3,r16
 1009048:	20ffffcc 	andi	r3,r4,65535
 100904c:	10ceb03a 	or	r7,r2,r3
 1009050:	3c40032e 	bgeu	r7,r17,1009060 <__umoddi3+0x44c>
 1009054:	3dcf883a 	add	r7,r7,r23
 1009058:	843fffc4 	addi	r16,r16,-1
 100905c:	3dc0472e 	bgeu	r7,r23,100917c <__umoddi3+0x568>
 1009060:	e004943a 	slli	r2,fp,16
 1009064:	d9400017 	ldw	r5,0(sp)
 1009068:	3c4fc83a 	sub	r7,r7,r17
 100906c:	8084b03a 	or	r2,r16,r2
 1009070:	28ffffcc 	andi	r3,r5,65535
 1009074:	280cd43a 	srli	r6,r5,16
 1009078:	100ad43a 	srli	r5,r2,16
 100907c:	10bfffcc 	andi	r2,r2,65535
 1009080:	10d1383a 	mul	r8,r2,r3
 1009084:	28c7383a 	mul	r3,r5,r3
 1009088:	1185383a 	mul	r2,r2,r6
 100908c:	4008d43a 	srli	r4,r8,16
 1009090:	298b383a 	mul	r5,r5,r6
 1009094:	10c5883a 	add	r2,r2,r3
 1009098:	2089883a 	add	r4,r4,r2
 100909c:	20c0022e 	bgeu	r4,r3,10090a8 <__umoddi3+0x494>
 10090a0:	00800074 	movhi	r2,1
 10090a4:	288b883a 	add	r5,r5,r2
 10090a8:	2004d43a 	srli	r2,r4,16
 10090ac:	2008943a 	slli	r4,r4,16
 10090b0:	40ffffcc 	andi	r3,r8,65535
 10090b4:	288b883a 	add	r5,r5,r2
 10090b8:	20c9883a 	add	r4,r4,r3
 10090bc:	39400b36 	bltu	r7,r5,10090ec <__umoddi3+0x4d8>
 10090c0:	39403d26 	beq	r7,r5,10091b8 <__umoddi3+0x5a4>
 10090c4:	394bc83a 	sub	r5,r7,r5
 10090c8:	00000f06 	br	1009108 <__umoddi3+0x4f4>
 10090cc:	30c5c83a 	sub	r2,r6,r3
 10090d0:	1839883a 	mov	fp,r3
 10090d4:	b084d83a 	srl	r2,r22,r2
 10090d8:	a0c6983a 	sll	r3,r20,r3
 10090dc:	8720983a 	sll	r16,r16,fp
 10090e0:	b72c983a 	sll	r22,r22,fp
 10090e4:	18a8b03a 	or	r20,r3,r2
 10090e8:	003f3a06 	br	1008dd4 <__umoddi3+0x1c0>
 10090ec:	d8c00017 	ldw	r3,0(sp)
 10090f0:	20c5c83a 	sub	r2,r4,r3
 10090f4:	2089803a 	cmpltu	r4,r4,r2
 10090f8:	2dc7c83a 	sub	r3,r5,r23
 10090fc:	1907c83a 	sub	r3,r3,r4
 1009100:	38cbc83a 	sub	r5,r7,r3
 1009104:	1009883a 	mov	r4,r2
 1009108:	b105c83a 	sub	r2,r22,r4
 100910c:	b087803a 	cmpltu	r3,r22,r2
 1009110:	28c7c83a 	sub	r3,r5,r3
 1009114:	d9400317 	ldw	r5,12(sp)
 1009118:	1544d83a 	srl	r2,r2,r21
 100911c:	1948983a 	sll	r4,r3,r5
 1009120:	1d46d83a 	srl	r3,r3,r21
 1009124:	20a4b03a 	or	r18,r4,r2
 1009128:	9011883a 	mov	r8,r18
 100912c:	1813883a 	mov	r9,r3
 1009130:	003ef606 	br	1008d0c <__umoddi3+0xf8>
 1009134:	01400604 	movi	r5,24
 1009138:	2805883a 	mov	r2,r5
 100913c:	003ecc06 	br	1008c70 <__umoddi3+0x5c>
 1009140:	01400204 	movi	r5,8
 1009144:	2805883a 	mov	r2,r5
 1009148:	003ec906 	br	1008c70 <__umoddi3+0x5c>
 100914c:	01400204 	movi	r5,8
 1009150:	2805883a 	mov	r2,r5
 1009154:	003f0106 	br	1008d5c <__umoddi3+0x148>
 1009158:	01400204 	movi	r5,8
 100915c:	2805883a 	mov	r2,r5
 1009160:	003f1206 	br	1008dac <__umoddi3+0x198>
 1009164:	01400604 	movi	r5,24
 1009168:	2805883a 	mov	r2,r5
 100916c:	003f0f06 	br	1008dac <__umoddi3+0x198>
 1009170:	01400604 	movi	r5,24
 1009174:	2805883a 	mov	r2,r5
 1009178:	003ef806 	br	1008d5c <__umoddi3+0x148>
 100917c:	3c7fb82e 	bgeu	r7,r17,1009060 <__umoddi3+0x44c>
 1009180:	843fffc4 	addi	r16,r16,-1
 1009184:	3dcf883a 	add	r7,r7,r23
 1009188:	003fb506 	br	1009060 <__umoddi3+0x44c>
 100918c:	147fa22e 	bgeu	r2,r17,1009018 <__umoddi3+0x404>
 1009190:	e73fffc4 	addi	fp,fp,-1
 1009194:	15c5883a 	add	r2,r2,r23
 1009198:	003f9f06 	br	1009018 <__umoddi3+0x404>
 100919c:	147f692e 	bgeu	r2,r17,1008f44 <__umoddi3+0x330>
 10091a0:	1405883a 	add	r2,r2,r16
 10091a4:	003f6706 	br	1008f44 <__umoddi3+0x330>
 10091a8:	1405883a 	add	r2,r2,r16
 10091ac:	003f1906 	br	1008e14 <__umoddi3+0x200>
 10091b0:	1405883a 	add	r2,r2,r16
 10091b4:	003ec906 	br	1008cdc <__umoddi3+0xc8>
 10091b8:	b13fcc36 	bltu	r22,r4,10090ec <__umoddi3+0x4d8>
 10091bc:	000b883a 	mov	r5,zero
 10091c0:	003fd106 	br	1009108 <__umoddi3+0x4f4>

010091c4 <_fpadd_parts>:
 10091c4:	defff804 	addi	sp,sp,-32
 10091c8:	dcc00315 	stw	r19,12(sp)
 10091cc:	2027883a 	mov	r19,r4
 10091d0:	21000017 	ldw	r4,0(r4)
 10091d4:	00c00044 	movi	r3,1
 10091d8:	dd400515 	stw	r21,20(sp)
 10091dc:	dd000415 	stw	r20,16(sp)
 10091e0:	ddc00715 	stw	r23,28(sp)
 10091e4:	dd800615 	stw	r22,24(sp)
 10091e8:	dc800215 	stw	r18,8(sp)
 10091ec:	dc400115 	stw	r17,4(sp)
 10091f0:	dc000015 	stw	r16,0(sp)
 10091f4:	282b883a 	mov	r21,r5
 10091f8:	3029883a 	mov	r20,r6
 10091fc:	1900632e 	bgeu	r3,r4,100938c <_fpadd_parts+0x1c8>
 1009200:	28800017 	ldw	r2,0(r5)
 1009204:	1880812e 	bgeu	r3,r2,100940c <_fpadd_parts+0x248>
 1009208:	00c00104 	movi	r3,4
 100920c:	20c0dc26 	beq	r4,r3,1009580 <_fpadd_parts+0x3bc>
 1009210:	10c07e26 	beq	r2,r3,100940c <_fpadd_parts+0x248>
 1009214:	00c00084 	movi	r3,2
 1009218:	10c06726 	beq	r2,r3,10093b8 <_fpadd_parts+0x1f4>
 100921c:	20c07b26 	beq	r4,r3,100940c <_fpadd_parts+0x248>
 1009220:	9dc00217 	ldw	r23,8(r19)
 1009224:	28c00217 	ldw	r3,8(r5)
 1009228:	9c400317 	ldw	r17,12(r19)
 100922c:	2bc00317 	ldw	r15,12(r5)
 1009230:	b8cdc83a 	sub	r6,r23,r3
 1009234:	9c800417 	ldw	r18,16(r19)
 1009238:	2c000417 	ldw	r16,16(r5)
 100923c:	3009883a 	mov	r4,r6
 1009240:	30009716 	blt	r6,zero,10094a0 <_fpadd_parts+0x2dc>
 1009244:	00800fc4 	movi	r2,63
 1009248:	11806b16 	blt	r2,r6,10093f8 <_fpadd_parts+0x234>
 100924c:	0100a40e 	bge	zero,r4,10094e0 <_fpadd_parts+0x31c>
 1009250:	35bff804 	addi	r22,r6,-32
 1009254:	b000bc16 	blt	r22,zero,1009548 <_fpadd_parts+0x384>
 1009258:	8596d83a 	srl	r11,r16,r22
 100925c:	0019883a 	mov	r12,zero
 1009260:	0013883a 	mov	r9,zero
 1009264:	01000044 	movi	r4,1
 1009268:	0015883a 	mov	r10,zero
 100926c:	b000be16 	blt	r22,zero,1009568 <_fpadd_parts+0x3a4>
 1009270:	2590983a 	sll	r8,r4,r22
 1009274:	000f883a 	mov	r7,zero
 1009278:	00bfffc4 	movi	r2,-1
 100927c:	3889883a 	add	r4,r7,r2
 1009280:	408b883a 	add	r5,r8,r2
 1009284:	21cd803a 	cmpltu	r6,r4,r7
 1009288:	314b883a 	add	r5,r6,r5
 100928c:	7904703a 	and	r2,r15,r4
 1009290:	8146703a 	and	r3,r16,r5
 1009294:	10c4b03a 	or	r2,r2,r3
 1009298:	10000226 	beq	r2,zero,10092a4 <_fpadd_parts+0xe0>
 100929c:	02400044 	movi	r9,1
 10092a0:	0015883a 	mov	r10,zero
 10092a4:	5a5eb03a 	or	r15,r11,r9
 10092a8:	62a0b03a 	or	r16,r12,r10
 10092ac:	99400117 	ldw	r5,4(r19)
 10092b0:	a8800117 	ldw	r2,4(r21)
 10092b4:	28806e26 	beq	r5,r2,1009470 <_fpadd_parts+0x2ac>
 10092b8:	28006626 	beq	r5,zero,1009454 <_fpadd_parts+0x290>
 10092bc:	7c45c83a 	sub	r2,r15,r17
 10092c0:	7889803a 	cmpltu	r4,r15,r2
 10092c4:	8487c83a 	sub	r3,r16,r18
 10092c8:	1909c83a 	sub	r4,r3,r4
 10092cc:	100d883a 	mov	r6,r2
 10092d0:	200f883a 	mov	r7,r4
 10092d4:	38007716 	blt	r7,zero,10094b4 <_fpadd_parts+0x2f0>
 10092d8:	a5c00215 	stw	r23,8(r20)
 10092dc:	a1c00415 	stw	r7,16(r20)
 10092e0:	a0000115 	stw	zero,4(r20)
 10092e4:	a1800315 	stw	r6,12(r20)
 10092e8:	a2000317 	ldw	r8,12(r20)
 10092ec:	a2400417 	ldw	r9,16(r20)
 10092f0:	00bfffc4 	movi	r2,-1
 10092f4:	408b883a 	add	r5,r8,r2
 10092f8:	2a09803a 	cmpltu	r4,r5,r8
 10092fc:	488d883a 	add	r6,r9,r2
 1009300:	01c40034 	movhi	r7,4096
 1009304:	39ffffc4 	addi	r7,r7,-1
 1009308:	218d883a 	add	r6,r4,r6
 100930c:	39801736 	bltu	r7,r6,100936c <_fpadd_parts+0x1a8>
 1009310:	31c06526 	beq	r6,r7,10094a8 <_fpadd_parts+0x2e4>
 1009314:	a3000217 	ldw	r12,8(r20)
 1009318:	4209883a 	add	r4,r8,r8
 100931c:	00bfffc4 	movi	r2,-1
 1009320:	220f803a 	cmpltu	r7,r4,r8
 1009324:	4a4b883a 	add	r5,r9,r9
 1009328:	394f883a 	add	r7,r7,r5
 100932c:	2095883a 	add	r10,r4,r2
 1009330:	3897883a 	add	r11,r7,r2
 1009334:	510d803a 	cmpltu	r6,r10,r4
 1009338:	6099883a 	add	r12,r12,r2
 100933c:	32d7883a 	add	r11,r6,r11
 1009340:	00840034 	movhi	r2,4096
 1009344:	10bfffc4 	addi	r2,r2,-1
 1009348:	2011883a 	mov	r8,r4
 100934c:	3813883a 	mov	r9,r7
 1009350:	a1000315 	stw	r4,12(r20)
 1009354:	a1c00415 	stw	r7,16(r20)
 1009358:	a3000215 	stw	r12,8(r20)
 100935c:	12c00336 	bltu	r2,r11,100936c <_fpadd_parts+0x1a8>
 1009360:	58bfed1e 	bne	r11,r2,1009318 <_fpadd_parts+0x154>
 1009364:	00bfff84 	movi	r2,-2
 1009368:	12bfeb2e 	bgeu	r2,r10,1009318 <_fpadd_parts+0x154>
 100936c:	a2800417 	ldw	r10,16(r20)
 1009370:	008000c4 	movi	r2,3
 1009374:	00c80034 	movhi	r3,8192
 1009378:	18ffffc4 	addi	r3,r3,-1
 100937c:	a2400317 	ldw	r9,12(r20)
 1009380:	a0800015 	stw	r2,0(r20)
 1009384:	1a802336 	bltu	r3,r10,1009414 <_fpadd_parts+0x250>
 1009388:	a027883a 	mov	r19,r20
 100938c:	9805883a 	mov	r2,r19
 1009390:	ddc00717 	ldw	r23,28(sp)
 1009394:	dd800617 	ldw	r22,24(sp)
 1009398:	dd400517 	ldw	r21,20(sp)
 100939c:	dd000417 	ldw	r20,16(sp)
 10093a0:	dcc00317 	ldw	r19,12(sp)
 10093a4:	dc800217 	ldw	r18,8(sp)
 10093a8:	dc400117 	ldw	r17,4(sp)
 10093ac:	dc000017 	ldw	r16,0(sp)
 10093b0:	dec00804 	addi	sp,sp,32
 10093b4:	f800283a 	ret
 10093b8:	20fff41e 	bne	r4,r3,100938c <_fpadd_parts+0x1c8>
 10093bc:	31000015 	stw	r4,0(r6)
 10093c0:	98800117 	ldw	r2,4(r19)
 10093c4:	30800115 	stw	r2,4(r6)
 10093c8:	98c00217 	ldw	r3,8(r19)
 10093cc:	30c00215 	stw	r3,8(r6)
 10093d0:	98800317 	ldw	r2,12(r19)
 10093d4:	30800315 	stw	r2,12(r6)
 10093d8:	98c00417 	ldw	r3,16(r19)
 10093dc:	30c00415 	stw	r3,16(r6)
 10093e0:	98800117 	ldw	r2,4(r19)
 10093e4:	28c00117 	ldw	r3,4(r5)
 10093e8:	3027883a 	mov	r19,r6
 10093ec:	10c4703a 	and	r2,r2,r3
 10093f0:	30800115 	stw	r2,4(r6)
 10093f4:	003fe506 	br	100938c <_fpadd_parts+0x1c8>
 10093f8:	1dc02616 	blt	r3,r23,1009494 <_fpadd_parts+0x2d0>
 10093fc:	0023883a 	mov	r17,zero
 1009400:	182f883a 	mov	r23,r3
 1009404:	0025883a 	mov	r18,zero
 1009408:	003fa806 	br	10092ac <_fpadd_parts+0xe8>
 100940c:	a827883a 	mov	r19,r21
 1009410:	003fde06 	br	100938c <_fpadd_parts+0x1c8>
 1009414:	01800044 	movi	r6,1
 1009418:	500497fa 	slli	r2,r10,31
 100941c:	4808d07a 	srli	r4,r9,1
 1009420:	518ad83a 	srl	r5,r10,r6
 1009424:	a2000217 	ldw	r8,8(r20)
 1009428:	1108b03a 	or	r4,r2,r4
 100942c:	0007883a 	mov	r3,zero
 1009430:	4984703a 	and	r2,r9,r6
 1009434:	208cb03a 	or	r6,r4,r2
 1009438:	28ceb03a 	or	r7,r5,r3
 100943c:	42000044 	addi	r8,r8,1
 1009440:	a027883a 	mov	r19,r20
 1009444:	a1c00415 	stw	r7,16(r20)
 1009448:	a2000215 	stw	r8,8(r20)
 100944c:	a1800315 	stw	r6,12(r20)
 1009450:	003fce06 	br	100938c <_fpadd_parts+0x1c8>
 1009454:	8bc5c83a 	sub	r2,r17,r15
 1009458:	8889803a 	cmpltu	r4,r17,r2
 100945c:	9407c83a 	sub	r3,r18,r16
 1009460:	1909c83a 	sub	r4,r3,r4
 1009464:	100d883a 	mov	r6,r2
 1009468:	200f883a 	mov	r7,r4
 100946c:	003f9906 	br	10092d4 <_fpadd_parts+0x110>
 1009470:	7c45883a 	add	r2,r15,r17
 1009474:	13c9803a 	cmpltu	r4,r2,r15
 1009478:	8487883a 	add	r3,r16,r18
 100947c:	20c9883a 	add	r4,r4,r3
 1009480:	a1400115 	stw	r5,4(r20)
 1009484:	a5c00215 	stw	r23,8(r20)
 1009488:	a0800315 	stw	r2,12(r20)
 100948c:	a1000415 	stw	r4,16(r20)
 1009490:	003fb606 	br	100936c <_fpadd_parts+0x1a8>
 1009494:	001f883a 	mov	r15,zero
 1009498:	0021883a 	mov	r16,zero
 100949c:	003f8306 	br	10092ac <_fpadd_parts+0xe8>
 10094a0:	018dc83a 	sub	r6,zero,r6
 10094a4:	003f6706 	br	1009244 <_fpadd_parts+0x80>
 10094a8:	00bfff84 	movi	r2,-2
 10094ac:	117faf36 	bltu	r2,r5,100936c <_fpadd_parts+0x1a8>
 10094b0:	003f9806 	br	1009314 <_fpadd_parts+0x150>
 10094b4:	0005883a 	mov	r2,zero
 10094b8:	1189c83a 	sub	r4,r2,r6
 10094bc:	1105803a 	cmpltu	r2,r2,r4
 10094c0:	01cbc83a 	sub	r5,zero,r7
 10094c4:	2885c83a 	sub	r2,r5,r2
 10094c8:	01800044 	movi	r6,1
 10094cc:	a1800115 	stw	r6,4(r20)
 10094d0:	a5c00215 	stw	r23,8(r20)
 10094d4:	a1000315 	stw	r4,12(r20)
 10094d8:	a0800415 	stw	r2,16(r20)
 10094dc:	003f8206 	br	10092e8 <_fpadd_parts+0x124>
 10094e0:	203f7226 	beq	r4,zero,10092ac <_fpadd_parts+0xe8>
 10094e4:	35bff804 	addi	r22,r6,-32
 10094e8:	b9af883a 	add	r23,r23,r6
 10094ec:	b0003116 	blt	r22,zero,10095b4 <_fpadd_parts+0x3f0>
 10094f0:	959ad83a 	srl	r13,r18,r22
 10094f4:	001d883a 	mov	r14,zero
 10094f8:	000f883a 	mov	r7,zero
 10094fc:	01000044 	movi	r4,1
 1009500:	0011883a 	mov	r8,zero
 1009504:	b0002516 	blt	r22,zero,100959c <_fpadd_parts+0x3d8>
 1009508:	2594983a 	sll	r10,r4,r22
 100950c:	0013883a 	mov	r9,zero
 1009510:	00bfffc4 	movi	r2,-1
 1009514:	4889883a 	add	r4,r9,r2
 1009518:	508b883a 	add	r5,r10,r2
 100951c:	224d803a 	cmpltu	r6,r4,r9
 1009520:	314b883a 	add	r5,r6,r5
 1009524:	8904703a 	and	r2,r17,r4
 1009528:	9146703a 	and	r3,r18,r5
 100952c:	10c4b03a 	or	r2,r2,r3
 1009530:	10000226 	beq	r2,zero,100953c <_fpadd_parts+0x378>
 1009534:	01c00044 	movi	r7,1
 1009538:	0011883a 	mov	r8,zero
 100953c:	69e2b03a 	or	r17,r13,r7
 1009540:	7224b03a 	or	r18,r14,r8
 1009544:	003f5906 	br	10092ac <_fpadd_parts+0xe8>
 1009548:	8407883a 	add	r3,r16,r16
 100954c:	008007c4 	movi	r2,31
 1009550:	1185c83a 	sub	r2,r2,r6
 1009554:	1886983a 	sll	r3,r3,r2
 1009558:	7996d83a 	srl	r11,r15,r6
 100955c:	8198d83a 	srl	r12,r16,r6
 1009560:	1ad6b03a 	or	r11,r3,r11
 1009564:	003f3e06 	br	1009260 <_fpadd_parts+0x9c>
 1009568:	2006d07a 	srli	r3,r4,1
 100956c:	008007c4 	movi	r2,31
 1009570:	1185c83a 	sub	r2,r2,r6
 1009574:	1890d83a 	srl	r8,r3,r2
 1009578:	218e983a 	sll	r7,r4,r6
 100957c:	003f3e06 	br	1009278 <_fpadd_parts+0xb4>
 1009580:	113f821e 	bne	r2,r4,100938c <_fpadd_parts+0x1c8>
 1009584:	28c00117 	ldw	r3,4(r5)
 1009588:	98800117 	ldw	r2,4(r19)
 100958c:	10ff7f26 	beq	r2,r3,100938c <_fpadd_parts+0x1c8>
 1009590:	04c04074 	movhi	r19,257
 1009594:	9cfadc04 	addi	r19,r19,-5264
 1009598:	003f7c06 	br	100938c <_fpadd_parts+0x1c8>
 100959c:	2006d07a 	srli	r3,r4,1
 10095a0:	008007c4 	movi	r2,31
 10095a4:	1185c83a 	sub	r2,r2,r6
 10095a8:	1894d83a 	srl	r10,r3,r2
 10095ac:	2192983a 	sll	r9,r4,r6
 10095b0:	003fd706 	br	1009510 <_fpadd_parts+0x34c>
 10095b4:	9487883a 	add	r3,r18,r18
 10095b8:	008007c4 	movi	r2,31
 10095bc:	1185c83a 	sub	r2,r2,r6
 10095c0:	1886983a 	sll	r3,r3,r2
 10095c4:	899ad83a 	srl	r13,r17,r6
 10095c8:	919cd83a 	srl	r14,r18,r6
 10095cc:	1b5ab03a 	or	r13,r3,r13
 10095d0:	003fc906 	br	10094f8 <_fpadd_parts+0x334>

010095d4 <__subdf3>:
 10095d4:	deffea04 	addi	sp,sp,-88
 10095d8:	dcc01415 	stw	r19,80(sp)
 10095dc:	dcc00404 	addi	r19,sp,16
 10095e0:	2011883a 	mov	r8,r4
 10095e4:	2813883a 	mov	r9,r5
 10095e8:	dc401315 	stw	r17,76(sp)
 10095ec:	d809883a 	mov	r4,sp
 10095f0:	980b883a 	mov	r5,r19
 10095f4:	dc400904 	addi	r17,sp,36
 10095f8:	dfc01515 	stw	ra,84(sp)
 10095fc:	da400115 	stw	r9,4(sp)
 1009600:	d9c00315 	stw	r7,12(sp)
 1009604:	da000015 	stw	r8,0(sp)
 1009608:	d9800215 	stw	r6,8(sp)
 100960c:	100a4d40 	call	100a4d4 <__unpack_d>
 1009610:	d9000204 	addi	r4,sp,8
 1009614:	880b883a 	mov	r5,r17
 1009618:	100a4d40 	call	100a4d4 <__unpack_d>
 100961c:	d8800a17 	ldw	r2,40(sp)
 1009620:	880b883a 	mov	r5,r17
 1009624:	9809883a 	mov	r4,r19
 1009628:	d9800e04 	addi	r6,sp,56
 100962c:	1080005c 	xori	r2,r2,1
 1009630:	d8800a15 	stw	r2,40(sp)
 1009634:	10091c40 	call	10091c4 <_fpadd_parts>
 1009638:	1009883a 	mov	r4,r2
 100963c:	10010100 	call	1001010 <__pack_d>
 1009640:	dfc01517 	ldw	ra,84(sp)
 1009644:	dcc01417 	ldw	r19,80(sp)
 1009648:	dc401317 	ldw	r17,76(sp)
 100964c:	dec01604 	addi	sp,sp,88
 1009650:	f800283a 	ret

01009654 <__adddf3>:
 1009654:	deffea04 	addi	sp,sp,-88
 1009658:	dcc01415 	stw	r19,80(sp)
 100965c:	dcc00404 	addi	r19,sp,16
 1009660:	2011883a 	mov	r8,r4
 1009664:	2813883a 	mov	r9,r5
 1009668:	dc401315 	stw	r17,76(sp)
 100966c:	d809883a 	mov	r4,sp
 1009670:	980b883a 	mov	r5,r19
 1009674:	dc400904 	addi	r17,sp,36
 1009678:	dfc01515 	stw	ra,84(sp)
 100967c:	da400115 	stw	r9,4(sp)
 1009680:	d9c00315 	stw	r7,12(sp)
 1009684:	da000015 	stw	r8,0(sp)
 1009688:	d9800215 	stw	r6,8(sp)
 100968c:	100a4d40 	call	100a4d4 <__unpack_d>
 1009690:	d9000204 	addi	r4,sp,8
 1009694:	880b883a 	mov	r5,r17
 1009698:	100a4d40 	call	100a4d4 <__unpack_d>
 100969c:	d9800e04 	addi	r6,sp,56
 10096a0:	9809883a 	mov	r4,r19
 10096a4:	880b883a 	mov	r5,r17
 10096a8:	10091c40 	call	10091c4 <_fpadd_parts>
 10096ac:	1009883a 	mov	r4,r2
 10096b0:	10010100 	call	1001010 <__pack_d>
 10096b4:	dfc01517 	ldw	ra,84(sp)
 10096b8:	dcc01417 	ldw	r19,80(sp)
 10096bc:	dc401317 	ldw	r17,76(sp)
 10096c0:	dec01604 	addi	sp,sp,88
 10096c4:	f800283a 	ret

010096c8 <__muldf3>:
 10096c8:	deffe004 	addi	sp,sp,-128
 10096cc:	dc401815 	stw	r17,96(sp)
 10096d0:	dc400404 	addi	r17,sp,16
 10096d4:	2011883a 	mov	r8,r4
 10096d8:	2813883a 	mov	r9,r5
 10096dc:	dc001715 	stw	r16,92(sp)
 10096e0:	d809883a 	mov	r4,sp
 10096e4:	880b883a 	mov	r5,r17
 10096e8:	dc000904 	addi	r16,sp,36
 10096ec:	dfc01f15 	stw	ra,124(sp)
 10096f0:	da400115 	stw	r9,4(sp)
 10096f4:	d9c00315 	stw	r7,12(sp)
 10096f8:	da000015 	stw	r8,0(sp)
 10096fc:	d9800215 	stw	r6,8(sp)
 1009700:	ddc01e15 	stw	r23,120(sp)
 1009704:	dd801d15 	stw	r22,116(sp)
 1009708:	dd401c15 	stw	r21,112(sp)
 100970c:	dd001b15 	stw	r20,108(sp)
 1009710:	dcc01a15 	stw	r19,104(sp)
 1009714:	dc801915 	stw	r18,100(sp)
 1009718:	100a4d40 	call	100a4d4 <__unpack_d>
 100971c:	d9000204 	addi	r4,sp,8
 1009720:	800b883a 	mov	r5,r16
 1009724:	100a4d40 	call	100a4d4 <__unpack_d>
 1009728:	d9000417 	ldw	r4,16(sp)
 100972c:	00800044 	movi	r2,1
 1009730:	1100102e 	bgeu	r2,r4,1009774 <__muldf3+0xac>
 1009734:	d8c00917 	ldw	r3,36(sp)
 1009738:	10c0062e 	bgeu	r2,r3,1009754 <__muldf3+0x8c>
 100973c:	00800104 	movi	r2,4
 1009740:	20800a26 	beq	r4,r2,100976c <__muldf3+0xa4>
 1009744:	1880cc26 	beq	r3,r2,1009a78 <__muldf3+0x3b0>
 1009748:	00800084 	movi	r2,2
 100974c:	20800926 	beq	r4,r2,1009774 <__muldf3+0xac>
 1009750:	1880191e 	bne	r3,r2,10097b8 <__muldf3+0xf0>
 1009754:	d8c00a17 	ldw	r3,40(sp)
 1009758:	d8800517 	ldw	r2,20(sp)
 100975c:	8009883a 	mov	r4,r16
 1009760:	10c4c03a 	cmpne	r2,r2,r3
 1009764:	d8800a15 	stw	r2,40(sp)
 1009768:	00000706 	br	1009788 <__muldf3+0xc0>
 100976c:	00800084 	movi	r2,2
 1009770:	1880c326 	beq	r3,r2,1009a80 <__muldf3+0x3b8>
 1009774:	d8800517 	ldw	r2,20(sp)
 1009778:	d8c00a17 	ldw	r3,40(sp)
 100977c:	8809883a 	mov	r4,r17
 1009780:	10c4c03a 	cmpne	r2,r2,r3
 1009784:	d8800515 	stw	r2,20(sp)
 1009788:	10010100 	call	1001010 <__pack_d>
 100978c:	dfc01f17 	ldw	ra,124(sp)
 1009790:	ddc01e17 	ldw	r23,120(sp)
 1009794:	dd801d17 	ldw	r22,116(sp)
 1009798:	dd401c17 	ldw	r21,112(sp)
 100979c:	dd001b17 	ldw	r20,108(sp)
 10097a0:	dcc01a17 	ldw	r19,104(sp)
 10097a4:	dc801917 	ldw	r18,100(sp)
 10097a8:	dc401817 	ldw	r17,96(sp)
 10097ac:	dc001717 	ldw	r16,92(sp)
 10097b0:	dec02004 	addi	sp,sp,128
 10097b4:	f800283a 	ret
 10097b8:	dd800717 	ldw	r22,28(sp)
 10097bc:	dc800c17 	ldw	r18,48(sp)
 10097c0:	002b883a 	mov	r21,zero
 10097c4:	0023883a 	mov	r17,zero
 10097c8:	a80b883a 	mov	r5,r21
 10097cc:	b00d883a 	mov	r6,r22
 10097d0:	880f883a 	mov	r7,r17
 10097d4:	ddc00817 	ldw	r23,32(sp)
 10097d8:	dcc00d17 	ldw	r19,52(sp)
 10097dc:	9009883a 	mov	r4,r18
 10097e0:	100a43c0 	call	100a43c <__muldi3>
 10097e4:	001b883a 	mov	r13,zero
 10097e8:	680f883a 	mov	r7,r13
 10097ec:	b009883a 	mov	r4,r22
 10097f0:	000b883a 	mov	r5,zero
 10097f4:	980d883a 	mov	r6,r19
 10097f8:	b82d883a 	mov	r22,r23
 10097fc:	002f883a 	mov	r23,zero
 1009800:	db401615 	stw	r13,88(sp)
 1009804:	d8801315 	stw	r2,76(sp)
 1009808:	d8c01415 	stw	r3,80(sp)
 100980c:	dcc01515 	stw	r19,84(sp)
 1009810:	100a43c0 	call	100a43c <__muldi3>
 1009814:	b00d883a 	mov	r6,r22
 1009818:	000b883a 	mov	r5,zero
 100981c:	9009883a 	mov	r4,r18
 1009820:	b80f883a 	mov	r7,r23
 1009824:	1021883a 	mov	r16,r2
 1009828:	1823883a 	mov	r17,r3
 100982c:	100a43c0 	call	100a43c <__muldi3>
 1009830:	8085883a 	add	r2,r16,r2
 1009834:	140d803a 	cmpltu	r6,r2,r16
 1009838:	88c7883a 	add	r3,r17,r3
 100983c:	30cd883a 	add	r6,r6,r3
 1009840:	1029883a 	mov	r20,r2
 1009844:	302b883a 	mov	r21,r6
 1009848:	da801317 	ldw	r10,76(sp)
 100984c:	dac01417 	ldw	r11,80(sp)
 1009850:	db001517 	ldw	r12,84(sp)
 1009854:	db401617 	ldw	r13,88(sp)
 1009858:	3440612e 	bgeu	r6,r17,10099e0 <__muldf3+0x318>
 100985c:	0009883a 	mov	r4,zero
 1009860:	5105883a 	add	r2,r10,r4
 1009864:	128d803a 	cmpltu	r6,r2,r10
 1009868:	5d07883a 	add	r3,r11,r20
 100986c:	30cd883a 	add	r6,r6,r3
 1009870:	0021883a 	mov	r16,zero
 1009874:	04400044 	movi	r17,1
 1009878:	1025883a 	mov	r18,r2
 100987c:	3027883a 	mov	r19,r6
 1009880:	32c06236 	bltu	r6,r11,1009a0c <__muldf3+0x344>
 1009884:	59807a26 	beq	r11,r6,1009a70 <__muldf3+0x3a8>
 1009888:	680b883a 	mov	r5,r13
 100988c:	b80f883a 	mov	r7,r23
 1009890:	6009883a 	mov	r4,r12
 1009894:	b00d883a 	mov	r6,r22
 1009898:	100a43c0 	call	100a43c <__muldi3>
 100989c:	1009883a 	mov	r4,r2
 10098a0:	000f883a 	mov	r7,zero
 10098a4:	1545883a 	add	r2,r2,r21
 10098a8:	1111803a 	cmpltu	r8,r2,r4
 10098ac:	19c7883a 	add	r3,r3,r7
 10098b0:	40c7883a 	add	r3,r8,r3
 10098b4:	88cb883a 	add	r5,r17,r3
 10098b8:	d8c00617 	ldw	r3,24(sp)
 10098bc:	8089883a 	add	r4,r16,r2
 10098c0:	d8800b17 	ldw	r2,44(sp)
 10098c4:	18c00104 	addi	r3,r3,4
 10098c8:	240d803a 	cmpltu	r6,r4,r16
 10098cc:	10c7883a 	add	r3,r2,r3
 10098d0:	2013883a 	mov	r9,r4
 10098d4:	d8800a17 	ldw	r2,40(sp)
 10098d8:	d9000517 	ldw	r4,20(sp)
 10098dc:	314d883a 	add	r6,r6,r5
 10098e0:	3015883a 	mov	r10,r6
 10098e4:	2088c03a 	cmpne	r4,r4,r2
 10098e8:	00880034 	movhi	r2,8192
 10098ec:	10bfffc4 	addi	r2,r2,-1
 10098f0:	d9000f15 	stw	r4,60(sp)
 10098f4:	d8c01015 	stw	r3,64(sp)
 10098f8:	1180162e 	bgeu	r2,r6,1009954 <__muldf3+0x28c>
 10098fc:	1811883a 	mov	r8,r3
 1009900:	101f883a 	mov	r15,r2
 1009904:	980497fa 	slli	r2,r19,31
 1009908:	9016d07a 	srli	r11,r18,1
 100990c:	500697fa 	slli	r3,r10,31
 1009910:	480cd07a 	srli	r6,r9,1
 1009914:	500ed07a 	srli	r7,r10,1
 1009918:	12d6b03a 	or	r11,r2,r11
 100991c:	00800044 	movi	r2,1
 1009920:	198cb03a 	or	r6,r3,r6
 1009924:	4888703a 	and	r4,r9,r2
 1009928:	9818d07a 	srli	r12,r19,1
 100992c:	001b883a 	mov	r13,zero
 1009930:	03a00034 	movhi	r14,32768
 1009934:	3013883a 	mov	r9,r6
 1009938:	3815883a 	mov	r10,r7
 100993c:	4091883a 	add	r8,r8,r2
 1009940:	20000226 	beq	r4,zero,100994c <__muldf3+0x284>
 1009944:	5b64b03a 	or	r18,r11,r13
 1009948:	63a6b03a 	or	r19,r12,r14
 100994c:	7abfed36 	bltu	r15,r10,1009904 <__muldf3+0x23c>
 1009950:	da001015 	stw	r8,64(sp)
 1009954:	00840034 	movhi	r2,4096
 1009958:	10bfffc4 	addi	r2,r2,-1
 100995c:	12801436 	bltu	r2,r10,10099b0 <__muldf3+0x2e8>
 1009960:	da001017 	ldw	r8,64(sp)
 1009964:	101f883a 	mov	r15,r2
 1009968:	4a45883a 	add	r2,r9,r9
 100996c:	124d803a 	cmpltu	r6,r2,r9
 1009970:	5287883a 	add	r3,r10,r10
 1009974:	9497883a 	add	r11,r18,r18
 1009978:	5c8f803a 	cmpltu	r7,r11,r18
 100997c:	9cd9883a 	add	r12,r19,r19
 1009980:	01000044 	movi	r4,1
 1009984:	30cd883a 	add	r6,r6,r3
 1009988:	3b0f883a 	add	r7,r7,r12
 100998c:	423fffc4 	addi	r8,r8,-1
 1009990:	1013883a 	mov	r9,r2
 1009994:	3015883a 	mov	r10,r6
 1009998:	111ab03a 	or	r13,r2,r4
 100999c:	98003016 	blt	r19,zero,1009a60 <__muldf3+0x398>
 10099a0:	5825883a 	mov	r18,r11
 10099a4:	3827883a 	mov	r19,r7
 10099a8:	7abfef2e 	bgeu	r15,r10,1009968 <__muldf3+0x2a0>
 10099ac:	da001015 	stw	r8,64(sp)
 10099b0:	00803fc4 	movi	r2,255
 10099b4:	488e703a 	and	r7,r9,r2
 10099b8:	00802004 	movi	r2,128
 10099bc:	0007883a 	mov	r3,zero
 10099c0:	0011883a 	mov	r8,zero
 10099c4:	38801826 	beq	r7,r2,1009a28 <__muldf3+0x360>
 10099c8:	008000c4 	movi	r2,3
 10099cc:	d9000e04 	addi	r4,sp,56
 10099d0:	da801215 	stw	r10,72(sp)
 10099d4:	d8800e15 	stw	r2,56(sp)
 10099d8:	da401115 	stw	r9,68(sp)
 10099dc:	003f6a06 	br	1009788 <__muldf3+0xc0>
 10099e0:	89802126 	beq	r17,r6,1009a68 <__muldf3+0x3a0>
 10099e4:	0009883a 	mov	r4,zero
 10099e8:	5105883a 	add	r2,r10,r4
 10099ec:	128d803a 	cmpltu	r6,r2,r10
 10099f0:	5d07883a 	add	r3,r11,r20
 10099f4:	30cd883a 	add	r6,r6,r3
 10099f8:	0021883a 	mov	r16,zero
 10099fc:	0023883a 	mov	r17,zero
 1009a00:	1025883a 	mov	r18,r2
 1009a04:	3027883a 	mov	r19,r6
 1009a08:	32ff9e2e 	bgeu	r6,r11,1009884 <__muldf3+0x1bc>
 1009a0c:	00800044 	movi	r2,1
 1009a10:	8089883a 	add	r4,r16,r2
 1009a14:	240d803a 	cmpltu	r6,r4,r16
 1009a18:	344d883a 	add	r6,r6,r17
 1009a1c:	2021883a 	mov	r16,r4
 1009a20:	3023883a 	mov	r17,r6
 1009a24:	003f9806 	br	1009888 <__muldf3+0x1c0>
 1009a28:	403fe71e 	bne	r8,zero,10099c8 <__muldf3+0x300>
 1009a2c:	01004004 	movi	r4,256
 1009a30:	4904703a 	and	r2,r9,r4
 1009a34:	10c4b03a 	or	r2,r2,r3
 1009a38:	103fe31e 	bne	r2,zero,10099c8 <__muldf3+0x300>
 1009a3c:	94c4b03a 	or	r2,r18,r19
 1009a40:	103fe126 	beq	r2,zero,10099c8 <__muldf3+0x300>
 1009a44:	49c5883a 	add	r2,r9,r7
 1009a48:	1251803a 	cmpltu	r8,r2,r9
 1009a4c:	4291883a 	add	r8,r8,r10
 1009a50:	013fc004 	movi	r4,-256
 1009a54:	1112703a 	and	r9,r2,r4
 1009a58:	4015883a 	mov	r10,r8
 1009a5c:	003fda06 	br	10099c8 <__muldf3+0x300>
 1009a60:	6813883a 	mov	r9,r13
 1009a64:	003fce06 	br	10099a0 <__muldf3+0x2d8>
 1009a68:	143f7c36 	bltu	r2,r16,100985c <__muldf3+0x194>
 1009a6c:	003fdd06 	br	10099e4 <__muldf3+0x31c>
 1009a70:	12bf852e 	bgeu	r2,r10,1009888 <__muldf3+0x1c0>
 1009a74:	003fe506 	br	1009a0c <__muldf3+0x344>
 1009a78:	00800084 	movi	r2,2
 1009a7c:	20bf351e 	bne	r4,r2,1009754 <__muldf3+0x8c>
 1009a80:	01004074 	movhi	r4,257
 1009a84:	213adc04 	addi	r4,r4,-5264
 1009a88:	003f3f06 	br	1009788 <__muldf3+0xc0>

01009a8c <__divdf3>:
 1009a8c:	deffed04 	addi	sp,sp,-76
 1009a90:	dcc01115 	stw	r19,68(sp)
 1009a94:	dcc00404 	addi	r19,sp,16
 1009a98:	2011883a 	mov	r8,r4
 1009a9c:	2813883a 	mov	r9,r5
 1009aa0:	dc000e15 	stw	r16,56(sp)
 1009aa4:	d809883a 	mov	r4,sp
 1009aa8:	980b883a 	mov	r5,r19
 1009aac:	dc000904 	addi	r16,sp,36
 1009ab0:	dfc01215 	stw	ra,72(sp)
 1009ab4:	da400115 	stw	r9,4(sp)
 1009ab8:	d9c00315 	stw	r7,12(sp)
 1009abc:	da000015 	stw	r8,0(sp)
 1009ac0:	d9800215 	stw	r6,8(sp)
 1009ac4:	dc801015 	stw	r18,64(sp)
 1009ac8:	dc400f15 	stw	r17,60(sp)
 1009acc:	100a4d40 	call	100a4d4 <__unpack_d>
 1009ad0:	d9000204 	addi	r4,sp,8
 1009ad4:	800b883a 	mov	r5,r16
 1009ad8:	100a4d40 	call	100a4d4 <__unpack_d>
 1009adc:	d9000417 	ldw	r4,16(sp)
 1009ae0:	00800044 	movi	r2,1
 1009ae4:	11000b2e 	bgeu	r2,r4,1009b14 <__divdf3+0x88>
 1009ae8:	d9400917 	ldw	r5,36(sp)
 1009aec:	1140762e 	bgeu	r2,r5,1009cc8 <__divdf3+0x23c>
 1009af0:	d8800517 	ldw	r2,20(sp)
 1009af4:	d8c00a17 	ldw	r3,40(sp)
 1009af8:	01800104 	movi	r6,4
 1009afc:	10c4f03a 	xor	r2,r2,r3
 1009b00:	d8800515 	stw	r2,20(sp)
 1009b04:	21800226 	beq	r4,r6,1009b10 <__divdf3+0x84>
 1009b08:	00800084 	movi	r2,2
 1009b0c:	2080141e 	bne	r4,r2,1009b60 <__divdf3+0xd4>
 1009b10:	29000926 	beq	r5,r4,1009b38 <__divdf3+0xac>
 1009b14:	9809883a 	mov	r4,r19
 1009b18:	10010100 	call	1001010 <__pack_d>
 1009b1c:	dfc01217 	ldw	ra,72(sp)
 1009b20:	dcc01117 	ldw	r19,68(sp)
 1009b24:	dc801017 	ldw	r18,64(sp)
 1009b28:	dc400f17 	ldw	r17,60(sp)
 1009b2c:	dc000e17 	ldw	r16,56(sp)
 1009b30:	dec01304 	addi	sp,sp,76
 1009b34:	f800283a 	ret
 1009b38:	01004074 	movhi	r4,257
 1009b3c:	213adc04 	addi	r4,r4,-5264
 1009b40:	10010100 	call	1001010 <__pack_d>
 1009b44:	dfc01217 	ldw	ra,72(sp)
 1009b48:	dcc01117 	ldw	r19,68(sp)
 1009b4c:	dc801017 	ldw	r18,64(sp)
 1009b50:	dc400f17 	ldw	r17,60(sp)
 1009b54:	dc000e17 	ldw	r16,56(sp)
 1009b58:	dec01304 	addi	sp,sp,76
 1009b5c:	f800283a 	ret
 1009b60:	29805b26 	beq	r5,r6,1009cd0 <__divdf3+0x244>
 1009b64:	28802d26 	beq	r5,r2,1009c1c <__divdf3+0x190>
 1009b68:	d8c00617 	ldw	r3,24(sp)
 1009b6c:	d8800b17 	ldw	r2,44(sp)
 1009b70:	d9c00817 	ldw	r7,32(sp)
 1009b74:	dc400d17 	ldw	r17,52(sp)
 1009b78:	188bc83a 	sub	r5,r3,r2
 1009b7c:	d9800717 	ldw	r6,28(sp)
 1009b80:	dc000c17 	ldw	r16,48(sp)
 1009b84:	d9400615 	stw	r5,24(sp)
 1009b88:	3c403836 	bltu	r7,r17,1009c6c <__divdf3+0x1e0>
 1009b8c:	89c03626 	beq	r17,r7,1009c68 <__divdf3+0x1dc>
 1009b90:	0015883a 	mov	r10,zero
 1009b94:	001d883a 	mov	r14,zero
 1009b98:	02c40034 	movhi	r11,4096
 1009b9c:	001f883a 	mov	r15,zero
 1009ba0:	003f883a 	mov	ra,zero
 1009ba4:	04800f44 	movi	r18,61
 1009ba8:	00000f06 	br	1009be8 <__divdf3+0x15c>
 1009bac:	601d883a 	mov	r14,r12
 1009bb0:	681f883a 	mov	r15,r13
 1009bb4:	400d883a 	mov	r6,r8
 1009bb8:	100f883a 	mov	r7,r2
 1009bbc:	3191883a 	add	r8,r6,r6
 1009bc0:	5808d07a 	srli	r4,r11,1
 1009bc4:	4185803a 	cmpltu	r2,r8,r6
 1009bc8:	39d3883a 	add	r9,r7,r7
 1009bcc:	28c6b03a 	or	r3,r5,r3
 1009bd0:	1245883a 	add	r2,r2,r9
 1009bd4:	1815883a 	mov	r10,r3
 1009bd8:	2017883a 	mov	r11,r4
 1009bdc:	400d883a 	mov	r6,r8
 1009be0:	100f883a 	mov	r7,r2
 1009be4:	fc801726 	beq	ra,r18,1009c44 <__divdf3+0x1b8>
 1009be8:	580a97fa 	slli	r5,r11,31
 1009bec:	5006d07a 	srli	r3,r10,1
 1009bf0:	ffc00044 	addi	ra,ra,1
 1009bf4:	3c7ff136 	bltu	r7,r17,1009bbc <__divdf3+0x130>
 1009bf8:	3411c83a 	sub	r8,r6,r16
 1009bfc:	3205803a 	cmpltu	r2,r6,r8
 1009c00:	3c53c83a 	sub	r9,r7,r17
 1009c04:	7298b03a 	or	r12,r14,r10
 1009c08:	7adab03a 	or	r13,r15,r11
 1009c0c:	4885c83a 	sub	r2,r9,r2
 1009c10:	89ffe61e 	bne	r17,r7,1009bac <__divdf3+0x120>
 1009c14:	343fe936 	bltu	r6,r16,1009bbc <__divdf3+0x130>
 1009c18:	003fe406 	br	1009bac <__divdf3+0x120>
 1009c1c:	9809883a 	mov	r4,r19
 1009c20:	d9800415 	stw	r6,16(sp)
 1009c24:	10010100 	call	1001010 <__pack_d>
 1009c28:	dfc01217 	ldw	ra,72(sp)
 1009c2c:	dcc01117 	ldw	r19,68(sp)
 1009c30:	dc801017 	ldw	r18,64(sp)
 1009c34:	dc400f17 	ldw	r17,60(sp)
 1009c38:	dc000e17 	ldw	r16,56(sp)
 1009c3c:	dec01304 	addi	sp,sp,76
 1009c40:	f800283a 	ret
 1009c44:	00803fc4 	movi	r2,255
 1009c48:	7090703a 	and	r8,r14,r2
 1009c4c:	00802004 	movi	r2,128
 1009c50:	0007883a 	mov	r3,zero
 1009c54:	0013883a 	mov	r9,zero
 1009c58:	40800d26 	beq	r8,r2,1009c90 <__divdf3+0x204>
 1009c5c:	dbc00815 	stw	r15,32(sp)
 1009c60:	db800715 	stw	r14,28(sp)
 1009c64:	003fab06 	br	1009b14 <__divdf3+0x88>
 1009c68:	343fc92e 	bgeu	r6,r16,1009b90 <__divdf3+0x104>
 1009c6c:	3185883a 	add	r2,r6,r6
 1009c70:	1189803a 	cmpltu	r4,r2,r6
 1009c74:	39c7883a 	add	r3,r7,r7
 1009c78:	20c9883a 	add	r4,r4,r3
 1009c7c:	297fffc4 	addi	r5,r5,-1
 1009c80:	100d883a 	mov	r6,r2
 1009c84:	200f883a 	mov	r7,r4
 1009c88:	d9400615 	stw	r5,24(sp)
 1009c8c:	003fc006 	br	1009b90 <__divdf3+0x104>
 1009c90:	483ff21e 	bne	r9,zero,1009c5c <__divdf3+0x1d0>
 1009c94:	01004004 	movi	r4,256
 1009c98:	7104703a 	and	r2,r14,r4
 1009c9c:	10c4b03a 	or	r2,r2,r3
 1009ca0:	103fee1e 	bne	r2,zero,1009c5c <__divdf3+0x1d0>
 1009ca4:	31c4b03a 	or	r2,r6,r7
 1009ca8:	103fec26 	beq	r2,zero,1009c5c <__divdf3+0x1d0>
 1009cac:	7205883a 	add	r2,r14,r8
 1009cb0:	1391803a 	cmpltu	r8,r2,r14
 1009cb4:	43d1883a 	add	r8,r8,r15
 1009cb8:	013fc004 	movi	r4,-256
 1009cbc:	111c703a 	and	r14,r2,r4
 1009cc0:	401f883a 	mov	r15,r8
 1009cc4:	003fe506 	br	1009c5c <__divdf3+0x1d0>
 1009cc8:	8009883a 	mov	r4,r16
 1009ccc:	003f9206 	br	1009b18 <__divdf3+0x8c>
 1009cd0:	9809883a 	mov	r4,r19
 1009cd4:	d8000715 	stw	zero,28(sp)
 1009cd8:	d8000815 	stw	zero,32(sp)
 1009cdc:	d8000615 	stw	zero,24(sp)
 1009ce0:	003f8d06 	br	1009b18 <__divdf3+0x8c>

01009ce4 <__eqdf2>:
 1009ce4:	deffef04 	addi	sp,sp,-68
 1009ce8:	dc400f15 	stw	r17,60(sp)
 1009cec:	dc400404 	addi	r17,sp,16
 1009cf0:	2005883a 	mov	r2,r4
 1009cf4:	2807883a 	mov	r3,r5
 1009cf8:	dc000e15 	stw	r16,56(sp)
 1009cfc:	d809883a 	mov	r4,sp
 1009d00:	880b883a 	mov	r5,r17
 1009d04:	dc000904 	addi	r16,sp,36
 1009d08:	d8c00115 	stw	r3,4(sp)
 1009d0c:	d8800015 	stw	r2,0(sp)
 1009d10:	d9800215 	stw	r6,8(sp)
 1009d14:	dfc01015 	stw	ra,64(sp)
 1009d18:	d9c00315 	stw	r7,12(sp)
 1009d1c:	100a4d40 	call	100a4d4 <__unpack_d>
 1009d20:	d9000204 	addi	r4,sp,8
 1009d24:	800b883a 	mov	r5,r16
 1009d28:	100a4d40 	call	100a4d4 <__unpack_d>
 1009d2c:	d8800417 	ldw	r2,16(sp)
 1009d30:	00c00044 	movi	r3,1
 1009d34:	180d883a 	mov	r6,r3
 1009d38:	1880062e 	bgeu	r3,r2,1009d54 <__eqdf2+0x70>
 1009d3c:	d8800917 	ldw	r2,36(sp)
 1009d40:	8809883a 	mov	r4,r17
 1009d44:	800b883a 	mov	r5,r16
 1009d48:	1880022e 	bgeu	r3,r2,1009d54 <__eqdf2+0x70>
 1009d4c:	100a60c0 	call	100a60c <__fpcmp_parts_d>
 1009d50:	100d883a 	mov	r6,r2
 1009d54:	3005883a 	mov	r2,r6
 1009d58:	dfc01017 	ldw	ra,64(sp)
 1009d5c:	dc400f17 	ldw	r17,60(sp)
 1009d60:	dc000e17 	ldw	r16,56(sp)
 1009d64:	dec01104 	addi	sp,sp,68
 1009d68:	f800283a 	ret

01009d6c <__nedf2>:
 1009d6c:	deffef04 	addi	sp,sp,-68
 1009d70:	dc400f15 	stw	r17,60(sp)
 1009d74:	dc400404 	addi	r17,sp,16
 1009d78:	2005883a 	mov	r2,r4
 1009d7c:	2807883a 	mov	r3,r5
 1009d80:	dc000e15 	stw	r16,56(sp)
 1009d84:	d809883a 	mov	r4,sp
 1009d88:	880b883a 	mov	r5,r17
 1009d8c:	dc000904 	addi	r16,sp,36
 1009d90:	d8c00115 	stw	r3,4(sp)
 1009d94:	d8800015 	stw	r2,0(sp)
 1009d98:	d9800215 	stw	r6,8(sp)
 1009d9c:	dfc01015 	stw	ra,64(sp)
 1009da0:	d9c00315 	stw	r7,12(sp)
 1009da4:	100a4d40 	call	100a4d4 <__unpack_d>
 1009da8:	d9000204 	addi	r4,sp,8
 1009dac:	800b883a 	mov	r5,r16
 1009db0:	100a4d40 	call	100a4d4 <__unpack_d>
 1009db4:	d8800417 	ldw	r2,16(sp)
 1009db8:	00c00044 	movi	r3,1
 1009dbc:	180d883a 	mov	r6,r3
 1009dc0:	1880062e 	bgeu	r3,r2,1009ddc <__nedf2+0x70>
 1009dc4:	d8800917 	ldw	r2,36(sp)
 1009dc8:	8809883a 	mov	r4,r17
 1009dcc:	800b883a 	mov	r5,r16
 1009dd0:	1880022e 	bgeu	r3,r2,1009ddc <__nedf2+0x70>
 1009dd4:	100a60c0 	call	100a60c <__fpcmp_parts_d>
 1009dd8:	100d883a 	mov	r6,r2
 1009ddc:	3005883a 	mov	r2,r6
 1009de0:	dfc01017 	ldw	ra,64(sp)
 1009de4:	dc400f17 	ldw	r17,60(sp)
 1009de8:	dc000e17 	ldw	r16,56(sp)
 1009dec:	dec01104 	addi	sp,sp,68
 1009df0:	f800283a 	ret

01009df4 <__gtdf2>:
 1009df4:	deffef04 	addi	sp,sp,-68
 1009df8:	dc400f15 	stw	r17,60(sp)
 1009dfc:	dc400404 	addi	r17,sp,16
 1009e00:	2005883a 	mov	r2,r4
 1009e04:	2807883a 	mov	r3,r5
 1009e08:	dc000e15 	stw	r16,56(sp)
 1009e0c:	d809883a 	mov	r4,sp
 1009e10:	880b883a 	mov	r5,r17
 1009e14:	dc000904 	addi	r16,sp,36
 1009e18:	d8c00115 	stw	r3,4(sp)
 1009e1c:	d8800015 	stw	r2,0(sp)
 1009e20:	d9800215 	stw	r6,8(sp)
 1009e24:	dfc01015 	stw	ra,64(sp)
 1009e28:	d9c00315 	stw	r7,12(sp)
 1009e2c:	100a4d40 	call	100a4d4 <__unpack_d>
 1009e30:	d9000204 	addi	r4,sp,8
 1009e34:	800b883a 	mov	r5,r16
 1009e38:	100a4d40 	call	100a4d4 <__unpack_d>
 1009e3c:	d8800417 	ldw	r2,16(sp)
 1009e40:	00c00044 	movi	r3,1
 1009e44:	01bfffc4 	movi	r6,-1
 1009e48:	1880062e 	bgeu	r3,r2,1009e64 <__gtdf2+0x70>
 1009e4c:	d8800917 	ldw	r2,36(sp)
 1009e50:	8809883a 	mov	r4,r17
 1009e54:	800b883a 	mov	r5,r16
 1009e58:	1880022e 	bgeu	r3,r2,1009e64 <__gtdf2+0x70>
 1009e5c:	100a60c0 	call	100a60c <__fpcmp_parts_d>
 1009e60:	100d883a 	mov	r6,r2
 1009e64:	3005883a 	mov	r2,r6
 1009e68:	dfc01017 	ldw	ra,64(sp)
 1009e6c:	dc400f17 	ldw	r17,60(sp)
 1009e70:	dc000e17 	ldw	r16,56(sp)
 1009e74:	dec01104 	addi	sp,sp,68
 1009e78:	f800283a 	ret

01009e7c <__gedf2>:
 1009e7c:	deffef04 	addi	sp,sp,-68
 1009e80:	dc400f15 	stw	r17,60(sp)
 1009e84:	dc400404 	addi	r17,sp,16
 1009e88:	2005883a 	mov	r2,r4
 1009e8c:	2807883a 	mov	r3,r5
 1009e90:	dc000e15 	stw	r16,56(sp)
 1009e94:	d809883a 	mov	r4,sp
 1009e98:	880b883a 	mov	r5,r17
 1009e9c:	dc000904 	addi	r16,sp,36
 1009ea0:	d8c00115 	stw	r3,4(sp)
 1009ea4:	d8800015 	stw	r2,0(sp)
 1009ea8:	d9800215 	stw	r6,8(sp)
 1009eac:	dfc01015 	stw	ra,64(sp)
 1009eb0:	d9c00315 	stw	r7,12(sp)
 1009eb4:	100a4d40 	call	100a4d4 <__unpack_d>
 1009eb8:	d9000204 	addi	r4,sp,8
 1009ebc:	800b883a 	mov	r5,r16
 1009ec0:	100a4d40 	call	100a4d4 <__unpack_d>
 1009ec4:	d8800417 	ldw	r2,16(sp)
 1009ec8:	00c00044 	movi	r3,1
 1009ecc:	01bfffc4 	movi	r6,-1
 1009ed0:	1880062e 	bgeu	r3,r2,1009eec <__gedf2+0x70>
 1009ed4:	d8800917 	ldw	r2,36(sp)
 1009ed8:	8809883a 	mov	r4,r17
 1009edc:	800b883a 	mov	r5,r16
 1009ee0:	1880022e 	bgeu	r3,r2,1009eec <__gedf2+0x70>
 1009ee4:	100a60c0 	call	100a60c <__fpcmp_parts_d>
 1009ee8:	100d883a 	mov	r6,r2
 1009eec:	3005883a 	mov	r2,r6
 1009ef0:	dfc01017 	ldw	ra,64(sp)
 1009ef4:	dc400f17 	ldw	r17,60(sp)
 1009ef8:	dc000e17 	ldw	r16,56(sp)
 1009efc:	dec01104 	addi	sp,sp,68
 1009f00:	f800283a 	ret

01009f04 <__ltdf2>:
 1009f04:	deffef04 	addi	sp,sp,-68
 1009f08:	dc400f15 	stw	r17,60(sp)
 1009f0c:	dc400404 	addi	r17,sp,16
 1009f10:	2005883a 	mov	r2,r4
 1009f14:	2807883a 	mov	r3,r5
 1009f18:	dc000e15 	stw	r16,56(sp)
 1009f1c:	d809883a 	mov	r4,sp
 1009f20:	880b883a 	mov	r5,r17
 1009f24:	dc000904 	addi	r16,sp,36
 1009f28:	d8c00115 	stw	r3,4(sp)
 1009f2c:	d8800015 	stw	r2,0(sp)
 1009f30:	d9800215 	stw	r6,8(sp)
 1009f34:	dfc01015 	stw	ra,64(sp)
 1009f38:	d9c00315 	stw	r7,12(sp)
 1009f3c:	100a4d40 	call	100a4d4 <__unpack_d>
 1009f40:	d9000204 	addi	r4,sp,8
 1009f44:	800b883a 	mov	r5,r16
 1009f48:	100a4d40 	call	100a4d4 <__unpack_d>
 1009f4c:	d8800417 	ldw	r2,16(sp)
 1009f50:	00c00044 	movi	r3,1
 1009f54:	180d883a 	mov	r6,r3
 1009f58:	1880062e 	bgeu	r3,r2,1009f74 <__ltdf2+0x70>
 1009f5c:	d8800917 	ldw	r2,36(sp)
 1009f60:	8809883a 	mov	r4,r17
 1009f64:	800b883a 	mov	r5,r16
 1009f68:	1880022e 	bgeu	r3,r2,1009f74 <__ltdf2+0x70>
 1009f6c:	100a60c0 	call	100a60c <__fpcmp_parts_d>
 1009f70:	100d883a 	mov	r6,r2
 1009f74:	3005883a 	mov	r2,r6
 1009f78:	dfc01017 	ldw	ra,64(sp)
 1009f7c:	dc400f17 	ldw	r17,60(sp)
 1009f80:	dc000e17 	ldw	r16,56(sp)
 1009f84:	dec01104 	addi	sp,sp,68
 1009f88:	f800283a 	ret

01009f8c <__floatsidf>:
 1009f8c:	2006d7fa 	srli	r3,r4,31
 1009f90:	defff604 	addi	sp,sp,-40
 1009f94:	008000c4 	movi	r2,3
 1009f98:	dfc00915 	stw	ra,36(sp)
 1009f9c:	dcc00815 	stw	r19,32(sp)
 1009fa0:	dc800715 	stw	r18,28(sp)
 1009fa4:	dc400615 	stw	r17,24(sp)
 1009fa8:	dc000515 	stw	r16,20(sp)
 1009fac:	d8800015 	stw	r2,0(sp)
 1009fb0:	d8c00115 	stw	r3,4(sp)
 1009fb4:	20000f1e 	bne	r4,zero,1009ff4 <__floatsidf+0x68>
 1009fb8:	00800084 	movi	r2,2
 1009fbc:	d8800015 	stw	r2,0(sp)
 1009fc0:	d809883a 	mov	r4,sp
 1009fc4:	10010100 	call	1001010 <__pack_d>
 1009fc8:	1009883a 	mov	r4,r2
 1009fcc:	180b883a 	mov	r5,r3
 1009fd0:	2005883a 	mov	r2,r4
 1009fd4:	2807883a 	mov	r3,r5
 1009fd8:	dfc00917 	ldw	ra,36(sp)
 1009fdc:	dcc00817 	ldw	r19,32(sp)
 1009fe0:	dc800717 	ldw	r18,28(sp)
 1009fe4:	dc400617 	ldw	r17,24(sp)
 1009fe8:	dc000517 	ldw	r16,20(sp)
 1009fec:	dec00a04 	addi	sp,sp,40
 1009ff0:	f800283a 	ret
 1009ff4:	00800f04 	movi	r2,60
 1009ff8:	1807003a 	cmpeq	r3,r3,zero
 1009ffc:	d8800215 	stw	r2,8(sp)
 100a000:	18001126 	beq	r3,zero,100a048 <__floatsidf+0xbc>
 100a004:	0027883a 	mov	r19,zero
 100a008:	2025883a 	mov	r18,r4
 100a00c:	d9000315 	stw	r4,12(sp)
 100a010:	dcc00415 	stw	r19,16(sp)
 100a014:	1000d680 	call	1000d68 <__clzsi2>
 100a018:	11000744 	addi	r4,r2,29
 100a01c:	013fe80e 	bge	zero,r4,1009fc0 <__floatsidf+0x34>
 100a020:	10bfff44 	addi	r2,r2,-3
 100a024:	10000c16 	blt	r2,zero,100a058 <__floatsidf+0xcc>
 100a028:	90a2983a 	sll	r17,r18,r2
 100a02c:	0021883a 	mov	r16,zero
 100a030:	d8800217 	ldw	r2,8(sp)
 100a034:	dc400415 	stw	r17,16(sp)
 100a038:	dc000315 	stw	r16,12(sp)
 100a03c:	1105c83a 	sub	r2,r2,r4
 100a040:	d8800215 	stw	r2,8(sp)
 100a044:	003fde06 	br	1009fc0 <__floatsidf+0x34>
 100a048:	00a00034 	movhi	r2,32768
 100a04c:	20800a26 	beq	r4,r2,100a078 <__floatsidf+0xec>
 100a050:	0109c83a 	sub	r4,zero,r4
 100a054:	003feb06 	br	100a004 <__floatsidf+0x78>
 100a058:	9006d07a 	srli	r3,r18,1
 100a05c:	008007c4 	movi	r2,31
 100a060:	1105c83a 	sub	r2,r2,r4
 100a064:	1886d83a 	srl	r3,r3,r2
 100a068:	9922983a 	sll	r17,r19,r4
 100a06c:	9120983a 	sll	r16,r18,r4
 100a070:	1c62b03a 	or	r17,r3,r17
 100a074:	003fee06 	br	100a030 <__floatsidf+0xa4>
 100a078:	0009883a 	mov	r4,zero
 100a07c:	01707834 	movhi	r5,49632
 100a080:	003fd306 	br	1009fd0 <__floatsidf+0x44>

0100a084 <__fixdfsi>:
 100a084:	defff804 	addi	sp,sp,-32
 100a088:	2005883a 	mov	r2,r4
 100a08c:	2807883a 	mov	r3,r5
 100a090:	d809883a 	mov	r4,sp
 100a094:	d9400204 	addi	r5,sp,8
 100a098:	d8c00115 	stw	r3,4(sp)
 100a09c:	d8800015 	stw	r2,0(sp)
 100a0a0:	dfc00715 	stw	ra,28(sp)
 100a0a4:	100a4d40 	call	100a4d4 <__unpack_d>
 100a0a8:	d8c00217 	ldw	r3,8(sp)
 100a0ac:	00800084 	movi	r2,2
 100a0b0:	1880051e 	bne	r3,r2,100a0c8 <__fixdfsi+0x44>
 100a0b4:	0007883a 	mov	r3,zero
 100a0b8:	1805883a 	mov	r2,r3
 100a0bc:	dfc00717 	ldw	ra,28(sp)
 100a0c0:	dec00804 	addi	sp,sp,32
 100a0c4:	f800283a 	ret
 100a0c8:	00800044 	movi	r2,1
 100a0cc:	10fff92e 	bgeu	r2,r3,100a0b4 <__fixdfsi+0x30>
 100a0d0:	00800104 	movi	r2,4
 100a0d4:	18800426 	beq	r3,r2,100a0e8 <__fixdfsi+0x64>
 100a0d8:	d8c00417 	ldw	r3,16(sp)
 100a0dc:	183ff516 	blt	r3,zero,100a0b4 <__fixdfsi+0x30>
 100a0e0:	00800784 	movi	r2,30
 100a0e4:	10c0080e 	bge	r2,r3,100a108 <__fixdfsi+0x84>
 100a0e8:	d8800317 	ldw	r2,12(sp)
 100a0ec:	1000121e 	bne	r2,zero,100a138 <__fixdfsi+0xb4>
 100a0f0:	00e00034 	movhi	r3,32768
 100a0f4:	18ffffc4 	addi	r3,r3,-1
 100a0f8:	1805883a 	mov	r2,r3
 100a0fc:	dfc00717 	ldw	ra,28(sp)
 100a100:	dec00804 	addi	sp,sp,32
 100a104:	f800283a 	ret
 100a108:	00800f04 	movi	r2,60
 100a10c:	10d1c83a 	sub	r8,r2,r3
 100a110:	40bff804 	addi	r2,r8,-32
 100a114:	d9800517 	ldw	r6,20(sp)
 100a118:	d9c00617 	ldw	r7,24(sp)
 100a11c:	10000816 	blt	r2,zero,100a140 <__fixdfsi+0xbc>
 100a120:	3888d83a 	srl	r4,r7,r2
 100a124:	d8800317 	ldw	r2,12(sp)
 100a128:	2007883a 	mov	r3,r4
 100a12c:	103fe226 	beq	r2,zero,100a0b8 <__fixdfsi+0x34>
 100a130:	0107c83a 	sub	r3,zero,r4
 100a134:	003fe006 	br	100a0b8 <__fixdfsi+0x34>
 100a138:	00e00034 	movhi	r3,32768
 100a13c:	003fde06 	br	100a0b8 <__fixdfsi+0x34>
 100a140:	39c7883a 	add	r3,r7,r7
 100a144:	008007c4 	movi	r2,31
 100a148:	1205c83a 	sub	r2,r2,r8
 100a14c:	1886983a 	sll	r3,r3,r2
 100a150:	3208d83a 	srl	r4,r6,r8
 100a154:	1908b03a 	or	r4,r3,r4
 100a158:	003ff206 	br	100a124 <__fixdfsi+0xa0>

0100a15c <__floatunsidf>:
 100a15c:	defff204 	addi	sp,sp,-56
 100a160:	dfc00d15 	stw	ra,52(sp)
 100a164:	ddc00c15 	stw	r23,48(sp)
 100a168:	dd800b15 	stw	r22,44(sp)
 100a16c:	dd400a15 	stw	r21,40(sp)
 100a170:	dd000915 	stw	r20,36(sp)
 100a174:	dcc00815 	stw	r19,32(sp)
 100a178:	dc800715 	stw	r18,28(sp)
 100a17c:	dc400615 	stw	r17,24(sp)
 100a180:	dc000515 	stw	r16,20(sp)
 100a184:	d8000115 	stw	zero,4(sp)
 100a188:	20000f1e 	bne	r4,zero,100a1c8 <__floatunsidf+0x6c>
 100a18c:	00800084 	movi	r2,2
 100a190:	d8800015 	stw	r2,0(sp)
 100a194:	d809883a 	mov	r4,sp
 100a198:	10010100 	call	1001010 <__pack_d>
 100a19c:	dfc00d17 	ldw	ra,52(sp)
 100a1a0:	ddc00c17 	ldw	r23,48(sp)
 100a1a4:	dd800b17 	ldw	r22,44(sp)
 100a1a8:	dd400a17 	ldw	r21,40(sp)
 100a1ac:	dd000917 	ldw	r20,36(sp)
 100a1b0:	dcc00817 	ldw	r19,32(sp)
 100a1b4:	dc800717 	ldw	r18,28(sp)
 100a1b8:	dc400617 	ldw	r17,24(sp)
 100a1bc:	dc000517 	ldw	r16,20(sp)
 100a1c0:	dec00e04 	addi	sp,sp,56
 100a1c4:	f800283a 	ret
 100a1c8:	008000c4 	movi	r2,3
 100a1cc:	00c00f04 	movi	r3,60
 100a1d0:	002f883a 	mov	r23,zero
 100a1d4:	202d883a 	mov	r22,r4
 100a1d8:	d8800015 	stw	r2,0(sp)
 100a1dc:	d8c00215 	stw	r3,8(sp)
 100a1e0:	d9000315 	stw	r4,12(sp)
 100a1e4:	ddc00415 	stw	r23,16(sp)
 100a1e8:	1000d680 	call	1000d68 <__clzsi2>
 100a1ec:	12400744 	addi	r9,r2,29
 100a1f0:	48000b16 	blt	r9,zero,100a220 <__floatunsidf+0xc4>
 100a1f4:	483fe726 	beq	r9,zero,100a194 <__floatunsidf+0x38>
 100a1f8:	10bfff44 	addi	r2,r2,-3
 100a1fc:	10002e16 	blt	r2,zero,100a2b8 <__floatunsidf+0x15c>
 100a200:	b0a2983a 	sll	r17,r22,r2
 100a204:	0021883a 	mov	r16,zero
 100a208:	d8800217 	ldw	r2,8(sp)
 100a20c:	dc400415 	stw	r17,16(sp)
 100a210:	dc000315 	stw	r16,12(sp)
 100a214:	1245c83a 	sub	r2,r2,r9
 100a218:	d8800215 	stw	r2,8(sp)
 100a21c:	003fdd06 	br	100a194 <__floatunsidf+0x38>
 100a220:	0255c83a 	sub	r10,zero,r9
 100a224:	51bff804 	addi	r6,r10,-32
 100a228:	30001b16 	blt	r6,zero,100a298 <__floatunsidf+0x13c>
 100a22c:	b9a8d83a 	srl	r20,r23,r6
 100a230:	002b883a 	mov	r21,zero
 100a234:	000f883a 	mov	r7,zero
 100a238:	01000044 	movi	r4,1
 100a23c:	0011883a 	mov	r8,zero
 100a240:	30002516 	blt	r6,zero,100a2d8 <__floatunsidf+0x17c>
 100a244:	21a6983a 	sll	r19,r4,r6
 100a248:	0025883a 	mov	r18,zero
 100a24c:	00bfffc4 	movi	r2,-1
 100a250:	9089883a 	add	r4,r18,r2
 100a254:	988b883a 	add	r5,r19,r2
 100a258:	248d803a 	cmpltu	r6,r4,r18
 100a25c:	314b883a 	add	r5,r6,r5
 100a260:	b104703a 	and	r2,r22,r4
 100a264:	b946703a 	and	r3,r23,r5
 100a268:	10c4b03a 	or	r2,r2,r3
 100a26c:	10000226 	beq	r2,zero,100a278 <__floatunsidf+0x11c>
 100a270:	01c00044 	movi	r7,1
 100a274:	0011883a 	mov	r8,zero
 100a278:	d9000217 	ldw	r4,8(sp)
 100a27c:	a1c4b03a 	or	r2,r20,r7
 100a280:	aa06b03a 	or	r3,r21,r8
 100a284:	2249c83a 	sub	r4,r4,r9
 100a288:	d8c00415 	stw	r3,16(sp)
 100a28c:	d9000215 	stw	r4,8(sp)
 100a290:	d8800315 	stw	r2,12(sp)
 100a294:	003fbf06 	br	100a194 <__floatunsidf+0x38>
 100a298:	bdc7883a 	add	r3,r23,r23
 100a29c:	008007c4 	movi	r2,31
 100a2a0:	1285c83a 	sub	r2,r2,r10
 100a2a4:	1886983a 	sll	r3,r3,r2
 100a2a8:	b2a8d83a 	srl	r20,r22,r10
 100a2ac:	baaad83a 	srl	r21,r23,r10
 100a2b0:	1d28b03a 	or	r20,r3,r20
 100a2b4:	003fdf06 	br	100a234 <__floatunsidf+0xd8>
 100a2b8:	b006d07a 	srli	r3,r22,1
 100a2bc:	008007c4 	movi	r2,31
 100a2c0:	1245c83a 	sub	r2,r2,r9
 100a2c4:	1886d83a 	srl	r3,r3,r2
 100a2c8:	ba62983a 	sll	r17,r23,r9
 100a2cc:	b260983a 	sll	r16,r22,r9
 100a2d0:	1c62b03a 	or	r17,r3,r17
 100a2d4:	003fcc06 	br	100a208 <__floatunsidf+0xac>
 100a2d8:	2006d07a 	srli	r3,r4,1
 100a2dc:	008007c4 	movi	r2,31
 100a2e0:	1285c83a 	sub	r2,r2,r10
 100a2e4:	18a6d83a 	srl	r19,r3,r2
 100a2e8:	22a4983a 	sll	r18,r4,r10
 100a2ec:	003fd706 	br	100a24c <__floatunsidf+0xf0>

0100a2f0 <udivmodsi4>:
 100a2f0:	29001b2e 	bgeu	r5,r4,100a360 <udivmodsi4+0x70>
 100a2f4:	28001a16 	blt	r5,zero,100a360 <udivmodsi4+0x70>
 100a2f8:	00800044 	movi	r2,1
 100a2fc:	0007883a 	mov	r3,zero
 100a300:	01c007c4 	movi	r7,31
 100a304:	00000306 	br	100a314 <udivmodsi4+0x24>
 100a308:	19c01326 	beq	r3,r7,100a358 <udivmodsi4+0x68>
 100a30c:	18c00044 	addi	r3,r3,1
 100a310:	28000416 	blt	r5,zero,100a324 <udivmodsi4+0x34>
 100a314:	294b883a 	add	r5,r5,r5
 100a318:	1085883a 	add	r2,r2,r2
 100a31c:	293ffa36 	bltu	r5,r4,100a308 <udivmodsi4+0x18>
 100a320:	10000d26 	beq	r2,zero,100a358 <udivmodsi4+0x68>
 100a324:	0007883a 	mov	r3,zero
 100a328:	21400236 	bltu	r4,r5,100a334 <udivmodsi4+0x44>
 100a32c:	2149c83a 	sub	r4,r4,r5
 100a330:	1886b03a 	or	r3,r3,r2
 100a334:	1004d07a 	srli	r2,r2,1
 100a338:	280ad07a 	srli	r5,r5,1
 100a33c:	103ffa1e 	bne	r2,zero,100a328 <udivmodsi4+0x38>
 100a340:	30000226 	beq	r6,zero,100a34c <udivmodsi4+0x5c>
 100a344:	2005883a 	mov	r2,r4
 100a348:	f800283a 	ret
 100a34c:	1809883a 	mov	r4,r3
 100a350:	2005883a 	mov	r2,r4
 100a354:	f800283a 	ret
 100a358:	0007883a 	mov	r3,zero
 100a35c:	003ff806 	br	100a340 <udivmodsi4+0x50>
 100a360:	00800044 	movi	r2,1
 100a364:	0007883a 	mov	r3,zero
 100a368:	003fef06 	br	100a328 <udivmodsi4+0x38>

0100a36c <__divsi3>:
 100a36c:	defffe04 	addi	sp,sp,-8
 100a370:	dc000015 	stw	r16,0(sp)
 100a374:	dfc00115 	stw	ra,4(sp)
 100a378:	0021883a 	mov	r16,zero
 100a37c:	20000c16 	blt	r4,zero,100a3b0 <__divsi3+0x44>
 100a380:	000d883a 	mov	r6,zero
 100a384:	28000e16 	blt	r5,zero,100a3c0 <__divsi3+0x54>
 100a388:	100a2f00 	call	100a2f0 <udivmodsi4>
 100a38c:	1007883a 	mov	r3,r2
 100a390:	8005003a 	cmpeq	r2,r16,zero
 100a394:	1000011e 	bne	r2,zero,100a39c <__divsi3+0x30>
 100a398:	00c7c83a 	sub	r3,zero,r3
 100a39c:	1805883a 	mov	r2,r3
 100a3a0:	dfc00117 	ldw	ra,4(sp)
 100a3a4:	dc000017 	ldw	r16,0(sp)
 100a3a8:	dec00204 	addi	sp,sp,8
 100a3ac:	f800283a 	ret
 100a3b0:	0109c83a 	sub	r4,zero,r4
 100a3b4:	04000044 	movi	r16,1
 100a3b8:	000d883a 	mov	r6,zero
 100a3bc:	283ff20e 	bge	r5,zero,100a388 <__divsi3+0x1c>
 100a3c0:	014bc83a 	sub	r5,zero,r5
 100a3c4:	8021003a 	cmpeq	r16,r16,zero
 100a3c8:	003fef06 	br	100a388 <__divsi3+0x1c>

0100a3cc <__modsi3>:
 100a3cc:	deffff04 	addi	sp,sp,-4
 100a3d0:	dfc00015 	stw	ra,0(sp)
 100a3d4:	01800044 	movi	r6,1
 100a3d8:	2807883a 	mov	r3,r5
 100a3dc:	20000416 	blt	r4,zero,100a3f0 <__modsi3+0x24>
 100a3e0:	28000c16 	blt	r5,zero,100a414 <__modsi3+0x48>
 100a3e4:	dfc00017 	ldw	ra,0(sp)
 100a3e8:	dec00104 	addi	sp,sp,4
 100a3ec:	100a2f01 	jmpi	100a2f0 <udivmodsi4>
 100a3f0:	0109c83a 	sub	r4,zero,r4
 100a3f4:	28000b16 	blt	r5,zero,100a424 <__modsi3+0x58>
 100a3f8:	180b883a 	mov	r5,r3
 100a3fc:	01800044 	movi	r6,1
 100a400:	100a2f00 	call	100a2f0 <udivmodsi4>
 100a404:	0085c83a 	sub	r2,zero,r2
 100a408:	dfc00017 	ldw	ra,0(sp)
 100a40c:	dec00104 	addi	sp,sp,4
 100a410:	f800283a 	ret
 100a414:	014bc83a 	sub	r5,zero,r5
 100a418:	dfc00017 	ldw	ra,0(sp)
 100a41c:	dec00104 	addi	sp,sp,4
 100a420:	100a2f01 	jmpi	100a2f0 <udivmodsi4>
 100a424:	0147c83a 	sub	r3,zero,r5
 100a428:	003ff306 	br	100a3f8 <__modsi3+0x2c>

0100a42c <__udivsi3>:
 100a42c:	000d883a 	mov	r6,zero
 100a430:	100a2f01 	jmpi	100a2f0 <udivmodsi4>

0100a434 <__umodsi3>:
 100a434:	01800044 	movi	r6,1
 100a438:	100a2f01 	jmpi	100a2f0 <udivmodsi4>

0100a43c <__muldi3>:
 100a43c:	2011883a 	mov	r8,r4
 100a440:	427fffcc 	andi	r9,r8,65535
 100a444:	4018d43a 	srli	r12,r8,16
 100a448:	32bfffcc 	andi	r10,r6,65535
 100a44c:	3016d43a 	srli	r11,r6,16
 100a450:	4a85383a 	mul	r2,r9,r10
 100a454:	6295383a 	mul	r10,r12,r10
 100a458:	4ad3383a 	mul	r9,r9,r11
 100a45c:	113fffcc 	andi	r4,r2,65535
 100a460:	1004d43a 	srli	r2,r2,16
 100a464:	4a93883a 	add	r9,r9,r10
 100a468:	3807883a 	mov	r3,r7
 100a46c:	1245883a 	add	r2,r2,r9
 100a470:	280f883a 	mov	r7,r5
 100a474:	180b883a 	mov	r5,r3
 100a478:	1006943a 	slli	r3,r2,16
 100a47c:	defffd04 	addi	sp,sp,-12
 100a480:	dc800215 	stw	r18,8(sp)
 100a484:	1907883a 	add	r3,r3,r4
 100a488:	dc400115 	stw	r17,4(sp)
 100a48c:	dc000015 	stw	r16,0(sp)
 100a490:	4165383a 	mul	r18,r8,r5
 100a494:	31e3383a 	mul	r17,r6,r7
 100a498:	1012d43a 	srli	r9,r2,16
 100a49c:	62d9383a 	mul	r12,r12,r11
 100a4a0:	181f883a 	mov	r15,r3
 100a4a4:	1280022e 	bgeu	r2,r10,100a4b0 <__muldi3+0x74>
 100a4a8:	00800074 	movhi	r2,1
 100a4ac:	6099883a 	add	r12,r12,r2
 100a4b0:	624d883a 	add	r6,r12,r9
 100a4b4:	9187883a 	add	r3,r18,r6
 100a4b8:	88c7883a 	add	r3,r17,r3
 100a4bc:	7805883a 	mov	r2,r15
 100a4c0:	dc800217 	ldw	r18,8(sp)
 100a4c4:	dc400117 	ldw	r17,4(sp)
 100a4c8:	dc000017 	ldw	r16,0(sp)
 100a4cc:	dec00304 	addi	sp,sp,12
 100a4d0:	f800283a 	ret

0100a4d4 <__unpack_d>:
 100a4d4:	20c00117 	ldw	r3,4(r4)
 100a4d8:	22400017 	ldw	r9,0(r4)
 100a4dc:	00800434 	movhi	r2,16
 100a4e0:	10bfffc4 	addi	r2,r2,-1
 100a4e4:	1808d53a 	srli	r4,r3,20
 100a4e8:	180cd7fa 	srli	r6,r3,31
 100a4ec:	1894703a 	and	r10,r3,r2
 100a4f0:	2201ffcc 	andi	r8,r4,2047
 100a4f4:	281b883a 	mov	r13,r5
 100a4f8:	4817883a 	mov	r11,r9
 100a4fc:	29800115 	stw	r6,4(r5)
 100a500:	5019883a 	mov	r12,r10
 100a504:	40001e1e 	bne	r8,zero,100a580 <__unpack_d+0xac>
 100a508:	4a84b03a 	or	r2,r9,r10
 100a50c:	10001926 	beq	r2,zero,100a574 <__unpack_d+0xa0>
 100a510:	4804d63a 	srli	r2,r9,24
 100a514:	500c923a 	slli	r6,r10,8
 100a518:	013f0084 	movi	r4,-1022
 100a51c:	00c40034 	movhi	r3,4096
 100a520:	18ffffc4 	addi	r3,r3,-1
 100a524:	118cb03a 	or	r6,r2,r6
 100a528:	008000c4 	movi	r2,3
 100a52c:	480a923a 	slli	r5,r9,8
 100a530:	68800015 	stw	r2,0(r13)
 100a534:	69000215 	stw	r4,8(r13)
 100a538:	19800b36 	bltu	r3,r6,100a568 <__unpack_d+0x94>
 100a53c:	200f883a 	mov	r7,r4
 100a540:	1811883a 	mov	r8,r3
 100a544:	2945883a 	add	r2,r5,r5
 100a548:	1149803a 	cmpltu	r4,r2,r5
 100a54c:	3187883a 	add	r3,r6,r6
 100a550:	20c9883a 	add	r4,r4,r3
 100a554:	100b883a 	mov	r5,r2
 100a558:	200d883a 	mov	r6,r4
 100a55c:	39ffffc4 	addi	r7,r7,-1
 100a560:	413ff82e 	bgeu	r8,r4,100a544 <__unpack_d+0x70>
 100a564:	69c00215 	stw	r7,8(r13)
 100a568:	69800415 	stw	r6,16(r13)
 100a56c:	69400315 	stw	r5,12(r13)
 100a570:	f800283a 	ret
 100a574:	00800084 	movi	r2,2
 100a578:	28800015 	stw	r2,0(r5)
 100a57c:	f800283a 	ret
 100a580:	0081ffc4 	movi	r2,2047
 100a584:	40800f26 	beq	r8,r2,100a5c4 <__unpack_d+0xf0>
 100a588:	480cd63a 	srli	r6,r9,24
 100a58c:	5006923a 	slli	r3,r10,8
 100a590:	4804923a 	slli	r2,r9,8
 100a594:	0009883a 	mov	r4,zero
 100a598:	30c6b03a 	or	r3,r6,r3
 100a59c:	01440034 	movhi	r5,4096
 100a5a0:	110cb03a 	or	r6,r2,r4
 100a5a4:	423f0044 	addi	r8,r8,-1023
 100a5a8:	194eb03a 	or	r7,r3,r5
 100a5ac:	008000c4 	movi	r2,3
 100a5b0:	69c00415 	stw	r7,16(r13)
 100a5b4:	6a000215 	stw	r8,8(r13)
 100a5b8:	68800015 	stw	r2,0(r13)
 100a5bc:	69800315 	stw	r6,12(r13)
 100a5c0:	f800283a 	ret
 100a5c4:	4a84b03a 	or	r2,r9,r10
 100a5c8:	1000031e 	bne	r2,zero,100a5d8 <__unpack_d+0x104>
 100a5cc:	00800104 	movi	r2,4
 100a5d0:	28800015 	stw	r2,0(r5)
 100a5d4:	f800283a 	ret
 100a5d8:	0009883a 	mov	r4,zero
 100a5dc:	01400234 	movhi	r5,8
 100a5e0:	4904703a 	and	r2,r9,r4
 100a5e4:	5146703a 	and	r3,r10,r5
 100a5e8:	10c4b03a 	or	r2,r2,r3
 100a5ec:	10000526 	beq	r2,zero,100a604 <__unpack_d+0x130>
 100a5f0:	00800044 	movi	r2,1
 100a5f4:	68800015 	stw	r2,0(r13)
 100a5f8:	6b000415 	stw	r12,16(r13)
 100a5fc:	6ac00315 	stw	r11,12(r13)
 100a600:	f800283a 	ret
 100a604:	68000015 	stw	zero,0(r13)
 100a608:	003ffb06 	br	100a5f8 <__unpack_d+0x124>

0100a60c <__fpcmp_parts_d>:
 100a60c:	21800017 	ldw	r6,0(r4)
 100a610:	00c00044 	movi	r3,1
 100a614:	19800a2e 	bgeu	r3,r6,100a640 <__fpcmp_parts_d+0x34>
 100a618:	28800017 	ldw	r2,0(r5)
 100a61c:	1880082e 	bgeu	r3,r2,100a640 <__fpcmp_parts_d+0x34>
 100a620:	00c00104 	movi	r3,4
 100a624:	30c02626 	beq	r6,r3,100a6c0 <__fpcmp_parts_d+0xb4>
 100a628:	10c02226 	beq	r2,r3,100a6b4 <__fpcmp_parts_d+0xa8>
 100a62c:	00c00084 	movi	r3,2
 100a630:	30c00526 	beq	r6,r3,100a648 <__fpcmp_parts_d+0x3c>
 100a634:	10c0071e 	bne	r2,r3,100a654 <__fpcmp_parts_d+0x48>
 100a638:	20800117 	ldw	r2,4(r4)
 100a63c:	1000091e 	bne	r2,zero,100a664 <__fpcmp_parts_d+0x58>
 100a640:	00800044 	movi	r2,1
 100a644:	f800283a 	ret
 100a648:	10c01a1e 	bne	r2,r3,100a6b4 <__fpcmp_parts_d+0xa8>
 100a64c:	0005883a 	mov	r2,zero
 100a650:	f800283a 	ret
 100a654:	22000117 	ldw	r8,4(r4)
 100a658:	28800117 	ldw	r2,4(r5)
 100a65c:	40800326 	beq	r8,r2,100a66c <__fpcmp_parts_d+0x60>
 100a660:	403ff726 	beq	r8,zero,100a640 <__fpcmp_parts_d+0x34>
 100a664:	00bfffc4 	movi	r2,-1
 100a668:	f800283a 	ret
 100a66c:	20c00217 	ldw	r3,8(r4)
 100a670:	28800217 	ldw	r2,8(r5)
 100a674:	10fffa16 	blt	r2,r3,100a660 <__fpcmp_parts_d+0x54>
 100a678:	18800916 	blt	r3,r2,100a6a0 <__fpcmp_parts_d+0x94>
 100a67c:	21c00417 	ldw	r7,16(r4)
 100a680:	28c00417 	ldw	r3,16(r5)
 100a684:	21800317 	ldw	r6,12(r4)
 100a688:	28800317 	ldw	r2,12(r5)
 100a68c:	19fff436 	bltu	r3,r7,100a660 <__fpcmp_parts_d+0x54>
 100a690:	38c00526 	beq	r7,r3,100a6a8 <__fpcmp_parts_d+0x9c>
 100a694:	38c00236 	bltu	r7,r3,100a6a0 <__fpcmp_parts_d+0x94>
 100a698:	19ffec1e 	bne	r3,r7,100a64c <__fpcmp_parts_d+0x40>
 100a69c:	30bfeb2e 	bgeu	r6,r2,100a64c <__fpcmp_parts_d+0x40>
 100a6a0:	403fe71e 	bne	r8,zero,100a640 <__fpcmp_parts_d+0x34>
 100a6a4:	003fef06 	br	100a664 <__fpcmp_parts_d+0x58>
 100a6a8:	11bffa2e 	bgeu	r2,r6,100a694 <__fpcmp_parts_d+0x88>
 100a6ac:	403fe426 	beq	r8,zero,100a640 <__fpcmp_parts_d+0x34>
 100a6b0:	003fec06 	br	100a664 <__fpcmp_parts_d+0x58>
 100a6b4:	28800117 	ldw	r2,4(r5)
 100a6b8:	103fe11e 	bne	r2,zero,100a640 <__fpcmp_parts_d+0x34>
 100a6bc:	003fe906 	br	100a664 <__fpcmp_parts_d+0x58>
 100a6c0:	11bfdd1e 	bne	r2,r6,100a638 <__fpcmp_parts_d+0x2c>
 100a6c4:	28c00117 	ldw	r3,4(r5)
 100a6c8:	20800117 	ldw	r2,4(r4)
 100a6cc:	1885c83a 	sub	r2,r3,r2
 100a6d0:	f800283a 	ret

0100a6d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100a6d4:	defff804 	addi	sp,sp,-32
 100a6d8:	dfc00715 	stw	ra,28(sp)
 100a6dc:	df000615 	stw	fp,24(sp)
 100a6e0:	df000604 	addi	fp,sp,24
 100a6e4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100a6e8:	e0bffc17 	ldw	r2,-16(fp)
 100a6ec:	1004803a 	cmplt	r2,r2,zero
 100a6f0:	1000081e 	bne	r2,zero,100a714 <close+0x40>
 100a6f4:	e0bffc17 	ldw	r2,-16(fp)
 100a6f8:	10800324 	muli	r2,r2,12
 100a6fc:	1007883a 	mov	r3,r2
 100a700:	00804074 	movhi	r2,257
 100a704:	10bd2004 	addi	r2,r2,-2944
 100a708:	1887883a 	add	r3,r3,r2
 100a70c:	e0ffff15 	stw	r3,-4(fp)
 100a710:	00000106 	br	100a718 <close+0x44>
 100a714:	e03fff15 	stw	zero,-4(fp)
 100a718:	e0bfff17 	ldw	r2,-4(fp)
 100a71c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100a720:	e0bffb17 	ldw	r2,-20(fp)
 100a724:	1005003a 	cmpeq	r2,r2,zero
 100a728:	10001d1e 	bne	r2,zero,100a7a0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100a72c:	e0bffb17 	ldw	r2,-20(fp)
 100a730:	10800017 	ldw	r2,0(r2)
 100a734:	10800417 	ldw	r2,16(r2)
 100a738:	1005003a 	cmpeq	r2,r2,zero
 100a73c:	1000071e 	bne	r2,zero,100a75c <close+0x88>
 100a740:	e0bffb17 	ldw	r2,-20(fp)
 100a744:	10800017 	ldw	r2,0(r2)
 100a748:	10800417 	ldw	r2,16(r2)
 100a74c:	e13ffb17 	ldw	r4,-20(fp)
 100a750:	103ee83a 	callr	r2
 100a754:	e0bffe15 	stw	r2,-8(fp)
 100a758:	00000106 	br	100a760 <close+0x8c>
 100a75c:	e03ffe15 	stw	zero,-8(fp)
 100a760:	e0bffe17 	ldw	r2,-8(fp)
 100a764:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100a768:	e13ffc17 	ldw	r4,-16(fp)
 100a76c:	100b1b00 	call	100b1b0 <alt_release_fd>
    if (rval < 0)
 100a770:	e0bffa17 	ldw	r2,-24(fp)
 100a774:	1004403a 	cmpge	r2,r2,zero
 100a778:	1000071e 	bne	r2,zero,100a798 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 100a77c:	100a7d00 	call	100a7d0 <alt_get_errno>
 100a780:	e0fffa17 	ldw	r3,-24(fp)
 100a784:	00c7c83a 	sub	r3,zero,r3
 100a788:	10c00015 	stw	r3,0(r2)
      return -1;
 100a78c:	00bfffc4 	movi	r2,-1
 100a790:	e0bffd15 	stw	r2,-12(fp)
 100a794:	00000806 	br	100a7b8 <close+0xe4>
    }
    return 0;
 100a798:	e03ffd15 	stw	zero,-12(fp)
 100a79c:	00000606 	br	100a7b8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a7a0:	100a7d00 	call	100a7d0 <alt_get_errno>
 100a7a4:	1007883a 	mov	r3,r2
 100a7a8:	00801444 	movi	r2,81
 100a7ac:	18800015 	stw	r2,0(r3)
    return -1;
 100a7b0:	00bfffc4 	movi	r2,-1
 100a7b4:	e0bffd15 	stw	r2,-12(fp)
 100a7b8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100a7bc:	e037883a 	mov	sp,fp
 100a7c0:	dfc00117 	ldw	ra,4(sp)
 100a7c4:	df000017 	ldw	fp,0(sp)
 100a7c8:	dec00204 	addi	sp,sp,8
 100a7cc:	f800283a 	ret

0100a7d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a7d0:	defffd04 	addi	sp,sp,-12
 100a7d4:	dfc00215 	stw	ra,8(sp)
 100a7d8:	df000115 	stw	fp,4(sp)
 100a7dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a7e0:	00804074 	movhi	r2,257
 100a7e4:	1081e004 	addi	r2,r2,1920
 100a7e8:	10800017 	ldw	r2,0(r2)
 100a7ec:	1005003a 	cmpeq	r2,r2,zero
 100a7f0:	1000061e 	bne	r2,zero,100a80c <alt_get_errno+0x3c>
 100a7f4:	00804074 	movhi	r2,257
 100a7f8:	1081e004 	addi	r2,r2,1920
 100a7fc:	10800017 	ldw	r2,0(r2)
 100a800:	103ee83a 	callr	r2
 100a804:	e0bfff15 	stw	r2,-4(fp)
 100a808:	00000306 	br	100a818 <alt_get_errno+0x48>
 100a80c:	00804074 	movhi	r2,257
 100a810:	1088bf04 	addi	r2,r2,8956
 100a814:	e0bfff15 	stw	r2,-4(fp)
 100a818:	e0bfff17 	ldw	r2,-4(fp)
}
 100a81c:	e037883a 	mov	sp,fp
 100a820:	dfc00117 	ldw	ra,4(sp)
 100a824:	df000017 	ldw	fp,0(sp)
 100a828:	dec00204 	addi	sp,sp,8
 100a82c:	f800283a 	ret

0100a830 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100a830:	defffc04 	addi	sp,sp,-16
 100a834:	df000315 	stw	fp,12(sp)
 100a838:	df000304 	addi	fp,sp,12
 100a83c:	e13ffd15 	stw	r4,-12(fp)
 100a840:	e17ffe15 	stw	r5,-8(fp)
 100a844:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100a848:	e0bfff17 	ldw	r2,-4(fp)
}
 100a84c:	e037883a 	mov	sp,fp
 100a850:	df000017 	ldw	fp,0(sp)
 100a854:	dec00104 	addi	sp,sp,4
 100a858:	f800283a 	ret

0100a85c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100a85c:	defff904 	addi	sp,sp,-28
 100a860:	dfc00615 	stw	ra,24(sp)
 100a864:	df000515 	stw	fp,20(sp)
 100a868:	df000504 	addi	fp,sp,20
 100a86c:	e13ffc15 	stw	r4,-16(fp)
 100a870:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a874:	e0bffc17 	ldw	r2,-16(fp)
 100a878:	1004803a 	cmplt	r2,r2,zero
 100a87c:	1000081e 	bne	r2,zero,100a8a0 <fstat+0x44>
 100a880:	e0bffc17 	ldw	r2,-16(fp)
 100a884:	10800324 	muli	r2,r2,12
 100a888:	1007883a 	mov	r3,r2
 100a88c:	00804074 	movhi	r2,257
 100a890:	10bd2004 	addi	r2,r2,-2944
 100a894:	1887883a 	add	r3,r3,r2
 100a898:	e0ffff15 	stw	r3,-4(fp)
 100a89c:	00000106 	br	100a8a4 <fstat+0x48>
 100a8a0:	e03fff15 	stw	zero,-4(fp)
 100a8a4:	e0bfff17 	ldw	r2,-4(fp)
 100a8a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100a8ac:	e0bffb17 	ldw	r2,-20(fp)
 100a8b0:	1005003a 	cmpeq	r2,r2,zero
 100a8b4:	1000121e 	bne	r2,zero,100a900 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100a8b8:	e0bffb17 	ldw	r2,-20(fp)
 100a8bc:	10800017 	ldw	r2,0(r2)
 100a8c0:	10800817 	ldw	r2,32(r2)
 100a8c4:	1005003a 	cmpeq	r2,r2,zero
 100a8c8:	1000081e 	bne	r2,zero,100a8ec <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 100a8cc:	e0bffb17 	ldw	r2,-20(fp)
 100a8d0:	10800017 	ldw	r2,0(r2)
 100a8d4:	10800817 	ldw	r2,32(r2)
 100a8d8:	e13ffb17 	ldw	r4,-20(fp)
 100a8dc:	e17ffd17 	ldw	r5,-12(fp)
 100a8e0:	103ee83a 	callr	r2
 100a8e4:	e0bffe15 	stw	r2,-8(fp)
 100a8e8:	00000b06 	br	100a918 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100a8ec:	e0fffd17 	ldw	r3,-12(fp)
 100a8f0:	00880004 	movi	r2,8192
 100a8f4:	18800115 	stw	r2,4(r3)
      return 0;
 100a8f8:	e03ffe15 	stw	zero,-8(fp)
 100a8fc:	00000606 	br	100a918 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a900:	100a9300 	call	100a930 <alt_get_errno>
 100a904:	1007883a 	mov	r3,r2
 100a908:	00801444 	movi	r2,81
 100a90c:	18800015 	stw	r2,0(r3)
    return -1;
 100a910:	00bfffc4 	movi	r2,-1
 100a914:	e0bffe15 	stw	r2,-8(fp)
 100a918:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a91c:	e037883a 	mov	sp,fp
 100a920:	dfc00117 	ldw	ra,4(sp)
 100a924:	df000017 	ldw	fp,0(sp)
 100a928:	dec00204 	addi	sp,sp,8
 100a92c:	f800283a 	ret

0100a930 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a930:	defffd04 	addi	sp,sp,-12
 100a934:	dfc00215 	stw	ra,8(sp)
 100a938:	df000115 	stw	fp,4(sp)
 100a93c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a940:	00804074 	movhi	r2,257
 100a944:	1081e004 	addi	r2,r2,1920
 100a948:	10800017 	ldw	r2,0(r2)
 100a94c:	1005003a 	cmpeq	r2,r2,zero
 100a950:	1000061e 	bne	r2,zero,100a96c <alt_get_errno+0x3c>
 100a954:	00804074 	movhi	r2,257
 100a958:	1081e004 	addi	r2,r2,1920
 100a95c:	10800017 	ldw	r2,0(r2)
 100a960:	103ee83a 	callr	r2
 100a964:	e0bfff15 	stw	r2,-4(fp)
 100a968:	00000306 	br	100a978 <alt_get_errno+0x48>
 100a96c:	00804074 	movhi	r2,257
 100a970:	1088bf04 	addi	r2,r2,8956
 100a974:	e0bfff15 	stw	r2,-4(fp)
 100a978:	e0bfff17 	ldw	r2,-4(fp)
}
 100a97c:	e037883a 	mov	sp,fp
 100a980:	dfc00117 	ldw	ra,4(sp)
 100a984:	df000017 	ldw	fp,0(sp)
 100a988:	dec00204 	addi	sp,sp,8
 100a98c:	f800283a 	ret

0100a990 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100a990:	deffeb04 	addi	sp,sp,-84
 100a994:	dfc01415 	stw	ra,80(sp)
 100a998:	df001315 	stw	fp,76(sp)
 100a99c:	df001304 	addi	fp,sp,76
 100a9a0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a9a4:	e0bffd17 	ldw	r2,-12(fp)
 100a9a8:	1004803a 	cmplt	r2,r2,zero
 100a9ac:	1000081e 	bne	r2,zero,100a9d0 <isatty+0x40>
 100a9b0:	e0bffd17 	ldw	r2,-12(fp)
 100a9b4:	10800324 	muli	r2,r2,12
 100a9b8:	1007883a 	mov	r3,r2
 100a9bc:	00804074 	movhi	r2,257
 100a9c0:	10bd2004 	addi	r2,r2,-2944
 100a9c4:	1887883a 	add	r3,r3,r2
 100a9c8:	e0ffff15 	stw	r3,-4(fp)
 100a9cc:	00000106 	br	100a9d4 <isatty+0x44>
 100a9d0:	e03fff15 	stw	zero,-4(fp)
 100a9d4:	e0bfff17 	ldw	r2,-4(fp)
 100a9d8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100a9dc:	e0bfed17 	ldw	r2,-76(fp)
 100a9e0:	1005003a 	cmpeq	r2,r2,zero
 100a9e4:	10000f1e 	bne	r2,zero,100aa24 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100a9e8:	e0bfed17 	ldw	r2,-76(fp)
 100a9ec:	10800017 	ldw	r2,0(r2)
 100a9f0:	10800817 	ldw	r2,32(r2)
 100a9f4:	1004c03a 	cmpne	r2,r2,zero
 100a9f8:	1000031e 	bne	r2,zero,100aa08 <isatty+0x78>
    {
      return 1;
 100a9fc:	00800044 	movi	r2,1
 100aa00:	e0bffe15 	stw	r2,-8(fp)
 100aa04:	00000c06 	br	100aa38 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100aa08:	e17fee04 	addi	r5,fp,-72
 100aa0c:	e13ffd17 	ldw	r4,-12(fp)
 100aa10:	100a85c0 	call	100a85c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100aa14:	e0bfef17 	ldw	r2,-68(fp)
 100aa18:	10880020 	cmpeqi	r2,r2,8192
 100aa1c:	e0bffe15 	stw	r2,-8(fp)
 100aa20:	00000506 	br	100aa38 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100aa24:	100aa500 	call	100aa50 <alt_get_errno>
 100aa28:	1007883a 	mov	r3,r2
 100aa2c:	00801444 	movi	r2,81
 100aa30:	18800015 	stw	r2,0(r3)
    return 0;
 100aa34:	e03ffe15 	stw	zero,-8(fp)
 100aa38:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100aa3c:	e037883a 	mov	sp,fp
 100aa40:	dfc00117 	ldw	ra,4(sp)
 100aa44:	df000017 	ldw	fp,0(sp)
 100aa48:	dec00204 	addi	sp,sp,8
 100aa4c:	f800283a 	ret

0100aa50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100aa50:	defffd04 	addi	sp,sp,-12
 100aa54:	dfc00215 	stw	ra,8(sp)
 100aa58:	df000115 	stw	fp,4(sp)
 100aa5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100aa60:	00804074 	movhi	r2,257
 100aa64:	1081e004 	addi	r2,r2,1920
 100aa68:	10800017 	ldw	r2,0(r2)
 100aa6c:	1005003a 	cmpeq	r2,r2,zero
 100aa70:	1000061e 	bne	r2,zero,100aa8c <alt_get_errno+0x3c>
 100aa74:	00804074 	movhi	r2,257
 100aa78:	1081e004 	addi	r2,r2,1920
 100aa7c:	10800017 	ldw	r2,0(r2)
 100aa80:	103ee83a 	callr	r2
 100aa84:	e0bfff15 	stw	r2,-4(fp)
 100aa88:	00000306 	br	100aa98 <alt_get_errno+0x48>
 100aa8c:	00804074 	movhi	r2,257
 100aa90:	1088bf04 	addi	r2,r2,8956
 100aa94:	e0bfff15 	stw	r2,-4(fp)
 100aa98:	e0bfff17 	ldw	r2,-4(fp)
}
 100aa9c:	e037883a 	mov	sp,fp
 100aaa0:	dfc00117 	ldw	ra,4(sp)
 100aaa4:	df000017 	ldw	fp,0(sp)
 100aaa8:	dec00204 	addi	sp,sp,8
 100aaac:	f800283a 	ret

0100aab0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100aab0:	defffe04 	addi	sp,sp,-8
 100aab4:	dfc00115 	stw	ra,4(sp)
 100aab8:	df000015 	stw	fp,0(sp)
 100aabc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100aac0:	01004074 	movhi	r4,257
 100aac4:	2101e504 	addi	r4,r4,1940
 100aac8:	01404074 	movhi	r5,257
 100aacc:	297b1104 	addi	r5,r5,-5052
 100aad0:	01804074 	movhi	r6,257
 100aad4:	3181e504 	addi	r6,r6,1940
 100aad8:	100ab300 	call	100ab30 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100aadc:	01004034 	movhi	r4,256
 100aae0:	21000804 	addi	r4,r4,32
 100aae4:	01404034 	movhi	r5,256
 100aae8:	29400804 	addi	r5,r5,32
 100aaec:	01804034 	movhi	r6,256
 100aaf0:	31806d04 	addi	r6,r6,436
 100aaf4:	100ab300 	call	100ab30 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100aaf8:	01004074 	movhi	r4,257
 100aafc:	21396c04 	addi	r4,r4,-6736
 100ab00:	01404074 	movhi	r5,257
 100ab04:	29796c04 	addi	r5,r5,-6736
 100ab08:	01804074 	movhi	r6,257
 100ab0c:	31bb1104 	addi	r6,r6,-5052
 100ab10:	100ab300 	call	100ab30 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100ab14:	100d1c80 	call	100d1c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100ab18:	100d47c0 	call	100d47c <alt_icache_flush_all>
}
 100ab1c:	e037883a 	mov	sp,fp
 100ab20:	dfc00117 	ldw	ra,4(sp)
 100ab24:	df000017 	ldw	fp,0(sp)
 100ab28:	dec00204 	addi	sp,sp,8
 100ab2c:	f800283a 	ret

0100ab30 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100ab30:	defffc04 	addi	sp,sp,-16
 100ab34:	df000315 	stw	fp,12(sp)
 100ab38:	df000304 	addi	fp,sp,12
 100ab3c:	e13ffd15 	stw	r4,-12(fp)
 100ab40:	e17ffe15 	stw	r5,-8(fp)
 100ab44:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100ab48:	e0fffe17 	ldw	r3,-8(fp)
 100ab4c:	e0bffd17 	ldw	r2,-12(fp)
 100ab50:	18800e26 	beq	r3,r2,100ab8c <alt_load_section+0x5c>
  {
    while( to != end )
 100ab54:	00000a06 	br	100ab80 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100ab58:	e0bffd17 	ldw	r2,-12(fp)
 100ab5c:	10c00017 	ldw	r3,0(r2)
 100ab60:	e0bffe17 	ldw	r2,-8(fp)
 100ab64:	10c00015 	stw	r3,0(r2)
 100ab68:	e0bffe17 	ldw	r2,-8(fp)
 100ab6c:	10800104 	addi	r2,r2,4
 100ab70:	e0bffe15 	stw	r2,-8(fp)
 100ab74:	e0bffd17 	ldw	r2,-12(fp)
 100ab78:	10800104 	addi	r2,r2,4
 100ab7c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100ab80:	e0fffe17 	ldw	r3,-8(fp)
 100ab84:	e0bfff17 	ldw	r2,-4(fp)
 100ab88:	18bff31e 	bne	r3,r2,100ab58 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100ab8c:	e037883a 	mov	sp,fp
 100ab90:	df000017 	ldw	fp,0(sp)
 100ab94:	dec00104 	addi	sp,sp,4
 100ab98:	f800283a 	ret

0100ab9c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100ab9c:	defff804 	addi	sp,sp,-32
 100aba0:	dfc00715 	stw	ra,28(sp)
 100aba4:	df000615 	stw	fp,24(sp)
 100aba8:	df000604 	addi	fp,sp,24
 100abac:	e13ffc15 	stw	r4,-16(fp)
 100abb0:	e17ffd15 	stw	r5,-12(fp)
 100abb4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100abb8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100abbc:	e0bffc17 	ldw	r2,-16(fp)
 100abc0:	1004803a 	cmplt	r2,r2,zero
 100abc4:	1000081e 	bne	r2,zero,100abe8 <lseek+0x4c>
 100abc8:	e0bffc17 	ldw	r2,-16(fp)
 100abcc:	10800324 	muli	r2,r2,12
 100abd0:	1007883a 	mov	r3,r2
 100abd4:	00804074 	movhi	r2,257
 100abd8:	10bd2004 	addi	r2,r2,-2944
 100abdc:	1887883a 	add	r3,r3,r2
 100abe0:	e0ffff15 	stw	r3,-4(fp)
 100abe4:	00000106 	br	100abec <lseek+0x50>
 100abe8:	e03fff15 	stw	zero,-4(fp)
 100abec:	e0bfff17 	ldw	r2,-4(fp)
 100abf0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100abf4:	e0bffb17 	ldw	r2,-20(fp)
 100abf8:	1005003a 	cmpeq	r2,r2,zero
 100abfc:	1000111e 	bne	r2,zero,100ac44 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100ac00:	e0bffb17 	ldw	r2,-20(fp)
 100ac04:	10800017 	ldw	r2,0(r2)
 100ac08:	10800717 	ldw	r2,28(r2)
 100ac0c:	1005003a 	cmpeq	r2,r2,zero
 100ac10:	1000091e 	bne	r2,zero,100ac38 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100ac14:	e0bffb17 	ldw	r2,-20(fp)
 100ac18:	10800017 	ldw	r2,0(r2)
 100ac1c:	10800717 	ldw	r2,28(r2)
 100ac20:	e13ffb17 	ldw	r4,-20(fp)
 100ac24:	e17ffd17 	ldw	r5,-12(fp)
 100ac28:	e1bffe17 	ldw	r6,-8(fp)
 100ac2c:	103ee83a 	callr	r2
 100ac30:	e0bffa15 	stw	r2,-24(fp)
 100ac34:	00000506 	br	100ac4c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100ac38:	00bfde84 	movi	r2,-134
 100ac3c:	e0bffa15 	stw	r2,-24(fp)
 100ac40:	00000206 	br	100ac4c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100ac44:	00bfebc4 	movi	r2,-81
 100ac48:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100ac4c:	e0bffa17 	ldw	r2,-24(fp)
 100ac50:	1004403a 	cmpge	r2,r2,zero
 100ac54:	1000071e 	bne	r2,zero,100ac74 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 100ac58:	100ac8c0 	call	100ac8c <alt_get_errno>
 100ac5c:	1007883a 	mov	r3,r2
 100ac60:	e0bffa17 	ldw	r2,-24(fp)
 100ac64:	0085c83a 	sub	r2,zero,r2
 100ac68:	18800015 	stw	r2,0(r3)
    rc = -1;
 100ac6c:	00bfffc4 	movi	r2,-1
 100ac70:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100ac74:	e0bffa17 	ldw	r2,-24(fp)
}
 100ac78:	e037883a 	mov	sp,fp
 100ac7c:	dfc00117 	ldw	ra,4(sp)
 100ac80:	df000017 	ldw	fp,0(sp)
 100ac84:	dec00204 	addi	sp,sp,8
 100ac88:	f800283a 	ret

0100ac8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ac8c:	defffd04 	addi	sp,sp,-12
 100ac90:	dfc00215 	stw	ra,8(sp)
 100ac94:	df000115 	stw	fp,4(sp)
 100ac98:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100ac9c:	00804074 	movhi	r2,257
 100aca0:	1081e004 	addi	r2,r2,1920
 100aca4:	10800017 	ldw	r2,0(r2)
 100aca8:	1005003a 	cmpeq	r2,r2,zero
 100acac:	1000061e 	bne	r2,zero,100acc8 <alt_get_errno+0x3c>
 100acb0:	00804074 	movhi	r2,257
 100acb4:	1081e004 	addi	r2,r2,1920
 100acb8:	10800017 	ldw	r2,0(r2)
 100acbc:	103ee83a 	callr	r2
 100acc0:	e0bfff15 	stw	r2,-4(fp)
 100acc4:	00000306 	br	100acd4 <alt_get_errno+0x48>
 100acc8:	00804074 	movhi	r2,257
 100accc:	1088bf04 	addi	r2,r2,8956
 100acd0:	e0bfff15 	stw	r2,-4(fp)
 100acd4:	e0bfff17 	ldw	r2,-4(fp)
}
 100acd8:	e037883a 	mov	sp,fp
 100acdc:	dfc00117 	ldw	ra,4(sp)
 100ace0:	df000017 	ldw	fp,0(sp)
 100ace4:	dec00204 	addi	sp,sp,8
 100ace8:	f800283a 	ret

0100acec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100acec:	defffd04 	addi	sp,sp,-12
 100acf0:	dfc00215 	stw	ra,8(sp)
 100acf4:	df000115 	stw	fp,4(sp)
 100acf8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100acfc:	0009883a 	mov	r4,zero
 100ad00:	100b6200 	call	100b620 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100ad04:	100b6540 	call	100b654 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100ad08:	01004074 	movhi	r4,257
 100ad0c:	213ae404 	addi	r4,r4,-5232
 100ad10:	01404074 	movhi	r5,257
 100ad14:	297ae404 	addi	r5,r5,-5232
 100ad18:	01804074 	movhi	r6,257
 100ad1c:	31bae404 	addi	r6,r6,-5232
 100ad20:	100d83c0 	call	100d83c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100ad24:	100d3200 	call	100d320 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100ad28:	01004074 	movhi	r4,257
 100ad2c:	2134e104 	addi	r4,r4,-11388
 100ad30:	100de000 	call	100de00 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100ad34:	d126eb17 	ldw	r4,-25684(gp)
 100ad38:	d166ec17 	ldw	r5,-25680(gp)
 100ad3c:	d1a6ed17 	ldw	r6,-25676(gp)
 100ad40:	10002000 	call	1000200 <main>
 100ad44:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100ad48:	01000044 	movi	r4,1
 100ad4c:	100a6d40 	call	100a6d4 <close>
  exit (result);
 100ad50:	e13fff17 	ldw	r4,-4(fp)
 100ad54:	100de140 	call	100de14 <exit>

0100ad58 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100ad58:	defffe04 	addi	sp,sp,-8
 100ad5c:	df000115 	stw	fp,4(sp)
 100ad60:	df000104 	addi	fp,sp,4
 100ad64:	e13fff15 	stw	r4,-4(fp)
}
 100ad68:	e037883a 	mov	sp,fp
 100ad6c:	df000017 	ldw	fp,0(sp)
 100ad70:	dec00104 	addi	sp,sp,4
 100ad74:	f800283a 	ret

0100ad78 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100ad78:	defffe04 	addi	sp,sp,-8
 100ad7c:	df000115 	stw	fp,4(sp)
 100ad80:	df000104 	addi	fp,sp,4
 100ad84:	e13fff15 	stw	r4,-4(fp)
}
 100ad88:	e037883a 	mov	sp,fp
 100ad8c:	df000017 	ldw	fp,0(sp)
 100ad90:	dec00104 	addi	sp,sp,4
 100ad94:	f800283a 	ret

0100ad98 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 100ad98:	defff204 	addi	sp,sp,-56
 100ad9c:	dfc00a15 	stw	ra,40(sp)
 100ada0:	df000915 	stw	fp,36(sp)
 100ada4:	df000904 	addi	fp,sp,36
 100ada8:	e1400215 	stw	r5,8(fp)
 100adac:	e1800315 	stw	r6,12(fp)
 100adb0:	e1c00415 	stw	r7,16(fp)
 100adb4:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
 100adb8:	e0800204 	addi	r2,fp,8
 100adbc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 100adc0:	e0bfff17 	ldw	r2,-4(fp)
 100adc4:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
 100adc8:	00007806 	br	100afac <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 100adcc:	e0bffc07 	ldb	r2,-16(fp)
 100add0:	10800960 	cmpeqi	r2,r2,37
 100add4:	1000031e 	bne	r2,zero,100ade4 <alt_printf+0x4c>
        {
            alt_putchar(c);
 100add8:	e13ffc07 	ldb	r4,-16(fp)
 100addc:	100aff00 	call	100aff0 <alt_putchar>
 100ade0:	00007206 	br	100afac <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 100ade4:	e0bffd17 	ldw	r2,-12(fp)
 100ade8:	10800003 	ldbu	r2,0(r2)
 100adec:	e0bffc05 	stb	r2,-16(fp)
 100adf0:	e0bffc07 	ldb	r2,-16(fp)
 100adf4:	1004c03a 	cmpne	r2,r2,zero
 100adf8:	1007883a 	mov	r3,r2
 100adfc:	e0bffd17 	ldw	r2,-12(fp)
 100ae00:	10800044 	addi	r2,r2,1
 100ae04:	e0bffd15 	stw	r2,-12(fp)
 100ae08:	18803fcc 	andi	r2,r3,255
 100ae0c:	1005003a 	cmpeq	r2,r2,zero
 100ae10:	1000721e 	bne	r2,zero,100afdc <alt_printf+0x244>
            {
                if (c == '%')
 100ae14:	e0bffc07 	ldb	r2,-16(fp)
 100ae18:	10800958 	cmpnei	r2,r2,37
 100ae1c:	1000031e 	bne	r2,zero,100ae2c <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 100ae20:	e13ffc07 	ldb	r4,-16(fp)
 100ae24:	100aff00 	call	100aff0 <alt_putchar>
 100ae28:	00006006 	br	100afac <alt_printf+0x214>
                } 
                else if (c == 'c')
 100ae2c:	e0bffc07 	ldb	r2,-16(fp)
 100ae30:	108018d8 	cmpnei	r2,r2,99
 100ae34:	1000091e 	bne	r2,zero,100ae5c <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
 100ae38:	e0fffe17 	ldw	r3,-8(fp)
 100ae3c:	18800104 	addi	r2,r3,4
 100ae40:	e0bffe15 	stw	r2,-8(fp)
 100ae44:	1805883a 	mov	r2,r3
 100ae48:	10800017 	ldw	r2,0(r2)
 100ae4c:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
 100ae50:	e13ffb17 	ldw	r4,-20(fp)
 100ae54:	100aff00 	call	100aff0 <alt_putchar>
 100ae58:	00005406 	br	100afac <alt_printf+0x214>
                }
                else if (c == 'x')
 100ae5c:	e0bffc07 	ldb	r2,-16(fp)
 100ae60:	10801e18 	cmpnei	r2,r2,120
 100ae64:	1000371e 	bne	r2,zero,100af44 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 100ae68:	e0fffe17 	ldw	r3,-8(fp)
 100ae6c:	18800104 	addi	r2,r3,4
 100ae70:	e0bffe15 	stw	r2,-8(fp)
 100ae74:	1805883a 	mov	r2,r3
 100ae78:	10800017 	ldw	r2,0(r2)
 100ae7c:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 100ae80:	e0bffa17 	ldw	r2,-24(fp)
 100ae84:	1004c03a 	cmpne	r2,r2,zero
 100ae88:	1000031e 	bne	r2,zero,100ae98 <alt_printf+0x100>
                    {
                        alt_putchar('0');
 100ae8c:	01000c04 	movi	r4,48
 100ae90:	100aff00 	call	100aff0 <alt_putchar>
                        continue;
 100ae94:	00004506 	br	100afac <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 100ae98:	00800704 	movi	r2,28
 100ae9c:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
 100aea0:	00000306 	br	100aeb0 <alt_printf+0x118>
                        digit_shift -= 4;
 100aea4:	e0bff817 	ldw	r2,-32(fp)
 100aea8:	10bfff04 	addi	r2,r2,-4
 100aeac:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 100aeb0:	00c003c4 	movi	r3,15
 100aeb4:	e0bff817 	ldw	r2,-32(fp)
 100aeb8:	1884983a 	sll	r2,r3,r2
 100aebc:	1007883a 	mov	r3,r2
 100aec0:	e0bffa17 	ldw	r2,-24(fp)
 100aec4:	1884703a 	and	r2,r3,r2
 100aec8:	1005003a 	cmpeq	r2,r2,zero
 100aecc:	103ff51e 	bne	r2,zero,100aea4 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 100aed0:	00001806 	br	100af34 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 100aed4:	00c003c4 	movi	r3,15
 100aed8:	e0bff817 	ldw	r2,-32(fp)
 100aedc:	1884983a 	sll	r2,r3,r2
 100aee0:	1007883a 	mov	r3,r2
 100aee4:	e0bffa17 	ldw	r2,-24(fp)
 100aee8:	1886703a 	and	r3,r3,r2
 100aeec:	e0bff817 	ldw	r2,-32(fp)
 100aef0:	1884d83a 	srl	r2,r3,r2
 100aef4:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
 100aef8:	e0bff917 	ldw	r2,-28(fp)
 100aefc:	108002a8 	cmpgeui	r2,r2,10
 100af00:	1000041e 	bne	r2,zero,100af14 <alt_printf+0x17c>
                            c = '0' + digit;
 100af04:	e0bff917 	ldw	r2,-28(fp)
 100af08:	10800c04 	addi	r2,r2,48
 100af0c:	e0bffc05 	stb	r2,-16(fp)
 100af10:	00000306 	br	100af20 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
 100af14:	e0bff917 	ldw	r2,-28(fp)
 100af18:	108015c4 	addi	r2,r2,87
 100af1c:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
 100af20:	e13ffc07 	ldb	r4,-16(fp)
 100af24:	100aff00 	call	100aff0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 100af28:	e0bff817 	ldw	r2,-32(fp)
 100af2c:	10bfff04 	addi	r2,r2,-4
 100af30:	e0bff815 	stw	r2,-32(fp)
 100af34:	e0bff817 	ldw	r2,-32(fp)
 100af38:	1004403a 	cmpge	r2,r2,zero
 100af3c:	103fe51e 	bne	r2,zero,100aed4 <alt_printf+0x13c>
 100af40:	00001a06 	br	100afac <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 100af44:	e0bffc07 	ldb	r2,-16(fp)
 100af48:	10801cd8 	cmpnei	r2,r2,115
 100af4c:	1000171e 	bne	r2,zero,100afac <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 100af50:	e0fffe17 	ldw	r3,-8(fp)
 100af54:	18800104 	addi	r2,r3,4
 100af58:	e0bffe15 	stw	r2,-8(fp)
 100af5c:	1805883a 	mov	r2,r3
 100af60:	10800017 	ldw	r2,0(r2)
 100af64:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
 100af68:	00000906 	br	100af90 <alt_printf+0x1f8>
                      alt_putchar(*s++);
 100af6c:	e0bff717 	ldw	r2,-36(fp)
 100af70:	10800003 	ldbu	r2,0(r2)
 100af74:	11003fcc 	andi	r4,r2,255
 100af78:	2100201c 	xori	r4,r4,128
 100af7c:	213fe004 	addi	r4,r4,-128
 100af80:	e0bff717 	ldw	r2,-36(fp)
 100af84:	10800044 	addi	r2,r2,1
 100af88:	e0bff715 	stw	r2,-36(fp)
 100af8c:	100aff00 	call	100aff0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 100af90:	e0bff717 	ldw	r2,-36(fp)
 100af94:	10800003 	ldbu	r2,0(r2)
 100af98:	10803fcc 	andi	r2,r2,255
 100af9c:	1080201c 	xori	r2,r2,128
 100afa0:	10bfe004 	addi	r2,r2,-128
 100afa4:	1004c03a 	cmpne	r2,r2,zero
 100afa8:	103ff01e 	bne	r2,zero,100af6c <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 100afac:	e0bffd17 	ldw	r2,-12(fp)
 100afb0:	10800003 	ldbu	r2,0(r2)
 100afb4:	e0bffc05 	stb	r2,-16(fp)
 100afb8:	e0bffc07 	ldb	r2,-16(fp)
 100afbc:	1004c03a 	cmpne	r2,r2,zero
 100afc0:	1007883a 	mov	r3,r2
 100afc4:	e0bffd17 	ldw	r2,-12(fp)
 100afc8:	10800044 	addi	r2,r2,1
 100afcc:	e0bffd15 	stw	r2,-12(fp)
 100afd0:	18803fcc 	andi	r2,r3,255
 100afd4:	1004c03a 	cmpne	r2,r2,zero
 100afd8:	103f7c1e 	bne	r2,zero,100adcc <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
 100afdc:	e037883a 	mov	sp,fp
 100afe0:	dfc00117 	ldw	ra,4(sp)
 100afe4:	df000017 	ldw	fp,0(sp)
 100afe8:	dec00504 	addi	sp,sp,20
 100afec:	f800283a 	ret

0100aff0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 100aff0:	defffd04 	addi	sp,sp,-12
 100aff4:	dfc00215 	stw	ra,8(sp)
 100aff8:	df000115 	stw	fp,4(sp)
 100affc:	df000104 	addi	fp,sp,4
 100b000:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 100b004:	00804074 	movhi	r2,257
 100b008:	1081d504 	addi	r2,r2,1876
 100b00c:	10800017 	ldw	r2,0(r2)
 100b010:	11400217 	ldw	r5,8(r2)
 100b014:	e13fff17 	ldw	r4,-4(fp)
 100b018:	100dec00 	call	100dec0 <putc>
#endif
}
 100b01c:	e037883a 	mov	sp,fp
 100b020:	dfc00117 	ldw	ra,4(sp)
 100b024:	df000017 	ldw	fp,0(sp)
 100b028:	dec00204 	addi	sp,sp,8
 100b02c:	f800283a 	ret

0100b030 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100b030:	defff704 	addi	sp,sp,-36
 100b034:	dfc00815 	stw	ra,32(sp)
 100b038:	df000715 	stw	fp,28(sp)
 100b03c:	df000704 	addi	fp,sp,28
 100b040:	e13ffb15 	stw	r4,-20(fp)
 100b044:	e17ffc15 	stw	r5,-16(fp)
 100b048:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b04c:	e0bffb17 	ldw	r2,-20(fp)
 100b050:	1004803a 	cmplt	r2,r2,zero
 100b054:	1000081e 	bne	r2,zero,100b078 <read+0x48>
 100b058:	e0bffb17 	ldw	r2,-20(fp)
 100b05c:	10800324 	muli	r2,r2,12
 100b060:	1007883a 	mov	r3,r2
 100b064:	00804074 	movhi	r2,257
 100b068:	10bd2004 	addi	r2,r2,-2944
 100b06c:	1887883a 	add	r3,r3,r2
 100b070:	e0ffff15 	stw	r3,-4(fp)
 100b074:	00000106 	br	100b07c <read+0x4c>
 100b078:	e03fff15 	stw	zero,-4(fp)
 100b07c:	e0bfff17 	ldw	r2,-4(fp)
 100b080:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100b084:	e0bffa17 	ldw	r2,-24(fp)
 100b088:	1005003a 	cmpeq	r2,r2,zero
 100b08c:	1000241e 	bne	r2,zero,100b120 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100b090:	e0bffa17 	ldw	r2,-24(fp)
 100b094:	10800217 	ldw	r2,8(r2)
 100b098:	108000cc 	andi	r2,r2,3
 100b09c:	10800060 	cmpeqi	r2,r2,1
 100b0a0:	10001a1e 	bne	r2,zero,100b10c <read+0xdc>
 100b0a4:	e0bffa17 	ldw	r2,-24(fp)
 100b0a8:	10800017 	ldw	r2,0(r2)
 100b0ac:	10800517 	ldw	r2,20(r2)
 100b0b0:	1005003a 	cmpeq	r2,r2,zero
 100b0b4:	1000151e 	bne	r2,zero,100b10c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100b0b8:	e0bffa17 	ldw	r2,-24(fp)
 100b0bc:	10800017 	ldw	r2,0(r2)
 100b0c0:	10800517 	ldw	r2,20(r2)
 100b0c4:	e17ffc17 	ldw	r5,-16(fp)
 100b0c8:	e1bffd17 	ldw	r6,-12(fp)
 100b0cc:	e13ffa17 	ldw	r4,-24(fp)
 100b0d0:	103ee83a 	callr	r2
 100b0d4:	e0bff915 	stw	r2,-28(fp)
 100b0d8:	e0bff917 	ldw	r2,-28(fp)
 100b0dc:	1004403a 	cmpge	r2,r2,zero
 100b0e0:	1000071e 	bne	r2,zero,100b100 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 100b0e4:	100b1500 	call	100b150 <alt_get_errno>
 100b0e8:	e0fff917 	ldw	r3,-28(fp)
 100b0ec:	00c7c83a 	sub	r3,zero,r3
 100b0f0:	10c00015 	stw	r3,0(r2)
          return -1;
 100b0f4:	00bfffc4 	movi	r2,-1
 100b0f8:	e0bffe15 	stw	r2,-8(fp)
 100b0fc:	00000e06 	br	100b138 <read+0x108>
        }
        return rval;
 100b100:	e0bff917 	ldw	r2,-28(fp)
 100b104:	e0bffe15 	stw	r2,-8(fp)
 100b108:	00000b06 	br	100b138 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100b10c:	100b1500 	call	100b150 <alt_get_errno>
 100b110:	1007883a 	mov	r3,r2
 100b114:	00800344 	movi	r2,13
 100b118:	18800015 	stw	r2,0(r3)
 100b11c:	00000406 	br	100b130 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100b120:	100b1500 	call	100b150 <alt_get_errno>
 100b124:	1007883a 	mov	r3,r2
 100b128:	00801444 	movi	r2,81
 100b12c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100b130:	00bfffc4 	movi	r2,-1
 100b134:	e0bffe15 	stw	r2,-8(fp)
 100b138:	e0bffe17 	ldw	r2,-8(fp)
}
 100b13c:	e037883a 	mov	sp,fp
 100b140:	dfc00117 	ldw	ra,4(sp)
 100b144:	df000017 	ldw	fp,0(sp)
 100b148:	dec00204 	addi	sp,sp,8
 100b14c:	f800283a 	ret

0100b150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b150:	defffd04 	addi	sp,sp,-12
 100b154:	dfc00215 	stw	ra,8(sp)
 100b158:	df000115 	stw	fp,4(sp)
 100b15c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100b160:	00804074 	movhi	r2,257
 100b164:	1081e004 	addi	r2,r2,1920
 100b168:	10800017 	ldw	r2,0(r2)
 100b16c:	1005003a 	cmpeq	r2,r2,zero
 100b170:	1000061e 	bne	r2,zero,100b18c <alt_get_errno+0x3c>
 100b174:	00804074 	movhi	r2,257
 100b178:	1081e004 	addi	r2,r2,1920
 100b17c:	10800017 	ldw	r2,0(r2)
 100b180:	103ee83a 	callr	r2
 100b184:	e0bfff15 	stw	r2,-4(fp)
 100b188:	00000306 	br	100b198 <alt_get_errno+0x48>
 100b18c:	00804074 	movhi	r2,257
 100b190:	1088bf04 	addi	r2,r2,8956
 100b194:	e0bfff15 	stw	r2,-4(fp)
 100b198:	e0bfff17 	ldw	r2,-4(fp)
}
 100b19c:	e037883a 	mov	sp,fp
 100b1a0:	dfc00117 	ldw	ra,4(sp)
 100b1a4:	df000017 	ldw	fp,0(sp)
 100b1a8:	dec00204 	addi	sp,sp,8
 100b1ac:	f800283a 	ret

0100b1b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100b1b0:	defffe04 	addi	sp,sp,-8
 100b1b4:	df000115 	stw	fp,4(sp)
 100b1b8:	df000104 	addi	fp,sp,4
 100b1bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100b1c0:	e0bfff17 	ldw	r2,-4(fp)
 100b1c4:	108000d0 	cmplti	r2,r2,3
 100b1c8:	10000d1e 	bne	r2,zero,100b200 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100b1cc:	e0bfff17 	ldw	r2,-4(fp)
 100b1d0:	00c04074 	movhi	r3,257
 100b1d4:	18fd2004 	addi	r3,r3,-2944
 100b1d8:	10800324 	muli	r2,r2,12
 100b1dc:	10c5883a 	add	r2,r2,r3
 100b1e0:	10800204 	addi	r2,r2,8
 100b1e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100b1e8:	e0bfff17 	ldw	r2,-4(fp)
 100b1ec:	00c04074 	movhi	r3,257
 100b1f0:	18fd2004 	addi	r3,r3,-2944
 100b1f4:	10800324 	muli	r2,r2,12
 100b1f8:	10c5883a 	add	r2,r2,r3
 100b1fc:	10000015 	stw	zero,0(r2)
  }
}
 100b200:	e037883a 	mov	sp,fp
 100b204:	df000017 	ldw	fp,0(sp)
 100b208:	dec00104 	addi	sp,sp,4
 100b20c:	f800283a 	ret

0100b210 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100b210:	defff804 	addi	sp,sp,-32
 100b214:	df000715 	stw	fp,28(sp)
 100b218:	df000704 	addi	fp,sp,28
 100b21c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b220:	0005303a 	rdctl	r2,status
 100b224:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b228:	e0fffb17 	ldw	r3,-20(fp)
 100b22c:	00bfff84 	movi	r2,-2
 100b230:	1884703a 	and	r2,r3,r2
 100b234:	1001703a 	wrctl	status,r2
  
  return context;
 100b238:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100b23c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100b240:	d0a00c17 	ldw	r2,-32720(gp)
 100b244:	10c000c4 	addi	r3,r2,3
 100b248:	00bfff04 	movi	r2,-4
 100b24c:	1884703a 	and	r2,r3,r2
 100b250:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100b254:	d0e00c17 	ldw	r3,-32720(gp)
 100b258:	e0bffe17 	ldw	r2,-8(fp)
 100b25c:	1887883a 	add	r3,r3,r2
 100b260:	00806034 	movhi	r2,384
 100b264:	10800004 	addi	r2,r2,0
 100b268:	10c0072e 	bgeu	r2,r3,100b288 <sbrk+0x78>
 100b26c:	e0bffd17 	ldw	r2,-12(fp)
 100b270:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b274:	e0bffa17 	ldw	r2,-24(fp)
 100b278:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100b27c:	00bfffc4 	movi	r2,-1
 100b280:	e0bfff15 	stw	r2,-4(fp)
 100b284:	00000c06 	br	100b2b8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100b288:	d0a00c17 	ldw	r2,-32720(gp)
 100b28c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100b290:	d0e00c17 	ldw	r3,-32720(gp)
 100b294:	e0bffe17 	ldw	r2,-8(fp)
 100b298:	1885883a 	add	r2,r3,r2
 100b29c:	d0a00c15 	stw	r2,-32720(gp)
 100b2a0:	e0bffd17 	ldw	r2,-12(fp)
 100b2a4:	e0bff915 	stw	r2,-28(fp)
 100b2a8:	e0bff917 	ldw	r2,-28(fp)
 100b2ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100b2b0:	e0bffc17 	ldw	r2,-16(fp)
 100b2b4:	e0bfff15 	stw	r2,-4(fp)
 100b2b8:	e0bfff17 	ldw	r2,-4(fp)
} 
 100b2bc:	e037883a 	mov	sp,fp
 100b2c0:	df000017 	ldw	fp,0(sp)
 100b2c4:	dec00104 	addi	sp,sp,4
 100b2c8:	f800283a 	ret

0100b2cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100b2cc:	defffa04 	addi	sp,sp,-24
 100b2d0:	df000515 	stw	fp,20(sp)
 100b2d4:	df000504 	addi	fp,sp,20
 100b2d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b2dc:	0005303a 	rdctl	r2,status
 100b2e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b2e4:	e0fffd17 	ldw	r3,-12(fp)
 100b2e8:	00bfff84 	movi	r2,-2
 100b2ec:	1884703a 	and	r2,r3,r2
 100b2f0:	1001703a 	wrctl	status,r2
  
  return context;
 100b2f4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100b2f8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100b2fc:	e0bfff17 	ldw	r2,-4(fp)
 100b300:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100b304:	e0bffc17 	ldw	r2,-16(fp)
 100b308:	10c00017 	ldw	r3,0(r2)
 100b30c:	e0bffc17 	ldw	r2,-16(fp)
 100b310:	10800117 	ldw	r2,4(r2)
 100b314:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100b318:	e0bffc17 	ldw	r2,-16(fp)
 100b31c:	10c00117 	ldw	r3,4(r2)
 100b320:	e0bffc17 	ldw	r2,-16(fp)
 100b324:	10800017 	ldw	r2,0(r2)
 100b328:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100b32c:	e0fffc17 	ldw	r3,-16(fp)
 100b330:	e0bffc17 	ldw	r2,-16(fp)
 100b334:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100b338:	e0fffc17 	ldw	r3,-16(fp)
 100b33c:	e0bffc17 	ldw	r2,-16(fp)
 100b340:	18800015 	stw	r2,0(r3)
 100b344:	e0bffe17 	ldw	r2,-8(fp)
 100b348:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b34c:	e0bffb17 	ldw	r2,-20(fp)
 100b350:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100b354:	e037883a 	mov	sp,fp
 100b358:	df000017 	ldw	fp,0(sp)
 100b35c:	dec00104 	addi	sp,sp,4
 100b360:	f800283a 	ret

0100b364 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100b364:	defffb04 	addi	sp,sp,-20
 100b368:	dfc00415 	stw	ra,16(sp)
 100b36c:	df000315 	stw	fp,12(sp)
 100b370:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100b374:	d0a00d17 	ldw	r2,-32716(gp)
 100b378:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100b37c:	d0a6ef17 	ldw	r2,-25668(gp)
 100b380:	10800044 	addi	r2,r2,1
 100b384:	d0a6ef15 	stw	r2,-25668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100b388:	00003106 	br	100b450 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 100b38c:	e0bffe17 	ldw	r2,-8(fp)
 100b390:	10800017 	ldw	r2,0(r2)
 100b394:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100b398:	e0bffe17 	ldw	r2,-8(fp)
 100b39c:	10800403 	ldbu	r2,16(r2)
 100b3a0:	10803fcc 	andi	r2,r2,255
 100b3a4:	1005003a 	cmpeq	r2,r2,zero
 100b3a8:	1000051e 	bne	r2,zero,100b3c0 <alt_tick+0x5c>
 100b3ac:	d0a6ef17 	ldw	r2,-25668(gp)
 100b3b0:	1004c03a 	cmpne	r2,r2,zero
 100b3b4:	1000021e 	bne	r2,zero,100b3c0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 100b3b8:	e0bffe17 	ldw	r2,-8(fp)
 100b3bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100b3c0:	e0bffe17 	ldw	r2,-8(fp)
 100b3c4:	10c00217 	ldw	r3,8(r2)
 100b3c8:	d0a6ef17 	ldw	r2,-25668(gp)
 100b3cc:	10c01e36 	bltu	r2,r3,100b448 <alt_tick+0xe4>
 100b3d0:	e0bffe17 	ldw	r2,-8(fp)
 100b3d4:	10800403 	ldbu	r2,16(r2)
 100b3d8:	10803fcc 	andi	r2,r2,255
 100b3dc:	1004c03a 	cmpne	r2,r2,zero
 100b3e0:	1000191e 	bne	r2,zero,100b448 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 100b3e4:	e0bffe17 	ldw	r2,-8(fp)
 100b3e8:	10c00317 	ldw	r3,12(r2)
 100b3ec:	e0bffe17 	ldw	r2,-8(fp)
 100b3f0:	11000517 	ldw	r4,20(r2)
 100b3f4:	183ee83a 	callr	r3
 100b3f8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100b3fc:	e0bffd17 	ldw	r2,-12(fp)
 100b400:	1004c03a 	cmpne	r2,r2,zero
 100b404:	1000031e 	bne	r2,zero,100b414 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 100b408:	e13ffe17 	ldw	r4,-8(fp)
 100b40c:	100b2cc0 	call	100b2cc <alt_alarm_stop>
 100b410:	00000d06 	br	100b448 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 100b414:	e0bffe17 	ldw	r2,-8(fp)
 100b418:	10c00217 	ldw	r3,8(r2)
 100b41c:	e0bffd17 	ldw	r2,-12(fp)
 100b420:	1887883a 	add	r3,r3,r2
 100b424:	e0bffe17 	ldw	r2,-8(fp)
 100b428:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100b42c:	e0bffe17 	ldw	r2,-8(fp)
 100b430:	10c00217 	ldw	r3,8(r2)
 100b434:	d0a6ef17 	ldw	r2,-25668(gp)
 100b438:	1880032e 	bgeu	r3,r2,100b448 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 100b43c:	e0fffe17 	ldw	r3,-8(fp)
 100b440:	00800044 	movi	r2,1
 100b444:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100b448:	e0bfff17 	ldw	r2,-4(fp)
 100b44c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100b450:	d0e00d04 	addi	r3,gp,-32716
 100b454:	e0bffe17 	ldw	r2,-8(fp)
 100b458:	10ffcc1e 	bne	r2,r3,100b38c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 100b45c:	e037883a 	mov	sp,fp
 100b460:	dfc00117 	ldw	ra,4(sp)
 100b464:	df000017 	ldw	fp,0(sp)
 100b468:	dec00204 	addi	sp,sp,8
 100b46c:	f800283a 	ret

0100b470 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 100b470:	defffd04 	addi	sp,sp,-12
 100b474:	dfc00215 	stw	ra,8(sp)
 100b478:	df000115 	stw	fp,4(sp)
 100b47c:	df000104 	addi	fp,sp,4
 100b480:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 100b484:	e13fff17 	ldw	r4,-4(fp)
 100b488:	100d07c0 	call	100d07c <alt_busy_sleep>
}
 100b48c:	e037883a 	mov	sp,fp
 100b490:	dfc00117 	ldw	ra,4(sp)
 100b494:	df000017 	ldw	fp,0(sp)
 100b498:	dec00204 	addi	sp,sp,8
 100b49c:	f800283a 	ret

0100b4a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100b4a0:	defff704 	addi	sp,sp,-36
 100b4a4:	dfc00815 	stw	ra,32(sp)
 100b4a8:	df000715 	stw	fp,28(sp)
 100b4ac:	df000704 	addi	fp,sp,28
 100b4b0:	e13ffb15 	stw	r4,-20(fp)
 100b4b4:	e17ffc15 	stw	r5,-16(fp)
 100b4b8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b4bc:	e0bffb17 	ldw	r2,-20(fp)
 100b4c0:	1004803a 	cmplt	r2,r2,zero
 100b4c4:	1000081e 	bne	r2,zero,100b4e8 <write+0x48>
 100b4c8:	e0bffb17 	ldw	r2,-20(fp)
 100b4cc:	10800324 	muli	r2,r2,12
 100b4d0:	1007883a 	mov	r3,r2
 100b4d4:	00804074 	movhi	r2,257
 100b4d8:	10bd2004 	addi	r2,r2,-2944
 100b4dc:	1887883a 	add	r3,r3,r2
 100b4e0:	e0ffff15 	stw	r3,-4(fp)
 100b4e4:	00000106 	br	100b4ec <write+0x4c>
 100b4e8:	e03fff15 	stw	zero,-4(fp)
 100b4ec:	e0bfff17 	ldw	r2,-4(fp)
 100b4f0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100b4f4:	e0bffa17 	ldw	r2,-24(fp)
 100b4f8:	1005003a 	cmpeq	r2,r2,zero
 100b4fc:	1000241e 	bne	r2,zero,100b590 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100b500:	e0bffa17 	ldw	r2,-24(fp)
 100b504:	10800217 	ldw	r2,8(r2)
 100b508:	108000cc 	andi	r2,r2,3
 100b50c:	1005003a 	cmpeq	r2,r2,zero
 100b510:	10001a1e 	bne	r2,zero,100b57c <write+0xdc>
 100b514:	e0bffa17 	ldw	r2,-24(fp)
 100b518:	10800017 	ldw	r2,0(r2)
 100b51c:	10800617 	ldw	r2,24(r2)
 100b520:	1005003a 	cmpeq	r2,r2,zero
 100b524:	1000151e 	bne	r2,zero,100b57c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100b528:	e0bffa17 	ldw	r2,-24(fp)
 100b52c:	10800017 	ldw	r2,0(r2)
 100b530:	10800617 	ldw	r2,24(r2)
 100b534:	e17ffc17 	ldw	r5,-16(fp)
 100b538:	e1bffd17 	ldw	r6,-12(fp)
 100b53c:	e13ffa17 	ldw	r4,-24(fp)
 100b540:	103ee83a 	callr	r2
 100b544:	e0bff915 	stw	r2,-28(fp)
 100b548:	e0bff917 	ldw	r2,-28(fp)
 100b54c:	1004403a 	cmpge	r2,r2,zero
 100b550:	1000071e 	bne	r2,zero,100b570 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 100b554:	100b5c00 	call	100b5c0 <alt_get_errno>
 100b558:	e0fff917 	ldw	r3,-28(fp)
 100b55c:	00c7c83a 	sub	r3,zero,r3
 100b560:	10c00015 	stw	r3,0(r2)
        return -1;
 100b564:	00bfffc4 	movi	r2,-1
 100b568:	e0bffe15 	stw	r2,-8(fp)
 100b56c:	00000e06 	br	100b5a8 <write+0x108>
      }
      return rval;
 100b570:	e0bff917 	ldw	r2,-28(fp)
 100b574:	e0bffe15 	stw	r2,-8(fp)
 100b578:	00000b06 	br	100b5a8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100b57c:	100b5c00 	call	100b5c0 <alt_get_errno>
 100b580:	1007883a 	mov	r3,r2
 100b584:	00800344 	movi	r2,13
 100b588:	18800015 	stw	r2,0(r3)
 100b58c:	00000406 	br	100b5a0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100b590:	100b5c00 	call	100b5c0 <alt_get_errno>
 100b594:	1007883a 	mov	r3,r2
 100b598:	00801444 	movi	r2,81
 100b59c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100b5a0:	00bfffc4 	movi	r2,-1
 100b5a4:	e0bffe15 	stw	r2,-8(fp)
 100b5a8:	e0bffe17 	ldw	r2,-8(fp)
}
 100b5ac:	e037883a 	mov	sp,fp
 100b5b0:	dfc00117 	ldw	ra,4(sp)
 100b5b4:	df000017 	ldw	fp,0(sp)
 100b5b8:	dec00204 	addi	sp,sp,8
 100b5bc:	f800283a 	ret

0100b5c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b5c0:	defffd04 	addi	sp,sp,-12
 100b5c4:	dfc00215 	stw	ra,8(sp)
 100b5c8:	df000115 	stw	fp,4(sp)
 100b5cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100b5d0:	00804074 	movhi	r2,257
 100b5d4:	1081e004 	addi	r2,r2,1920
 100b5d8:	10800017 	ldw	r2,0(r2)
 100b5dc:	1005003a 	cmpeq	r2,r2,zero
 100b5e0:	1000061e 	bne	r2,zero,100b5fc <alt_get_errno+0x3c>
 100b5e4:	00804074 	movhi	r2,257
 100b5e8:	1081e004 	addi	r2,r2,1920
 100b5ec:	10800017 	ldw	r2,0(r2)
 100b5f0:	103ee83a 	callr	r2
 100b5f4:	e0bfff15 	stw	r2,-4(fp)
 100b5f8:	00000306 	br	100b608 <alt_get_errno+0x48>
 100b5fc:	00804074 	movhi	r2,257
 100b600:	1088bf04 	addi	r2,r2,8956
 100b604:	e0bfff15 	stw	r2,-4(fp)
 100b608:	e0bfff17 	ldw	r2,-4(fp)
}
 100b60c:	e037883a 	mov	sp,fp
 100b610:	dfc00117 	ldw	ra,4(sp)
 100b614:	df000017 	ldw	fp,0(sp)
 100b618:	dec00204 	addi	sp,sp,8
 100b61c:	f800283a 	ret

0100b620 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100b620:	defffd04 	addi	sp,sp,-12
 100b624:	dfc00215 	stw	ra,8(sp)
 100b628:	df000115 	stw	fp,4(sp)
 100b62c:	df000104 	addi	fp,sp,4
 100b630:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 100b634:	100db780 	call	100db78 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100b638:	00800044 	movi	r2,1
 100b63c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100b640:	e037883a 	mov	sp,fp
 100b644:	dfc00117 	ldw	ra,4(sp)
 100b648:	df000017 	ldw	fp,0(sp)
 100b64c:	dec00204 	addi	sp,sp,8
 100b650:	f800283a 	ret

0100b654 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100b654:	defffd04 	addi	sp,sp,-12
 100b658:	dfc00215 	stw	ra,8(sp)
 100b65c:	df000115 	stw	fp,4(sp)
 100b660:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( HARDWARE_TIMER, hardware_timer);
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_CLOCK_TIMER, system_clock_timer);
 100b664:	01081004 	movi	r4,8256
 100b668:	000b883a 	mov	r5,zero
 100b66c:	01800104 	movi	r6,4
 100b670:	01c0fa04 	movi	r7,1000
 100b674:	100c4fc0 	call	100c4fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
 100b678:	00c04074 	movhi	r3,257
 100b67c:	18c8c504 	addi	r3,r3,8980
 100b680:	00881804 	movi	r2,8288
 100b684:	18800015 	stw	r2,0(r3)
 100b688:	00c04074 	movhi	r3,257
 100b68c:	18c8c604 	addi	r3,r3,8984
 100b690:	0080bef4 	movhi	r2,763
 100b694:	10bc2004 	addi	r2,r2,-3968
 100b698:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100b69c:	01004074 	movhi	r4,257
 100b6a0:	213d8a04 	addi	r4,r4,-2520
 100b6a4:	000b883a 	mov	r5,zero
 100b6a8:	01800184 	movi	r6,6
 100b6ac:	100bb280 	call	100bb28 <altera_avalon_jtag_uart_init>
 100b6b0:	01004074 	movhi	r4,257
 100b6b4:	213d8004 	addi	r4,r4,-2560
 100b6b8:	100b9a80 	call	100b9a8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100b6bc:	01004074 	movhi	r4,257
 100b6c0:	21019804 	addi	r4,r4,1632
 100b6c4:	100c7a40 	call	100c7a4 <alt_up_character_lcd_init>
 100b6c8:	01004074 	movhi	r4,257
 100b6cc:	21019804 	addi	r4,r4,1632
 100b6d0:	100b9a80 	call	100b9a8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHARACTER_BUFFER, character_buffer);
 100b6d4:	00804074 	movhi	r2,257
 100b6d8:	1081a304 	addi	r2,r2,1676
 100b6dc:	10800a17 	ldw	r2,40(r2)
 100b6e0:	10800104 	addi	r2,r2,4
 100b6e4:	10800017 	ldw	r2,0(r2)
 100b6e8:	10ffffcc 	andi	r3,r2,65535
 100b6ec:	00804074 	movhi	r2,257
 100b6f0:	1081a304 	addi	r2,r2,1676
 100b6f4:	10c00c15 	stw	r3,48(r2)
 100b6f8:	00804074 	movhi	r2,257
 100b6fc:	1081a304 	addi	r2,r2,1676
 100b700:	10800a17 	ldw	r2,40(r2)
 100b704:	10800104 	addi	r2,r2,4
 100b708:	10800017 	ldw	r2,0(r2)
 100b70c:	1005d43a 	srai	r2,r2,16
 100b710:	10ffffcc 	andi	r3,r2,65535
 100b714:	00804074 	movhi	r2,257
 100b718:	1081a304 	addi	r2,r2,1676
 100b71c:	10c00d15 	stw	r3,52(r2)
 100b720:	00804074 	movhi	r2,257
 100b724:	1081a304 	addi	r2,r2,1676
 100b728:	10800c17 	ldw	r2,48(r2)
 100b72c:	10801068 	cmpgeui	r2,r2,65
 100b730:	1000081e 	bne	r2,zero,100b754 <alt_sys_init+0x100>
 100b734:	00c04074 	movhi	r3,257
 100b738:	18c1a304 	addi	r3,r3,1676
 100b73c:	00800fc4 	movi	r2,63
 100b740:	18800f15 	stw	r2,60(r3)
 100b744:	00c04074 	movhi	r3,257
 100b748:	18c1a304 	addi	r3,r3,1676
 100b74c:	00800184 	movi	r2,6
 100b750:	18801015 	stw	r2,64(r3)
 100b754:	00804074 	movhi	r2,257
 100b758:	1081a304 	addi	r2,r2,1676
 100b75c:	10800d17 	ldw	r2,52(r2)
 100b760:	10800868 	cmpgeui	r2,r2,33
 100b764:	1000041e 	bne	r2,zero,100b778 <alt_sys_init+0x124>
 100b768:	00c04074 	movhi	r3,257
 100b76c:	18c1a304 	addi	r3,r3,1676
 100b770:	008007c4 	movi	r2,31
 100b774:	18801115 	stw	r2,68(r3)
 100b778:	01004074 	movhi	r4,257
 100b77c:	2101a304 	addi	r4,r4,1676
 100b780:	100cc240 	call	100cc24 <alt_up_char_buffer_init>
 100b784:	01004074 	movhi	r4,257
 100b788:	2101a304 	addi	r4,r4,1676
 100b78c:	100b9a80 	call	100b9a8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( BUFFER_DMA, buffer_dma);
 100b790:	00804074 	movhi	r2,257
 100b794:	1081b504 	addi	r2,r2,1748
 100b798:	10800a17 	ldw	r2,40(r2)
 100b79c:	10800017 	ldw	r2,0(r2)
 100b7a0:	1007883a 	mov	r3,r2
 100b7a4:	00804074 	movhi	r2,257
 100b7a8:	1081b504 	addi	r2,r2,1748
 100b7ac:	10c00b15 	stw	r3,44(r2)
 100b7b0:	00804074 	movhi	r2,257
 100b7b4:	1081b504 	addi	r2,r2,1748
 100b7b8:	10800a17 	ldw	r2,40(r2)
 100b7bc:	10800104 	addi	r2,r2,4
 100b7c0:	10800017 	ldw	r2,0(r2)
 100b7c4:	1007883a 	mov	r3,r2
 100b7c8:	00804074 	movhi	r2,257
 100b7cc:	1081b504 	addi	r2,r2,1748
 100b7d0:	10c00c15 	stw	r3,48(r2)
 100b7d4:	00804074 	movhi	r2,257
 100b7d8:	1081b504 	addi	r2,r2,1748
 100b7dc:	10800a17 	ldw	r2,40(r2)
 100b7e0:	10800204 	addi	r2,r2,8
 100b7e4:	10800017 	ldw	r2,0(r2)
 100b7e8:	10ffffcc 	andi	r3,r2,65535
 100b7ec:	00804074 	movhi	r2,257
 100b7f0:	1081b504 	addi	r2,r2,1748
 100b7f4:	10c00f15 	stw	r3,60(r2)
 100b7f8:	00804074 	movhi	r2,257
 100b7fc:	1081b504 	addi	r2,r2,1748
 100b800:	10800a17 	ldw	r2,40(r2)
 100b804:	10800204 	addi	r2,r2,8
 100b808:	10800017 	ldw	r2,0(r2)
 100b80c:	1005d43a 	srai	r2,r2,16
 100b810:	10ffffcc 	andi	r3,r2,65535
 100b814:	00804074 	movhi	r2,257
 100b818:	1081b504 	addi	r2,r2,1748
 100b81c:	10c01015 	stw	r3,64(r2)
 100b820:	00804074 	movhi	r2,257
 100b824:	1081b504 	addi	r2,r2,1748
 100b828:	10800a17 	ldw	r2,40(r2)
 100b82c:	10800304 	addi	r2,r2,12
 100b830:	10800017 	ldw	r2,0(r2)
 100b834:	1005d07a 	srai	r2,r2,1
 100b838:	10c0004c 	andi	r3,r2,1
 100b83c:	00804074 	movhi	r2,257
 100b840:	1081b504 	addi	r2,r2,1748
 100b844:	10c00d15 	stw	r3,52(r2)
 100b848:	00804074 	movhi	r2,257
 100b84c:	1081b504 	addi	r2,r2,1748
 100b850:	10800a17 	ldw	r2,40(r2)
 100b854:	10800304 	addi	r2,r2,12
 100b858:	10800017 	ldw	r2,0(r2)
 100b85c:	1005d13a 	srai	r2,r2,4
 100b860:	10c003cc 	andi	r3,r2,15
 100b864:	00804074 	movhi	r2,257
 100b868:	1081b504 	addi	r2,r2,1748
 100b86c:	10c00e15 	stw	r3,56(r2)
 100b870:	00804074 	movhi	r2,257
 100b874:	1081b504 	addi	r2,r2,1748
 100b878:	10800a17 	ldw	r2,40(r2)
 100b87c:	10800304 	addi	r2,r2,12
 100b880:	10800017 	ldw	r2,0(r2)
 100b884:	1005d43a 	srai	r2,r2,16
 100b888:	1007883a 	mov	r3,r2
 100b88c:	00bfffc4 	movi	r2,-1
 100b890:	1884703a 	and	r2,r3,r2
 100b894:	e0bfff45 	stb	r2,-3(fp)
 100b898:	00804074 	movhi	r2,257
 100b89c:	1081b504 	addi	r2,r2,1748
 100b8a0:	10800a17 	ldw	r2,40(r2)
 100b8a4:	10800304 	addi	r2,r2,12
 100b8a8:	10800017 	ldw	r2,0(r2)
 100b8ac:	1005d63a 	srai	r2,r2,24
 100b8b0:	1007883a 	mov	r3,r2
 100b8b4:	00bfffc4 	movi	r2,-1
 100b8b8:	1884703a 	and	r2,r3,r2
 100b8bc:	e0bfff05 	stb	r2,-4(fp)
 100b8c0:	00804074 	movhi	r2,257
 100b8c4:	1081b504 	addi	r2,r2,1748
 100b8c8:	10800e17 	ldw	r2,56(r2)
 100b8cc:	10800058 	cmpnei	r2,r2,1
 100b8d0:	1000041e 	bne	r2,zero,100b8e4 <alt_sys_init+0x290>
 100b8d4:	00804074 	movhi	r2,257
 100b8d8:	1081b504 	addi	r2,r2,1748
 100b8dc:	10001115 	stw	zero,68(r2)
 100b8e0:	00000e06 	br	100b91c <alt_sys_init+0x2c8>
 100b8e4:	00804074 	movhi	r2,257
 100b8e8:	1081b504 	addi	r2,r2,1748
 100b8ec:	10800e17 	ldw	r2,56(r2)
 100b8f0:	10800098 	cmpnei	r2,r2,2
 100b8f4:	1000051e 	bne	r2,zero,100b90c <alt_sys_init+0x2b8>
 100b8f8:	00c04074 	movhi	r3,257
 100b8fc:	18c1b504 	addi	r3,r3,1748
 100b900:	00800044 	movi	r2,1
 100b904:	18801115 	stw	r2,68(r3)
 100b908:	00000406 	br	100b91c <alt_sys_init+0x2c8>
 100b90c:	00c04074 	movhi	r3,257
 100b910:	18c1b504 	addi	r3,r3,1748
 100b914:	00800084 	movi	r2,2
 100b918:	18801115 	stw	r2,68(r3)
 100b91c:	e0ffff43 	ldbu	r3,-3(fp)
 100b920:	00800804 	movi	r2,32
 100b924:	10c7c83a 	sub	r3,r2,r3
 100b928:	00bfffc4 	movi	r2,-1
 100b92c:	10c6d83a 	srl	r3,r2,r3
 100b930:	00804074 	movhi	r2,257
 100b934:	1081b504 	addi	r2,r2,1748
 100b938:	10c01215 	stw	r3,72(r2)
 100b93c:	e0ffff43 	ldbu	r3,-3(fp)
 100b940:	00804074 	movhi	r2,257
 100b944:	1081b504 	addi	r2,r2,1748
 100b948:	10801117 	ldw	r2,68(r2)
 100b94c:	1887883a 	add	r3,r3,r2
 100b950:	00804074 	movhi	r2,257
 100b954:	1081b504 	addi	r2,r2,1748
 100b958:	10c01315 	stw	r3,76(r2)
 100b95c:	e0ffff03 	ldbu	r3,-4(fp)
 100b960:	00800804 	movi	r2,32
 100b964:	10c7c83a 	sub	r3,r2,r3
 100b968:	00bfffc4 	movi	r2,-1
 100b96c:	10c6d83a 	srl	r3,r2,r3
 100b970:	00804074 	movhi	r2,257
 100b974:	1081b504 	addi	r2,r2,1748
 100b978:	10c01415 	stw	r3,80(r2)
 100b97c:	01004074 	movhi	r4,257
 100b980:	2101b504 	addi	r4,r4,1748
 100b984:	100b9a80 	call	100b9a8 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SDCARD_INTERFACE, sdcard_interface);
 100b988:	01004074 	movhi	r4,257
 100b98c:	2101ca04 	addi	r4,r4,1832
 100b990:	100b9a80 	call	100b9a8 <alt_dev_reg>
}
 100b994:	e037883a 	mov	sp,fp
 100b998:	dfc00117 	ldw	ra,4(sp)
 100b99c:	df000017 	ldw	fp,0(sp)
 100b9a0:	dec00204 	addi	sp,sp,8
 100b9a4:	f800283a 	ret

0100b9a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100b9a8:	defffd04 	addi	sp,sp,-12
 100b9ac:	dfc00215 	stw	ra,8(sp)
 100b9b0:	df000115 	stw	fp,4(sp)
 100b9b4:	df000104 	addi	fp,sp,4
 100b9b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100b9bc:	e13fff17 	ldw	r4,-4(fp)
 100b9c0:	01404074 	movhi	r5,257
 100b9c4:	2941dd04 	addi	r5,r5,1908
 100b9c8:	100d20c0 	call	100d20c <alt_dev_llist_insert>
}
 100b9cc:	e037883a 	mov	sp,fp
 100b9d0:	dfc00117 	ldw	ra,4(sp)
 100b9d4:	df000017 	ldw	fp,0(sp)
 100b9d8:	dec00204 	addi	sp,sp,8
 100b9dc:	f800283a 	ret

0100b9e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100b9e0:	defffa04 	addi	sp,sp,-24
 100b9e4:	dfc00515 	stw	ra,20(sp)
 100b9e8:	df000415 	stw	fp,16(sp)
 100b9ec:	df000404 	addi	fp,sp,16
 100b9f0:	e13ffd15 	stw	r4,-12(fp)
 100b9f4:	e17ffe15 	stw	r5,-8(fp)
 100b9f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100b9fc:	e0bffd17 	ldw	r2,-12(fp)
 100ba00:	10800017 	ldw	r2,0(r2)
 100ba04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100ba08:	e0bffc17 	ldw	r2,-16(fp)
 100ba0c:	11000a04 	addi	r4,r2,40
 100ba10:	e0bffd17 	ldw	r2,-12(fp)
 100ba14:	11c00217 	ldw	r7,8(r2)
 100ba18:	e17ffe17 	ldw	r5,-8(fp)
 100ba1c:	e1bfff17 	ldw	r6,-4(fp)
 100ba20:	100c0280 	call	100c028 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100ba24:	e037883a 	mov	sp,fp
 100ba28:	dfc00117 	ldw	ra,4(sp)
 100ba2c:	df000017 	ldw	fp,0(sp)
 100ba30:	dec00204 	addi	sp,sp,8
 100ba34:	f800283a 	ret

0100ba38 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100ba38:	defffa04 	addi	sp,sp,-24
 100ba3c:	dfc00515 	stw	ra,20(sp)
 100ba40:	df000415 	stw	fp,16(sp)
 100ba44:	df000404 	addi	fp,sp,16
 100ba48:	e13ffd15 	stw	r4,-12(fp)
 100ba4c:	e17ffe15 	stw	r5,-8(fp)
 100ba50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100ba54:	e0bffd17 	ldw	r2,-12(fp)
 100ba58:	10800017 	ldw	r2,0(r2)
 100ba5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100ba60:	e0bffc17 	ldw	r2,-16(fp)
 100ba64:	11000a04 	addi	r4,r2,40
 100ba68:	e0bffd17 	ldw	r2,-12(fp)
 100ba6c:	11c00217 	ldw	r7,8(r2)
 100ba70:	e17ffe17 	ldw	r5,-8(fp)
 100ba74:	e1bfff17 	ldw	r6,-4(fp)
 100ba78:	100c24c0 	call	100c24c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100ba7c:	e037883a 	mov	sp,fp
 100ba80:	dfc00117 	ldw	ra,4(sp)
 100ba84:	df000017 	ldw	fp,0(sp)
 100ba88:	dec00204 	addi	sp,sp,8
 100ba8c:	f800283a 	ret

0100ba90 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100ba90:	defffc04 	addi	sp,sp,-16
 100ba94:	dfc00315 	stw	ra,12(sp)
 100ba98:	df000215 	stw	fp,8(sp)
 100ba9c:	df000204 	addi	fp,sp,8
 100baa0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100baa4:	e0bfff17 	ldw	r2,-4(fp)
 100baa8:	10800017 	ldw	r2,0(r2)
 100baac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100bab0:	e0bffe17 	ldw	r2,-8(fp)
 100bab4:	11000a04 	addi	r4,r2,40
 100bab8:	e0bfff17 	ldw	r2,-4(fp)
 100babc:	11400217 	ldw	r5,8(r2)
 100bac0:	100bec00 	call	100bec0 <altera_avalon_jtag_uart_close>
}
 100bac4:	e037883a 	mov	sp,fp
 100bac8:	dfc00117 	ldw	ra,4(sp)
 100bacc:	df000017 	ldw	fp,0(sp)
 100bad0:	dec00204 	addi	sp,sp,8
 100bad4:	f800283a 	ret

0100bad8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100bad8:	defffa04 	addi	sp,sp,-24
 100badc:	dfc00515 	stw	ra,20(sp)
 100bae0:	df000415 	stw	fp,16(sp)
 100bae4:	df000404 	addi	fp,sp,16
 100bae8:	e13ffd15 	stw	r4,-12(fp)
 100baec:	e17ffe15 	stw	r5,-8(fp)
 100baf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100baf4:	e0bffd17 	ldw	r2,-12(fp)
 100baf8:	10800017 	ldw	r2,0(r2)
 100bafc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100bb00:	e0bffc17 	ldw	r2,-16(fp)
 100bb04:	11000a04 	addi	r4,r2,40
 100bb08:	e17ffe17 	ldw	r5,-8(fp)
 100bb0c:	e1bfff17 	ldw	r6,-4(fp)
 100bb10:	100bf340 	call	100bf34 <altera_avalon_jtag_uart_ioctl>
}
 100bb14:	e037883a 	mov	sp,fp
 100bb18:	dfc00117 	ldw	ra,4(sp)
 100bb1c:	df000017 	ldw	fp,0(sp)
 100bb20:	dec00204 	addi	sp,sp,8
 100bb24:	f800283a 	ret

0100bb28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100bb28:	defffa04 	addi	sp,sp,-24
 100bb2c:	dfc00515 	stw	ra,20(sp)
 100bb30:	df000415 	stw	fp,16(sp)
 100bb34:	df000404 	addi	fp,sp,16
 100bb38:	e13ffd15 	stw	r4,-12(fp)
 100bb3c:	e17ffe15 	stw	r5,-8(fp)
 100bb40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100bb44:	e0fffd17 	ldw	r3,-12(fp)
 100bb48:	00800044 	movi	r2,1
 100bb4c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100bb50:	e0bffd17 	ldw	r2,-12(fp)
 100bb54:	10800017 	ldw	r2,0(r2)
 100bb58:	11000104 	addi	r4,r2,4
 100bb5c:	e0bffd17 	ldw	r2,-12(fp)
 100bb60:	10800817 	ldw	r2,32(r2)
 100bb64:	1007883a 	mov	r3,r2
 100bb68:	2005883a 	mov	r2,r4
 100bb6c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100bb70:	e13ffe17 	ldw	r4,-8(fp)
 100bb74:	e17fff17 	ldw	r5,-4(fp)
 100bb78:	d8000015 	stw	zero,0(sp)
 100bb7c:	01804074 	movhi	r6,257
 100bb80:	31aefa04 	addi	r6,r6,-17432
 100bb84:	e1fffd17 	ldw	r7,-12(fp)
 100bb88:	100d4ac0 	call	100d4ac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100bb8c:	e0bffd17 	ldw	r2,-12(fp)
 100bb90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100bb94:	e0bffd17 	ldw	r2,-12(fp)
 100bb98:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100bb9c:	00804074 	movhi	r2,257
 100bba0:	1088c304 	addi	r2,r2,8972
 100bba4:	10800017 	ldw	r2,0(r2)
 100bba8:	100b883a 	mov	r5,r2
 100bbac:	01804074 	movhi	r6,257
 100bbb0:	31af8404 	addi	r6,r6,-16880
 100bbb4:	e1fffd17 	ldw	r7,-12(fp)
 100bbb8:	100cf280 	call	100cf28 <alt_alarm_start>
 100bbbc:	1004403a 	cmpge	r2,r2,zero
 100bbc0:	1000041e 	bne	r2,zero,100bbd4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100bbc4:	e0fffd17 	ldw	r3,-12(fp)
 100bbc8:	00a00034 	movhi	r2,32768
 100bbcc:	10bfffc4 	addi	r2,r2,-1
 100bbd0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100bbd4:	e037883a 	mov	sp,fp
 100bbd8:	dfc00117 	ldw	ra,4(sp)
 100bbdc:	df000017 	ldw	fp,0(sp)
 100bbe0:	dec00204 	addi	sp,sp,8
 100bbe4:	f800283a 	ret

0100bbe8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100bbe8:	defff804 	addi	sp,sp,-32
 100bbec:	df000715 	stw	fp,28(sp)
 100bbf0:	df000704 	addi	fp,sp,28
 100bbf4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100bbf8:	e0bfff17 	ldw	r2,-4(fp)
 100bbfc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 100bc00:	e0bffe17 	ldw	r2,-8(fp)
 100bc04:	10800017 	ldw	r2,0(r2)
 100bc08:	e0bffd15 	stw	r2,-12(fp)
 100bc0c:	00000006 	br	100bc10 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100bc10:	e0bffd17 	ldw	r2,-12(fp)
 100bc14:	10800104 	addi	r2,r2,4
 100bc18:	10800037 	ldwio	r2,0(r2)
 100bc1c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100bc20:	e0bffc17 	ldw	r2,-16(fp)
 100bc24:	1080c00c 	andi	r2,r2,768
 100bc28:	1005003a 	cmpeq	r2,r2,zero
 100bc2c:	1000741e 	bne	r2,zero,100be00 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100bc30:	e0bffc17 	ldw	r2,-16(fp)
 100bc34:	1080400c 	andi	r2,r2,256
 100bc38:	1005003a 	cmpeq	r2,r2,zero
 100bc3c:	1000351e 	bne	r2,zero,100bd14 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100bc40:	00800074 	movhi	r2,1
 100bc44:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100bc48:	e0bffe17 	ldw	r2,-8(fp)
 100bc4c:	10800a17 	ldw	r2,40(r2)
 100bc50:	10800044 	addi	r2,r2,1
 100bc54:	1081ffcc 	andi	r2,r2,2047
 100bc58:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 100bc5c:	e0bffe17 	ldw	r2,-8(fp)
 100bc60:	10c00b17 	ldw	r3,44(r2)
 100bc64:	e0bffa17 	ldw	r2,-24(fp)
 100bc68:	18801626 	beq	r3,r2,100bcc4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100bc6c:	e0bffd17 	ldw	r2,-12(fp)
 100bc70:	10800037 	ldwio	r2,0(r2)
 100bc74:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100bc78:	e0bffb17 	ldw	r2,-20(fp)
 100bc7c:	10a0000c 	andi	r2,r2,32768
 100bc80:	1005003a 	cmpeq	r2,r2,zero
 100bc84:	10000f1e 	bne	r2,zero,100bcc4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100bc88:	e0bffe17 	ldw	r2,-8(fp)
 100bc8c:	10c00a17 	ldw	r3,40(r2)
 100bc90:	e0bffb17 	ldw	r2,-20(fp)
 100bc94:	1009883a 	mov	r4,r2
 100bc98:	e0bffe17 	ldw	r2,-8(fp)
 100bc9c:	1885883a 	add	r2,r3,r2
 100bca0:	10800e04 	addi	r2,r2,56
 100bca4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100bca8:	e0bffe17 	ldw	r2,-8(fp)
 100bcac:	10800a17 	ldw	r2,40(r2)
 100bcb0:	10800044 	addi	r2,r2,1
 100bcb4:	10c1ffcc 	andi	r3,r2,2047
 100bcb8:	e0bffe17 	ldw	r2,-8(fp)
 100bcbc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100bcc0:	003fe106 	br	100bc48 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100bcc4:	e0bffb17 	ldw	r2,-20(fp)
 100bcc8:	10bfffec 	andhi	r2,r2,65535
 100bccc:	1005003a 	cmpeq	r2,r2,zero
 100bcd0:	1000101e 	bne	r2,zero,100bd14 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100bcd4:	e0bffe17 	ldw	r2,-8(fp)
 100bcd8:	10c00817 	ldw	r3,32(r2)
 100bcdc:	00bfff84 	movi	r2,-2
 100bce0:	1886703a 	and	r3,r3,r2
 100bce4:	e0bffe17 	ldw	r2,-8(fp)
 100bce8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100bcec:	e0bffd17 	ldw	r2,-12(fp)
 100bcf0:	11000104 	addi	r4,r2,4
 100bcf4:	e0bffe17 	ldw	r2,-8(fp)
 100bcf8:	10800817 	ldw	r2,32(r2)
 100bcfc:	1007883a 	mov	r3,r2
 100bd00:	2005883a 	mov	r2,r4
 100bd04:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100bd08:	e0bffd17 	ldw	r2,-12(fp)
 100bd0c:	10800104 	addi	r2,r2,4
 100bd10:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100bd14:	e0bffc17 	ldw	r2,-16(fp)
 100bd18:	1080800c 	andi	r2,r2,512
 100bd1c:	1005003a 	cmpeq	r2,r2,zero
 100bd20:	103fbb1e 	bne	r2,zero,100bc10 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100bd24:	e0bffc17 	ldw	r2,-16(fp)
 100bd28:	10bfffec 	andhi	r2,r2,65535
 100bd2c:	1004d43a 	srli	r2,r2,16
 100bd30:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100bd34:	00001506 	br	100bd8c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100bd38:	e13ffd17 	ldw	r4,-12(fp)
 100bd3c:	e0bffe17 	ldw	r2,-8(fp)
 100bd40:	10c00d17 	ldw	r3,52(r2)
 100bd44:	e0bffe17 	ldw	r2,-8(fp)
 100bd48:	1885883a 	add	r2,r3,r2
 100bd4c:	10820e04 	addi	r2,r2,2104
 100bd50:	10800003 	ldbu	r2,0(r2)
 100bd54:	10c03fcc 	andi	r3,r2,255
 100bd58:	18c0201c 	xori	r3,r3,128
 100bd5c:	18ffe004 	addi	r3,r3,-128
 100bd60:	2005883a 	mov	r2,r4
 100bd64:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100bd68:	e0bffe17 	ldw	r2,-8(fp)
 100bd6c:	10800d17 	ldw	r2,52(r2)
 100bd70:	10800044 	addi	r2,r2,1
 100bd74:	10c1ffcc 	andi	r3,r2,2047
 100bd78:	e0bffe17 	ldw	r2,-8(fp)
 100bd7c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100bd80:	e0bff917 	ldw	r2,-28(fp)
 100bd84:	10bfffc4 	addi	r2,r2,-1
 100bd88:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100bd8c:	e0bff917 	ldw	r2,-28(fp)
 100bd90:	1005003a 	cmpeq	r2,r2,zero
 100bd94:	1000051e 	bne	r2,zero,100bdac <altera_avalon_jtag_uart_irq+0x1c4>
 100bd98:	e0bffe17 	ldw	r2,-8(fp)
 100bd9c:	10c00d17 	ldw	r3,52(r2)
 100bda0:	e0bffe17 	ldw	r2,-8(fp)
 100bda4:	10800c17 	ldw	r2,48(r2)
 100bda8:	18bfe31e 	bne	r3,r2,100bd38 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100bdac:	e0bff917 	ldw	r2,-28(fp)
 100bdb0:	1005003a 	cmpeq	r2,r2,zero
 100bdb4:	103f961e 	bne	r2,zero,100bc10 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100bdb8:	e0bffe17 	ldw	r2,-8(fp)
 100bdbc:	10c00817 	ldw	r3,32(r2)
 100bdc0:	00bfff44 	movi	r2,-3
 100bdc4:	1886703a 	and	r3,r3,r2
 100bdc8:	e0bffe17 	ldw	r2,-8(fp)
 100bdcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100bdd0:	e0bffe17 	ldw	r2,-8(fp)
 100bdd4:	10800017 	ldw	r2,0(r2)
 100bdd8:	11000104 	addi	r4,r2,4
 100bddc:	e0bffe17 	ldw	r2,-8(fp)
 100bde0:	10800817 	ldw	r2,32(r2)
 100bde4:	1007883a 	mov	r3,r2
 100bde8:	2005883a 	mov	r2,r4
 100bdec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100bdf0:	e0bffd17 	ldw	r2,-12(fp)
 100bdf4:	10800104 	addi	r2,r2,4
 100bdf8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100bdfc:	003f8406 	br	100bc10 <altera_avalon_jtag_uart_irq+0x28>
}
 100be00:	e037883a 	mov	sp,fp
 100be04:	df000017 	ldw	fp,0(sp)
 100be08:	dec00104 	addi	sp,sp,4
 100be0c:	f800283a 	ret

0100be10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100be10:	defffc04 	addi	sp,sp,-16
 100be14:	df000315 	stw	fp,12(sp)
 100be18:	df000304 	addi	fp,sp,12
 100be1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100be20:	e0bfff17 	ldw	r2,-4(fp)
 100be24:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100be28:	e0bffe17 	ldw	r2,-8(fp)
 100be2c:	10800017 	ldw	r2,0(r2)
 100be30:	10800104 	addi	r2,r2,4
 100be34:	10800037 	ldwio	r2,0(r2)
 100be38:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100be3c:	e0bffd17 	ldw	r2,-12(fp)
 100be40:	1081000c 	andi	r2,r2,1024
 100be44:	1005003a 	cmpeq	r2,r2,zero
 100be48:	10000c1e 	bne	r2,zero,100be7c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100be4c:	e0bffe17 	ldw	r2,-8(fp)
 100be50:	10800017 	ldw	r2,0(r2)
 100be54:	11000104 	addi	r4,r2,4
 100be58:	e0bffe17 	ldw	r2,-8(fp)
 100be5c:	10800817 	ldw	r2,32(r2)
 100be60:	10810014 	ori	r2,r2,1024
 100be64:	1007883a 	mov	r3,r2
 100be68:	2005883a 	mov	r2,r4
 100be6c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100be70:	e0bffe17 	ldw	r2,-8(fp)
 100be74:	10000915 	stw	zero,36(r2)
 100be78:	00000a06 	br	100bea4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100be7c:	e0bffe17 	ldw	r2,-8(fp)
 100be80:	10c00917 	ldw	r3,36(r2)
 100be84:	00a00034 	movhi	r2,32768
 100be88:	10bfff04 	addi	r2,r2,-4
 100be8c:	10c00536 	bltu	r2,r3,100bea4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100be90:	e0bffe17 	ldw	r2,-8(fp)
 100be94:	10800917 	ldw	r2,36(r2)
 100be98:	10c00044 	addi	r3,r2,1
 100be9c:	e0bffe17 	ldw	r2,-8(fp)
 100bea0:	10c00915 	stw	r3,36(r2)
 100bea4:	00804074 	movhi	r2,257
 100bea8:	1088c304 	addi	r2,r2,8972
 100beac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100beb0:	e037883a 	mov	sp,fp
 100beb4:	df000017 	ldw	fp,0(sp)
 100beb8:	dec00104 	addi	sp,sp,4
 100bebc:	f800283a 	ret

0100bec0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100bec0:	defffc04 	addi	sp,sp,-16
 100bec4:	df000315 	stw	fp,12(sp)
 100bec8:	df000304 	addi	fp,sp,12
 100becc:	e13ffd15 	stw	r4,-12(fp)
 100bed0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100bed4:	00000706 	br	100bef4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100bed8:	e0bffe17 	ldw	r2,-8(fp)
 100bedc:	1090000c 	andi	r2,r2,16384
 100bee0:	1005003a 	cmpeq	r2,r2,zero
 100bee4:	1000031e 	bne	r2,zero,100bef4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100bee8:	00bffd44 	movi	r2,-11
 100beec:	e0bfff15 	stw	r2,-4(fp)
 100bef0:	00000b06 	br	100bf20 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100bef4:	e0bffd17 	ldw	r2,-12(fp)
 100bef8:	10c00d17 	ldw	r3,52(r2)
 100befc:	e0bffd17 	ldw	r2,-12(fp)
 100bf00:	10800c17 	ldw	r2,48(r2)
 100bf04:	18800526 	beq	r3,r2,100bf1c <altera_avalon_jtag_uart_close+0x5c>
 100bf08:	e0bffd17 	ldw	r2,-12(fp)
 100bf0c:	10c00917 	ldw	r3,36(r2)
 100bf10:	e0bffd17 	ldw	r2,-12(fp)
 100bf14:	10800117 	ldw	r2,4(r2)
 100bf18:	18bfef36 	bltu	r3,r2,100bed8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100bf1c:	e03fff15 	stw	zero,-4(fp)
 100bf20:	e0bfff17 	ldw	r2,-4(fp)
}
 100bf24:	e037883a 	mov	sp,fp
 100bf28:	df000017 	ldw	fp,0(sp)
 100bf2c:	dec00104 	addi	sp,sp,4
 100bf30:	f800283a 	ret

0100bf34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100bf34:	defff804 	addi	sp,sp,-32
 100bf38:	df000715 	stw	fp,28(sp)
 100bf3c:	df000704 	addi	fp,sp,28
 100bf40:	e13ffb15 	stw	r4,-20(fp)
 100bf44:	e17ffc15 	stw	r5,-16(fp)
 100bf48:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100bf4c:	00bff9c4 	movi	r2,-25
 100bf50:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100bf54:	e0bffc17 	ldw	r2,-16(fp)
 100bf58:	e0bfff15 	stw	r2,-4(fp)
 100bf5c:	e0ffff17 	ldw	r3,-4(fp)
 100bf60:	189a8060 	cmpeqi	r2,r3,27137
 100bf64:	1000041e 	bne	r2,zero,100bf78 <altera_avalon_jtag_uart_ioctl+0x44>
 100bf68:	e0ffff17 	ldw	r3,-4(fp)
 100bf6c:	189a80a0 	cmpeqi	r2,r3,27138
 100bf70:	10001b1e 	bne	r2,zero,100bfe0 <altera_avalon_jtag_uart_ioctl+0xac>
 100bf74:	00002706 	br	100c014 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100bf78:	e0bffb17 	ldw	r2,-20(fp)
 100bf7c:	10c00117 	ldw	r3,4(r2)
 100bf80:	00a00034 	movhi	r2,32768
 100bf84:	10bfffc4 	addi	r2,r2,-1
 100bf88:	18802226 	beq	r3,r2,100c014 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100bf8c:	e0bffd17 	ldw	r2,-12(fp)
 100bf90:	10800017 	ldw	r2,0(r2)
 100bf94:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100bf98:	e0bff917 	ldw	r2,-28(fp)
 100bf9c:	10800090 	cmplti	r2,r2,2
 100bfa0:	1000071e 	bne	r2,zero,100bfc0 <altera_avalon_jtag_uart_ioctl+0x8c>
 100bfa4:	e0fff917 	ldw	r3,-28(fp)
 100bfa8:	00a00034 	movhi	r2,32768
 100bfac:	10bfffc4 	addi	r2,r2,-1
 100bfb0:	18800326 	beq	r3,r2,100bfc0 <altera_avalon_jtag_uart_ioctl+0x8c>
 100bfb4:	e0bff917 	ldw	r2,-28(fp)
 100bfb8:	e0bffe15 	stw	r2,-8(fp)
 100bfbc:	00000306 	br	100bfcc <altera_avalon_jtag_uart_ioctl+0x98>
 100bfc0:	00e00034 	movhi	r3,32768
 100bfc4:	18ffff84 	addi	r3,r3,-2
 100bfc8:	e0fffe15 	stw	r3,-8(fp)
 100bfcc:	e0bffb17 	ldw	r2,-20(fp)
 100bfd0:	e0fffe17 	ldw	r3,-8(fp)
 100bfd4:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100bfd8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100bfdc:	00000d06 	br	100c014 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100bfe0:	e0bffb17 	ldw	r2,-20(fp)
 100bfe4:	10c00117 	ldw	r3,4(r2)
 100bfe8:	00a00034 	movhi	r2,32768
 100bfec:	10bfffc4 	addi	r2,r2,-1
 100bff0:	18800826 	beq	r3,r2,100c014 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100bff4:	e13ffd17 	ldw	r4,-12(fp)
 100bff8:	e0bffb17 	ldw	r2,-20(fp)
 100bffc:	10c00917 	ldw	r3,36(r2)
 100c000:	e0bffb17 	ldw	r2,-20(fp)
 100c004:	10800117 	ldw	r2,4(r2)
 100c008:	1885803a 	cmpltu	r2,r3,r2
 100c00c:	20800015 	stw	r2,0(r4)
      rc = 0;
 100c010:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100c014:	e0bffa17 	ldw	r2,-24(fp)
}
 100c018:	e037883a 	mov	sp,fp
 100c01c:	df000017 	ldw	fp,0(sp)
 100c020:	dec00104 	addi	sp,sp,4
 100c024:	f800283a 	ret

0100c028 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100c028:	defff204 	addi	sp,sp,-56
 100c02c:	dfc00d15 	stw	ra,52(sp)
 100c030:	df000c15 	stw	fp,48(sp)
 100c034:	df000c04 	addi	fp,sp,48
 100c038:	e13ffb15 	stw	r4,-20(fp)
 100c03c:	e17ffc15 	stw	r5,-16(fp)
 100c040:	e1bffd15 	stw	r6,-12(fp)
 100c044:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100c048:	e0bffc17 	ldw	r2,-16(fp)
 100c04c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100c050:	00004806 	br	100c174 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100c054:	e0bffb17 	ldw	r2,-20(fp)
 100c058:	10800a17 	ldw	r2,40(r2)
 100c05c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100c060:	e0bffb17 	ldw	r2,-20(fp)
 100c064:	10800b17 	ldw	r2,44(r2)
 100c068:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100c06c:	e0fff717 	ldw	r3,-36(fp)
 100c070:	e0bff617 	ldw	r2,-40(fp)
 100c074:	18800536 	bltu	r3,r2,100c08c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100c078:	e0bff717 	ldw	r2,-36(fp)
 100c07c:	e0fff617 	ldw	r3,-40(fp)
 100c080:	10c5c83a 	sub	r2,r2,r3
 100c084:	e0bff815 	stw	r2,-32(fp)
 100c088:	00000406 	br	100c09c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100c08c:	00820004 	movi	r2,2048
 100c090:	e0fff617 	ldw	r3,-40(fp)
 100c094:	10c5c83a 	sub	r2,r2,r3
 100c098:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100c09c:	e0bff817 	ldw	r2,-32(fp)
 100c0a0:	1005003a 	cmpeq	r2,r2,zero
 100c0a4:	10001f1e 	bne	r2,zero,100c124 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100c0a8:	e0fffd17 	ldw	r3,-12(fp)
 100c0ac:	e0bff817 	ldw	r2,-32(fp)
 100c0b0:	1880022e 	bgeu	r3,r2,100c0bc <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100c0b4:	e0bffd17 	ldw	r2,-12(fp)
 100c0b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100c0bc:	e0bffb17 	ldw	r2,-20(fp)
 100c0c0:	10c00e04 	addi	r3,r2,56
 100c0c4:	e0bff617 	ldw	r2,-40(fp)
 100c0c8:	1887883a 	add	r3,r3,r2
 100c0cc:	e0bffa17 	ldw	r2,-24(fp)
 100c0d0:	1009883a 	mov	r4,r2
 100c0d4:	180b883a 	mov	r5,r3
 100c0d8:	e1bff817 	ldw	r6,-32(fp)
 100c0dc:	10066bc0 	call	10066bc <memcpy>
      ptr   += n;
 100c0e0:	e0fff817 	ldw	r3,-32(fp)
 100c0e4:	e0bffa17 	ldw	r2,-24(fp)
 100c0e8:	10c5883a 	add	r2,r2,r3
 100c0ec:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100c0f0:	e0fffd17 	ldw	r3,-12(fp)
 100c0f4:	e0bff817 	ldw	r2,-32(fp)
 100c0f8:	1885c83a 	sub	r2,r3,r2
 100c0fc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100c100:	e0fff617 	ldw	r3,-40(fp)
 100c104:	e0bff817 	ldw	r2,-32(fp)
 100c108:	1885883a 	add	r2,r3,r2
 100c10c:	10c1ffcc 	andi	r3,r2,2047
 100c110:	e0bffb17 	ldw	r2,-20(fp)
 100c114:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100c118:	e0bffd17 	ldw	r2,-12(fp)
 100c11c:	10800048 	cmpgei	r2,r2,1
 100c120:	103fcc1e 	bne	r2,zero,100c054 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100c124:	e0fffa17 	ldw	r3,-24(fp)
 100c128:	e0bffc17 	ldw	r2,-16(fp)
 100c12c:	1880141e 	bne	r3,r2,100c180 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100c130:	e0bffe17 	ldw	r2,-8(fp)
 100c134:	1090000c 	andi	r2,r2,16384
 100c138:	1004c03a 	cmpne	r2,r2,zero
 100c13c:	1000101e 	bne	r2,zero,100c180 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100c140:	e0bffb17 	ldw	r2,-20(fp)
 100c144:	10c00a17 	ldw	r3,40(r2)
 100c148:	e0bff717 	ldw	r2,-36(fp)
 100c14c:	1880051e 	bne	r3,r2,100c164 <altera_avalon_jtag_uart_read+0x13c>
 100c150:	e0bffb17 	ldw	r2,-20(fp)
 100c154:	10c00917 	ldw	r3,36(r2)
 100c158:	e0bffb17 	ldw	r2,-20(fp)
 100c15c:	10800117 	ldw	r2,4(r2)
 100c160:	18bff736 	bltu	r3,r2,100c140 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100c164:	e0bffb17 	ldw	r2,-20(fp)
 100c168:	10c00a17 	ldw	r3,40(r2)
 100c16c:	e0bff717 	ldw	r2,-36(fp)
 100c170:	18800326 	beq	r3,r2,100c180 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100c174:	e0bffd17 	ldw	r2,-12(fp)
 100c178:	10800048 	cmpgei	r2,r2,1
 100c17c:	103fb51e 	bne	r2,zero,100c054 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100c180:	e0fffa17 	ldw	r3,-24(fp)
 100c184:	e0bffc17 	ldw	r2,-16(fp)
 100c188:	18801926 	beq	r3,r2,100c1f0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c18c:	0005303a 	rdctl	r2,status
 100c190:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c194:	e0fff517 	ldw	r3,-44(fp)
 100c198:	00bfff84 	movi	r2,-2
 100c19c:	1884703a 	and	r2,r3,r2
 100c1a0:	1001703a 	wrctl	status,r2
  
  return context;
 100c1a4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100c1a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100c1ac:	e0bffb17 	ldw	r2,-20(fp)
 100c1b0:	10800817 	ldw	r2,32(r2)
 100c1b4:	10c00054 	ori	r3,r2,1
 100c1b8:	e0bffb17 	ldw	r2,-20(fp)
 100c1bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100c1c0:	e0bffb17 	ldw	r2,-20(fp)
 100c1c4:	10800017 	ldw	r2,0(r2)
 100c1c8:	11000104 	addi	r4,r2,4
 100c1cc:	e0bffb17 	ldw	r2,-20(fp)
 100c1d0:	10800817 	ldw	r2,32(r2)
 100c1d4:	1007883a 	mov	r3,r2
 100c1d8:	2005883a 	mov	r2,r4
 100c1dc:	10c00035 	stwio	r3,0(r2)
 100c1e0:	e0bff917 	ldw	r2,-28(fp)
 100c1e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c1e8:	e0bff417 	ldw	r2,-48(fp)
 100c1ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100c1f0:	e0fffa17 	ldw	r3,-24(fp)
 100c1f4:	e0bffc17 	ldw	r2,-16(fp)
 100c1f8:	18800526 	beq	r3,r2,100c210 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100c1fc:	e0fffa17 	ldw	r3,-24(fp)
 100c200:	e0bffc17 	ldw	r2,-16(fp)
 100c204:	1887c83a 	sub	r3,r3,r2
 100c208:	e0ffff15 	stw	r3,-4(fp)
 100c20c:	00000906 	br	100c234 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100c210:	e0bffe17 	ldw	r2,-8(fp)
 100c214:	1090000c 	andi	r2,r2,16384
 100c218:	1005003a 	cmpeq	r2,r2,zero
 100c21c:	1000031e 	bne	r2,zero,100c22c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100c220:	00bffd44 	movi	r2,-11
 100c224:	e0bfff15 	stw	r2,-4(fp)
 100c228:	00000206 	br	100c234 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100c22c:	00bffec4 	movi	r2,-5
 100c230:	e0bfff15 	stw	r2,-4(fp)
 100c234:	e0bfff17 	ldw	r2,-4(fp)
}
 100c238:	e037883a 	mov	sp,fp
 100c23c:	dfc00117 	ldw	ra,4(sp)
 100c240:	df000017 	ldw	fp,0(sp)
 100c244:	dec00204 	addi	sp,sp,8
 100c248:	f800283a 	ret

0100c24c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100c24c:	defff204 	addi	sp,sp,-56
 100c250:	dfc00d15 	stw	ra,52(sp)
 100c254:	df000c15 	stw	fp,48(sp)
 100c258:	df000c04 	addi	fp,sp,48
 100c25c:	e13ffb15 	stw	r4,-20(fp)
 100c260:	e17ffc15 	stw	r5,-16(fp)
 100c264:	e1bffd15 	stw	r6,-12(fp)
 100c268:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100c26c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100c270:	e0bffc17 	ldw	r2,-16(fp)
 100c274:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100c278:	00003a06 	br	100c364 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100c27c:	e0bffb17 	ldw	r2,-20(fp)
 100c280:	10800c17 	ldw	r2,48(r2)
 100c284:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100c288:	e0bffb17 	ldw	r2,-20(fp)
 100c28c:	10800d17 	ldw	r2,52(r2)
 100c290:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100c294:	e0fffa17 	ldw	r3,-24(fp)
 100c298:	e0bff917 	ldw	r2,-28(fp)
 100c29c:	1880062e 	bgeu	r3,r2,100c2b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100c2a0:	e0fff917 	ldw	r3,-28(fp)
 100c2a4:	e0bffa17 	ldw	r2,-24(fp)
 100c2a8:	1885c83a 	sub	r2,r3,r2
 100c2ac:	10bfffc4 	addi	r2,r2,-1
 100c2b0:	e0bff815 	stw	r2,-32(fp)
 100c2b4:	00000c06 	br	100c2e8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100c2b8:	e0bff917 	ldw	r2,-28(fp)
 100c2bc:	1005003a 	cmpeq	r2,r2,zero
 100c2c0:	1000051e 	bne	r2,zero,100c2d8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100c2c4:	00820004 	movi	r2,2048
 100c2c8:	e0fffa17 	ldw	r3,-24(fp)
 100c2cc:	10c5c83a 	sub	r2,r2,r3
 100c2d0:	e0bff815 	stw	r2,-32(fp)
 100c2d4:	00000406 	br	100c2e8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100c2d8:	0081ffc4 	movi	r2,2047
 100c2dc:	e0fffa17 	ldw	r3,-24(fp)
 100c2e0:	10c5c83a 	sub	r2,r2,r3
 100c2e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100c2e8:	e0bff817 	ldw	r2,-32(fp)
 100c2ec:	1005003a 	cmpeq	r2,r2,zero
 100c2f0:	10001f1e 	bne	r2,zero,100c370 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100c2f4:	e0fffd17 	ldw	r3,-12(fp)
 100c2f8:	e0bff817 	ldw	r2,-32(fp)
 100c2fc:	1880022e 	bgeu	r3,r2,100c308 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100c300:	e0bffd17 	ldw	r2,-12(fp)
 100c304:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100c308:	e0bffb17 	ldw	r2,-20(fp)
 100c30c:	10c20e04 	addi	r3,r2,2104
 100c310:	e0bffa17 	ldw	r2,-24(fp)
 100c314:	1885883a 	add	r2,r3,r2
 100c318:	e0fffc17 	ldw	r3,-16(fp)
 100c31c:	1009883a 	mov	r4,r2
 100c320:	180b883a 	mov	r5,r3
 100c324:	e1bff817 	ldw	r6,-32(fp)
 100c328:	10066bc0 	call	10066bc <memcpy>
      ptr   += n;
 100c32c:	e0fff817 	ldw	r3,-32(fp)
 100c330:	e0bffc17 	ldw	r2,-16(fp)
 100c334:	10c5883a 	add	r2,r2,r3
 100c338:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100c33c:	e0fffd17 	ldw	r3,-12(fp)
 100c340:	e0bff817 	ldw	r2,-32(fp)
 100c344:	1885c83a 	sub	r2,r3,r2
 100c348:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100c34c:	e0fffa17 	ldw	r3,-24(fp)
 100c350:	e0bff817 	ldw	r2,-32(fp)
 100c354:	1885883a 	add	r2,r3,r2
 100c358:	10c1ffcc 	andi	r3,r2,2047
 100c35c:	e0bffb17 	ldw	r2,-20(fp)
 100c360:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100c364:	e0bffd17 	ldw	r2,-12(fp)
 100c368:	10800048 	cmpgei	r2,r2,1
 100c36c:	103fc31e 	bne	r2,zero,100c27c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c370:	0005303a 	rdctl	r2,status
 100c374:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c378:	e0fff517 	ldw	r3,-44(fp)
 100c37c:	00bfff84 	movi	r2,-2
 100c380:	1884703a 	and	r2,r3,r2
 100c384:	1001703a 	wrctl	status,r2
  
  return context;
 100c388:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100c38c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100c390:	e0bffb17 	ldw	r2,-20(fp)
 100c394:	10800817 	ldw	r2,32(r2)
 100c398:	10c00094 	ori	r3,r2,2
 100c39c:	e0bffb17 	ldw	r2,-20(fp)
 100c3a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100c3a4:	e0bffb17 	ldw	r2,-20(fp)
 100c3a8:	10800017 	ldw	r2,0(r2)
 100c3ac:	11000104 	addi	r4,r2,4
 100c3b0:	e0bffb17 	ldw	r2,-20(fp)
 100c3b4:	10800817 	ldw	r2,32(r2)
 100c3b8:	1007883a 	mov	r3,r2
 100c3bc:	2005883a 	mov	r2,r4
 100c3c0:	10c00035 	stwio	r3,0(r2)
 100c3c4:	e0bff717 	ldw	r2,-36(fp)
 100c3c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c3cc:	e0bff417 	ldw	r2,-48(fp)
 100c3d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100c3d4:	e0bffd17 	ldw	r2,-12(fp)
 100c3d8:	10800050 	cmplti	r2,r2,1
 100c3dc:	1000111e 	bne	r2,zero,100c424 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100c3e0:	e0bffe17 	ldw	r2,-8(fp)
 100c3e4:	1090000c 	andi	r2,r2,16384
 100c3e8:	1004c03a 	cmpne	r2,r2,zero
 100c3ec:	1000101e 	bne	r2,zero,100c430 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100c3f0:	e0bffb17 	ldw	r2,-20(fp)
 100c3f4:	10c00d17 	ldw	r3,52(r2)
 100c3f8:	e0bff917 	ldw	r2,-28(fp)
 100c3fc:	1880051e 	bne	r3,r2,100c414 <altera_avalon_jtag_uart_write+0x1c8>
 100c400:	e0bffb17 	ldw	r2,-20(fp)
 100c404:	10c00917 	ldw	r3,36(r2)
 100c408:	e0bffb17 	ldw	r2,-20(fp)
 100c40c:	10800117 	ldw	r2,4(r2)
 100c410:	18bff736 	bltu	r3,r2,100c3f0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100c414:	e0bffb17 	ldw	r2,-20(fp)
 100c418:	10c00d17 	ldw	r3,52(r2)
 100c41c:	e0bff917 	ldw	r2,-28(fp)
 100c420:	18800326 	beq	r3,r2,100c430 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 100c424:	e0bffd17 	ldw	r2,-12(fp)
 100c428:	10800048 	cmpgei	r2,r2,1
 100c42c:	103fcd1e 	bne	r2,zero,100c364 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100c430:	e0fffc17 	ldw	r3,-16(fp)
 100c434:	e0bff617 	ldw	r2,-40(fp)
 100c438:	18800526 	beq	r3,r2,100c450 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100c43c:	e0fffc17 	ldw	r3,-16(fp)
 100c440:	e0bff617 	ldw	r2,-40(fp)
 100c444:	1887c83a 	sub	r3,r3,r2
 100c448:	e0ffff15 	stw	r3,-4(fp)
 100c44c:	00000906 	br	100c474 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100c450:	e0bffe17 	ldw	r2,-8(fp)
 100c454:	1090000c 	andi	r2,r2,16384
 100c458:	1005003a 	cmpeq	r2,r2,zero
 100c45c:	1000031e 	bne	r2,zero,100c46c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100c460:	00bffd44 	movi	r2,-11
 100c464:	e0bfff15 	stw	r2,-4(fp)
 100c468:	00000206 	br	100c474 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 100c46c:	00bffec4 	movi	r2,-5
 100c470:	e0bfff15 	stw	r2,-4(fp)
 100c474:	e0bfff17 	ldw	r2,-4(fp)
}
 100c478:	e037883a 	mov	sp,fp
 100c47c:	dfc00117 	ldw	ra,4(sp)
 100c480:	df000017 	ldw	fp,0(sp)
 100c484:	dec00204 	addi	sp,sp,8
 100c488:	f800283a 	ret

0100c48c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100c48c:	defffa04 	addi	sp,sp,-24
 100c490:	dfc00515 	stw	ra,20(sp)
 100c494:	df000415 	stw	fp,16(sp)
 100c498:	df000404 	addi	fp,sp,16
 100c49c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100c4a0:	e0bfff17 	ldw	r2,-4(fp)
 100c4a4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100c4a8:	e0bfff17 	ldw	r2,-4(fp)
 100c4ac:	10800104 	addi	r2,r2,4
 100c4b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c4b4:	0005303a 	rdctl	r2,status
 100c4b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c4bc:	e0fffd17 	ldw	r3,-12(fp)
 100c4c0:	00bfff84 	movi	r2,-2
 100c4c4:	1884703a 	and	r2,r3,r2
 100c4c8:	1001703a 	wrctl	status,r2
  
  return context;
 100c4cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100c4d0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 100c4d4:	100b3640 	call	100b364 <alt_tick>
 100c4d8:	e0bffe17 	ldw	r2,-8(fp)
 100c4dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c4e0:	e0bffc17 	ldw	r2,-16(fp)
 100c4e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100c4e8:	e037883a 	mov	sp,fp
 100c4ec:	dfc00117 	ldw	ra,4(sp)
 100c4f0:	df000017 	ldw	fp,0(sp)
 100c4f4:	dec00204 	addi	sp,sp,8
 100c4f8:	f800283a 	ret

0100c4fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100c4fc:	defff804 	addi	sp,sp,-32
 100c500:	dfc00715 	stw	ra,28(sp)
 100c504:	df000615 	stw	fp,24(sp)
 100c508:	df000604 	addi	fp,sp,24
 100c50c:	e13ffc15 	stw	r4,-16(fp)
 100c510:	e17ffd15 	stw	r5,-12(fp)
 100c514:	e1bffe15 	stw	r6,-8(fp)
 100c518:	e1ffff15 	stw	r7,-4(fp)
 100c51c:	e0bfff17 	ldw	r2,-4(fp)
 100c520:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100c524:	00804074 	movhi	r2,257
 100c528:	1088c304 	addi	r2,r2,8972
 100c52c:	10800017 	ldw	r2,0(r2)
 100c530:	1004c03a 	cmpne	r2,r2,zero
 100c534:	1000041e 	bne	r2,zero,100c548 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 100c538:	00c04074 	movhi	r3,257
 100c53c:	18c8c304 	addi	r3,r3,8972
 100c540:	e0bffb17 	ldw	r2,-20(fp)
 100c544:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100c548:	e0bffc17 	ldw	r2,-16(fp)
 100c54c:	10800104 	addi	r2,r2,4
 100c550:	1007883a 	mov	r3,r2
 100c554:	008001c4 	movi	r2,7
 100c558:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 100c55c:	d8000015 	stw	zero,0(sp)
 100c560:	e13ffd17 	ldw	r4,-12(fp)
 100c564:	e17ffe17 	ldw	r5,-8(fp)
 100c568:	01804074 	movhi	r6,257
 100c56c:	31b12304 	addi	r6,r6,-15220
 100c570:	e1fffc17 	ldw	r7,-16(fp)
 100c574:	100d4ac0 	call	100d4ac <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 100c578:	e037883a 	mov	sp,fp
 100c57c:	dfc00117 	ldw	ra,4(sp)
 100c580:	df000017 	ldw	fp,0(sp)
 100c584:	dec00204 	addi	sp,sp,8
 100c588:	f800283a 	ret

0100c58c <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 100c58c:	defffd04 	addi	sp,sp,-12
 100c590:	df000215 	stw	fp,8(sp)
 100c594:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
 100c598:	00804074 	movhi	r2,257
 100c59c:	1088c504 	addi	r2,r2,8980
 100c5a0:	10800017 	ldw	r2,0(r2)
 100c5a4:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 100c5a8:	00804074 	movhi	r2,257
 100c5ac:	1088c604 	addi	r2,r2,8984
 100c5b0:	10800017 	ldw	r2,0(r2)
 100c5b4:	1004c03a 	cmpne	r2,r2,zero
 100c5b8:	1000031e 	bne	r2,zero,100c5c8 <alt_timestamp_start+0x3c>
  {
    return -1;
 100c5bc:	00bfffc4 	movi	r2,-1
 100c5c0:	e0bfff15 	stw	r2,-4(fp)
 100c5c4:	00001506 	br	100c61c <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 100c5c8:	e0bffe17 	ldw	r2,-8(fp)
 100c5cc:	10800104 	addi	r2,r2,4
 100c5d0:	1007883a 	mov	r3,r2
 100c5d4:	00800204 	movi	r2,8
 100c5d8:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 100c5dc:	e0bffe17 	ldw	r2,-8(fp)
 100c5e0:	10800204 	addi	r2,r2,8
 100c5e4:	1007883a 	mov	r3,r2
 100c5e8:	00bfffd4 	movui	r2,65535
 100c5ec:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 100c5f0:	e0bffe17 	ldw	r2,-8(fp)
 100c5f4:	10800304 	addi	r2,r2,12
 100c5f8:	1007883a 	mov	r3,r2
 100c5fc:	00bfffd4 	movui	r2,65535
 100c600:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 100c604:	e0bffe17 	ldw	r2,-8(fp)
 100c608:	10800104 	addi	r2,r2,4
 100c60c:	1007883a 	mov	r3,r2
 100c610:	00800104 	movi	r2,4
 100c614:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
 100c618:	e03fff15 	stw	zero,-4(fp)
 100c61c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c620:	e037883a 	mov	sp,fp
 100c624:	df000017 	ldw	fp,0(sp)
 100c628:	dec00104 	addi	sp,sp,4
 100c62c:	f800283a 	ret

0100c630 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 100c630:	defffb04 	addi	sp,sp,-20
 100c634:	df000415 	stw	fp,16(sp)
 100c638:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
 100c63c:	00804074 	movhi	r2,257
 100c640:	1088c504 	addi	r2,r2,8980
 100c644:	10800017 	ldw	r2,0(r2)
 100c648:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 100c64c:	00804074 	movhi	r2,257
 100c650:	1088c604 	addi	r2,r2,8984
 100c654:	10800017 	ldw	r2,0(r2)
 100c658:	1004c03a 	cmpne	r2,r2,zero
 100c65c:	1000031e 	bne	r2,zero,100c66c <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
 100c660:	00bfffc4 	movi	r2,-1
 100c664:	e0bfff15 	stw	r2,-4(fp)
 100c668:	00001306 	br	100c6b8 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 100c66c:	e0bffe17 	ldw	r2,-8(fp)
 100c670:	10800404 	addi	r2,r2,16
 100c674:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 100c678:	e0bffe17 	ldw	r2,-8(fp)
 100c67c:	10800404 	addi	r2,r2,16
 100c680:	10800037 	ldwio	r2,0(r2)
 100c684:	10bfffcc 	andi	r2,r2,65535
 100c688:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 100c68c:	e0bffe17 	ldw	r2,-8(fp)
 100c690:	10800504 	addi	r2,r2,20
 100c694:	10800037 	ldwio	r2,0(r2)
 100c698:	10bfffcc 	andi	r2,r2,65535
 100c69c:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 100c6a0:	e0bffc17 	ldw	r2,-16(fp)
 100c6a4:	1006943a 	slli	r3,r2,16
 100c6a8:	e0bffd17 	ldw	r2,-12(fp)
 100c6ac:	1884b03a 	or	r2,r3,r2
 100c6b0:	0084303a 	nor	r2,zero,r2
 100c6b4:	e0bfff15 	stw	r2,-4(fp)
 100c6b8:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
 100c6bc:	e037883a 	mov	sp,fp
 100c6c0:	df000017 	ldw	fp,0(sp)
 100c6c4:	dec00104 	addi	sp,sp,4
 100c6c8:	f800283a 	ret

0100c6cc <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 100c6cc:	deffff04 	addi	sp,sp,-4
 100c6d0:	df000015 	stw	fp,0(sp)
 100c6d4:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 100c6d8:	00804074 	movhi	r2,257
 100c6dc:	1088c604 	addi	r2,r2,8984
 100c6e0:	10800017 	ldw	r2,0(r2)
}
 100c6e4:	e037883a 	mov	sp,fp
 100c6e8:	df000017 	ldw	fp,0(sp)
 100c6ec:	dec00104 	addi	sp,sp,4
 100c6f0:	f800283a 	ret

0100c6f4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100c6f4:	defffc04 	addi	sp,sp,-16
 100c6f8:	df000315 	stw	fp,12(sp)
 100c6fc:	df000304 	addi	fp,sp,12
 100c700:	e13ffe15 	stw	r4,-8(fp)
 100c704:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100c708:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100c70c:	e0bfff17 	ldw	r2,-4(fp)
 100c710:	1004c03a 	cmpne	r2,r2,zero
 100c714:	1000061e 	bne	r2,zero,100c730 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100c718:	e0bffe17 	ldw	r2,-8(fp)
 100c71c:	1007883a 	mov	r3,r2
 100c720:	e0bffd03 	ldbu	r2,-12(fp)
 100c724:	10c4b03a 	or	r2,r2,r3
 100c728:	e0bffd05 	stb	r2,-12(fp)
 100c72c:	00000806 	br	100c750 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100c730:	e0bffe17 	ldw	r2,-8(fp)
 100c734:	1007883a 	mov	r3,r2
 100c738:	e0bffd03 	ldbu	r2,-12(fp)
 100c73c:	10c4b03a 	or	r2,r2,r3
 100c740:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100c744:	e0bffd03 	ldbu	r2,-12(fp)
 100c748:	10801014 	ori	r2,r2,64
 100c74c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100c750:	e0fffd03 	ldbu	r3,-12(fp)
 100c754:	00bfe004 	movi	r2,-128
 100c758:	1884b03a 	or	r2,r3,r2
 100c75c:	10803fcc 	andi	r2,r2,255
}
 100c760:	e037883a 	mov	sp,fp
 100c764:	df000017 	ldw	fp,0(sp)
 100c768:	dec00104 	addi	sp,sp,4
 100c76c:	f800283a 	ret

0100c770 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100c770:	defffd04 	addi	sp,sp,-12
 100c774:	df000215 	stw	fp,8(sp)
 100c778:	df000204 	addi	fp,sp,8
 100c77c:	e13ffe15 	stw	r4,-8(fp)
 100c780:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100c784:	e0bffe17 	ldw	r2,-8(fp)
 100c788:	10800a17 	ldw	r2,40(r2)
 100c78c:	e0ffff03 	ldbu	r3,-4(fp)
 100c790:	10c00025 	stbio	r3,0(r2)
}
 100c794:	e037883a 	mov	sp,fp
 100c798:	df000017 	ldw	fp,0(sp)
 100c79c:	dec00104 	addi	sp,sp,4
 100c7a0:	f800283a 	ret

0100c7a4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100c7a4:	defffe04 	addi	sp,sp,-8
 100c7a8:	df000115 	stw	fp,4(sp)
 100c7ac:	df000104 	addi	fp,sp,4
 100c7b0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100c7b4:	e0bfff17 	ldw	r2,-4(fp)
 100c7b8:	10800a17 	ldw	r2,40(r2)
 100c7bc:	1007883a 	mov	r3,r2
 100c7c0:	00800044 	movi	r2,1
 100c7c4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100c7c8:	e037883a 	mov	sp,fp
 100c7cc:	df000017 	ldw	fp,0(sp)
 100c7d0:	dec00104 	addi	sp,sp,4
 100c7d4:	f800283a 	ret

0100c7d8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100c7d8:	defffc04 	addi	sp,sp,-16
 100c7dc:	dfc00315 	stw	ra,12(sp)
 100c7e0:	df000215 	stw	fp,8(sp)
 100c7e4:	df000204 	addi	fp,sp,8
 100c7e8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100c7ec:	e13fff17 	ldw	r4,-4(fp)
 100c7f0:	01404074 	movhi	r5,257
 100c7f4:	2941dd04 	addi	r5,r5,1908
 100c7f8:	100d3e80 	call	100d3e8 <alt_find_dev>
 100c7fc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100c800:	e0bffe17 	ldw	r2,-8(fp)
}
 100c804:	e037883a 	mov	sp,fp
 100c808:	dfc00117 	ldw	ra,4(sp)
 100c80c:	df000017 	ldw	fp,0(sp)
 100c810:	dec00204 	addi	sp,sp,8
 100c814:	f800283a 	ret

0100c818 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100c818:	defffb04 	addi	sp,sp,-20
 100c81c:	df000415 	stw	fp,16(sp)
 100c820:	df000404 	addi	fp,sp,16
 100c824:	e13ffd15 	stw	r4,-12(fp)
 100c828:	e17ffe15 	stw	r5,-8(fp)
 100c82c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100c830:	e03ffc15 	stw	zero,-16(fp)
 100c834:	00000f06 	br	100c874 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100c838:	e0bffd17 	ldw	r2,-12(fp)
 100c83c:	10800a17 	ldw	r2,40(r2)
 100c840:	11000044 	addi	r4,r2,1
 100c844:	e0fffc17 	ldw	r3,-16(fp)
 100c848:	e0bffe17 	ldw	r2,-8(fp)
 100c84c:	1885883a 	add	r2,r3,r2
 100c850:	10800003 	ldbu	r2,0(r2)
 100c854:	10c03fcc 	andi	r3,r2,255
 100c858:	18c0201c 	xori	r3,r3,128
 100c85c:	18ffe004 	addi	r3,r3,-128
 100c860:	2005883a 	mov	r2,r4
 100c864:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100c868:	e0bffc17 	ldw	r2,-16(fp)
 100c86c:	10800044 	addi	r2,r2,1
 100c870:	e0bffc15 	stw	r2,-16(fp)
 100c874:	e0fffc17 	ldw	r3,-16(fp)
 100c878:	e0bfff17 	ldw	r2,-4(fp)
 100c87c:	18bfee36 	bltu	r3,r2,100c838 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100c880:	e037883a 	mov	sp,fp
 100c884:	df000017 	ldw	fp,0(sp)
 100c888:	dec00104 	addi	sp,sp,4
 100c88c:	f800283a 	ret

0100c890 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100c890:	defffd04 	addi	sp,sp,-12
 100c894:	df000215 	stw	fp,8(sp)
 100c898:	df000204 	addi	fp,sp,8
 100c89c:	e13ffe15 	stw	r4,-8(fp)
 100c8a0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100c8a4:	00000d06 	br	100c8dc <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100c8a8:	e0bffe17 	ldw	r2,-8(fp)
 100c8ac:	10800a17 	ldw	r2,40(r2)
 100c8b0:	11000044 	addi	r4,r2,1
 100c8b4:	e0bfff17 	ldw	r2,-4(fp)
 100c8b8:	10800003 	ldbu	r2,0(r2)
 100c8bc:	10c03fcc 	andi	r3,r2,255
 100c8c0:	18c0201c 	xori	r3,r3,128
 100c8c4:	18ffe004 	addi	r3,r3,-128
 100c8c8:	2005883a 	mov	r2,r4
 100c8cc:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100c8d0:	e0bfff17 	ldw	r2,-4(fp)
 100c8d4:	10800044 	addi	r2,r2,1
 100c8d8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100c8dc:	e0bfff17 	ldw	r2,-4(fp)
 100c8e0:	10800003 	ldbu	r2,0(r2)
 100c8e4:	10803fcc 	andi	r2,r2,255
 100c8e8:	1080201c 	xori	r2,r2,128
 100c8ec:	10bfe004 	addi	r2,r2,-128
 100c8f0:	1004c03a 	cmpne	r2,r2,zero
 100c8f4:	103fec1e 	bne	r2,zero,100c8a8 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100c8f8:	e037883a 	mov	sp,fp
 100c8fc:	df000017 	ldw	fp,0(sp)
 100c900:	dec00104 	addi	sp,sp,4
 100c904:	f800283a 	ret

0100c908 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100c908:	defffb04 	addi	sp,sp,-20
 100c90c:	dfc00415 	stw	ra,16(sp)
 100c910:	df000315 	stw	fp,12(sp)
 100c914:	df000304 	addi	fp,sp,12
 100c918:	e13ffd15 	stw	r4,-12(fp)
 100c91c:	e17ffe15 	stw	r5,-8(fp)
 100c920:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100c924:	e0bffd17 	ldw	r2,-12(fp)
 100c928:	10800017 	ldw	r2,0(r2)
 100c92c:	1009883a 	mov	r4,r2
 100c930:	e1bfff17 	ldw	r6,-4(fp)
 100c934:	e17ffe17 	ldw	r5,-8(fp)
 100c938:	100c8180 	call	100c818 <alt_up_character_lcd_write>
	return 0;
 100c93c:	0005883a 	mov	r2,zero
}
 100c940:	e037883a 	mov	sp,fp
 100c944:	dfc00117 	ldw	ra,4(sp)
 100c948:	df000017 	ldw	fp,0(sp)
 100c94c:	dec00204 	addi	sp,sp,8
 100c950:	f800283a 	ret

0100c954 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100c954:	defff904 	addi	sp,sp,-28
 100c958:	dfc00615 	stw	ra,24(sp)
 100c95c:	df000515 	stw	fp,20(sp)
 100c960:	df000504 	addi	fp,sp,20
 100c964:	e13ffc15 	stw	r4,-16(fp)
 100c968:	e17ffd15 	stw	r5,-12(fp)
 100c96c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100c970:	e0bffd17 	ldw	r2,-12(fp)
 100c974:	10800a28 	cmpgeui	r2,r2,40
 100c978:	1000031e 	bne	r2,zero,100c988 <alt_up_character_lcd_set_cursor_pos+0x34>
 100c97c:	e0bffe17 	ldw	r2,-8(fp)
 100c980:	108000b0 	cmpltui	r2,r2,2
 100c984:	1000031e 	bne	r2,zero,100c994 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 100c988:	00bfffc4 	movi	r2,-1
 100c98c:	e0bfff15 	stw	r2,-4(fp)
 100c990:	00000806 	br	100c9b4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100c994:	e13ffd17 	ldw	r4,-12(fp)
 100c998:	e17ffe17 	ldw	r5,-8(fp)
 100c99c:	100c6f40 	call	100c6f4 <get_DDRAM_addr>
 100c9a0:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100c9a4:	e17ffb03 	ldbu	r5,-20(fp)
 100c9a8:	e13ffc17 	ldw	r4,-16(fp)
 100c9ac:	100c7700 	call	100c770 <alt_up_character_lcd_send_cmd>
	return 0;
 100c9b0:	e03fff15 	stw	zero,-4(fp)
 100c9b4:	e0bfff17 	ldw	r2,-4(fp)
}
 100c9b8:	e037883a 	mov	sp,fp
 100c9bc:	dfc00117 	ldw	ra,4(sp)
 100c9c0:	df000017 	ldw	fp,0(sp)
 100c9c4:	dec00204 	addi	sp,sp,8
 100c9c8:	f800283a 	ret

0100c9cc <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100c9cc:	defff904 	addi	sp,sp,-28
 100c9d0:	dfc00615 	stw	ra,24(sp)
 100c9d4:	df000515 	stw	fp,20(sp)
 100c9d8:	df000504 	addi	fp,sp,20
 100c9dc:	e13ffc15 	stw	r4,-16(fp)
 100c9e0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100c9e4:	e0bffd17 	ldw	r2,-12(fp)
 100c9e8:	1005003a 	cmpeq	r2,r2,zero
 100c9ec:	10001e1e 	bne	r2,zero,100ca68 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 100c9f0:	e0bffd17 	ldw	r2,-12(fp)
 100c9f4:	10800050 	cmplti	r2,r2,1
 100c9f8:	1000031e 	bne	r2,zero,100ca08 <alt_up_character_lcd_shift_cursor+0x3c>
 100c9fc:	00800504 	movi	r2,20
 100ca00:	e0bfff05 	stb	r2,-4(fp)
 100ca04:	00000206 	br	100ca10 <alt_up_character_lcd_shift_cursor+0x44>
 100ca08:	00c00404 	movi	r3,16
 100ca0c:	e0ffff05 	stb	r3,-4(fp)
 100ca10:	e0bfff03 	ldbu	r2,-4(fp)
 100ca14:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100ca18:	e0fffd17 	ldw	r3,-12(fp)
 100ca1c:	e0fffe15 	stw	r3,-8(fp)
 100ca20:	e0fffe17 	ldw	r3,-8(fp)
 100ca24:	1804403a 	cmpge	r2,r3,zero
 100ca28:	1000031e 	bne	r2,zero,100ca38 <alt_up_character_lcd_shift_cursor+0x6c>
 100ca2c:	e0bffe17 	ldw	r2,-8(fp)
 100ca30:	0085c83a 	sub	r2,zero,r2
 100ca34:	e0bffe15 	stw	r2,-8(fp)
 100ca38:	e0fffe17 	ldw	r3,-8(fp)
 100ca3c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100ca40:	00000306 	br	100ca50 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100ca44:	e17ffb43 	ldbu	r5,-19(fp)
 100ca48:	e13ffc17 	ldw	r4,-16(fp)
 100ca4c:	100c7700 	call	100c770 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100ca50:	e0bffb03 	ldbu	r2,-20(fp)
 100ca54:	10bfffc4 	addi	r2,r2,-1
 100ca58:	e0bffb05 	stb	r2,-20(fp)
 100ca5c:	e0bffb03 	ldbu	r2,-20(fp)
 100ca60:	10803fd8 	cmpnei	r2,r2,255
 100ca64:	103ff71e 	bne	r2,zero,100ca44 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100ca68:	e037883a 	mov	sp,fp
 100ca6c:	dfc00117 	ldw	ra,4(sp)
 100ca70:	df000017 	ldw	fp,0(sp)
 100ca74:	dec00204 	addi	sp,sp,8
 100ca78:	f800283a 	ret

0100ca7c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100ca7c:	defff904 	addi	sp,sp,-28
 100ca80:	dfc00615 	stw	ra,24(sp)
 100ca84:	df000515 	stw	fp,20(sp)
 100ca88:	df000504 	addi	fp,sp,20
 100ca8c:	e13ffc15 	stw	r4,-16(fp)
 100ca90:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100ca94:	e0bffd17 	ldw	r2,-12(fp)
 100ca98:	1005003a 	cmpeq	r2,r2,zero
 100ca9c:	10001e1e 	bne	r2,zero,100cb18 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100caa0:	e0bffd17 	ldw	r2,-12(fp)
 100caa4:	10800050 	cmplti	r2,r2,1
 100caa8:	1000031e 	bne	r2,zero,100cab8 <alt_up_character_lcd_shift_display+0x3c>
 100caac:	00800704 	movi	r2,28
 100cab0:	e0bfff05 	stb	r2,-4(fp)
 100cab4:	00000206 	br	100cac0 <alt_up_character_lcd_shift_display+0x44>
 100cab8:	00c00604 	movi	r3,24
 100cabc:	e0ffff05 	stb	r3,-4(fp)
 100cac0:	e0bfff03 	ldbu	r2,-4(fp)
 100cac4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100cac8:	e0fffd17 	ldw	r3,-12(fp)
 100cacc:	e0fffe15 	stw	r3,-8(fp)
 100cad0:	e0fffe17 	ldw	r3,-8(fp)
 100cad4:	1804403a 	cmpge	r2,r3,zero
 100cad8:	1000031e 	bne	r2,zero,100cae8 <alt_up_character_lcd_shift_display+0x6c>
 100cadc:	e0bffe17 	ldw	r2,-8(fp)
 100cae0:	0085c83a 	sub	r2,zero,r2
 100cae4:	e0bffe15 	stw	r2,-8(fp)
 100cae8:	e0fffe17 	ldw	r3,-8(fp)
 100caec:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100caf0:	00000306 	br	100cb00 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100caf4:	e17ffb43 	ldbu	r5,-19(fp)
 100caf8:	e13ffc17 	ldw	r4,-16(fp)
 100cafc:	100c7700 	call	100c770 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100cb00:	e0bffb03 	ldbu	r2,-20(fp)
 100cb04:	10bfffc4 	addi	r2,r2,-1
 100cb08:	e0bffb05 	stb	r2,-20(fp)
 100cb0c:	e0bffb03 	ldbu	r2,-20(fp)
 100cb10:	10803fd8 	cmpnei	r2,r2,255
 100cb14:	103ff71e 	bne	r2,zero,100caf4 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100cb18:	e037883a 	mov	sp,fp
 100cb1c:	dfc00117 	ldw	ra,4(sp)
 100cb20:	df000017 	ldw	fp,0(sp)
 100cb24:	dec00204 	addi	sp,sp,8
 100cb28:	f800283a 	ret

0100cb2c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 100cb2c:	defff904 	addi	sp,sp,-28
 100cb30:	dfc00615 	stw	ra,24(sp)
 100cb34:	df000515 	stw	fp,20(sp)
 100cb38:	df000504 	addi	fp,sp,20
 100cb3c:	e13ffc15 	stw	r4,-16(fp)
 100cb40:	e17ffd15 	stw	r5,-12(fp)
 100cb44:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100cb48:	e0bffd17 	ldw	r2,-12(fp)
 100cb4c:	10800a28 	cmpgeui	r2,r2,40
 100cb50:	1000031e 	bne	r2,zero,100cb60 <alt_up_character_lcd_erase_pos+0x34>
 100cb54:	e0bffe17 	ldw	r2,-8(fp)
 100cb58:	108000b0 	cmpltui	r2,r2,2
 100cb5c:	1000031e 	bne	r2,zero,100cb6c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100cb60:	00bfffc4 	movi	r2,-1
 100cb64:	e0bfff15 	stw	r2,-4(fp)
 100cb68:	00000e06 	br	100cba4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100cb6c:	e13ffd17 	ldw	r4,-12(fp)
 100cb70:	e17ffe17 	ldw	r5,-8(fp)
 100cb74:	100c6f40 	call	100c6f4 <get_DDRAM_addr>
 100cb78:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 100cb7c:	e17ffb03 	ldbu	r5,-20(fp)
 100cb80:	e13ffc17 	ldw	r4,-16(fp)
 100cb84:	100c7700 	call	100c770 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 100cb88:	e0bffc17 	ldw	r2,-16(fp)
 100cb8c:	10800a17 	ldw	r2,40(r2)
 100cb90:	10800044 	addi	r2,r2,1
 100cb94:	1007883a 	mov	r3,r2
 100cb98:	00800084 	movi	r2,2
 100cb9c:	18800025 	stbio	r2,0(r3)
	return 0;
 100cba0:	e03fff15 	stw	zero,-4(fp)
 100cba4:	e0bfff17 	ldw	r2,-4(fp)
}
 100cba8:	e037883a 	mov	sp,fp
 100cbac:	dfc00117 	ldw	ra,4(sp)
 100cbb0:	df000017 	ldw	fp,0(sp)
 100cbb4:	dec00204 	addi	sp,sp,8
 100cbb8:	f800283a 	ret

0100cbbc <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100cbbc:	defffd04 	addi	sp,sp,-12
 100cbc0:	dfc00215 	stw	ra,8(sp)
 100cbc4:	df000115 	stw	fp,4(sp)
 100cbc8:	df000104 	addi	fp,sp,4
 100cbcc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100cbd0:	e13fff17 	ldw	r4,-4(fp)
 100cbd4:	01400304 	movi	r5,12
 100cbd8:	100c7700 	call	100c770 <alt_up_character_lcd_send_cmd>
}
 100cbdc:	e037883a 	mov	sp,fp
 100cbe0:	dfc00117 	ldw	ra,4(sp)
 100cbe4:	df000017 	ldw	fp,0(sp)
 100cbe8:	dec00204 	addi	sp,sp,8
 100cbec:	f800283a 	ret

0100cbf0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 100cbf0:	defffd04 	addi	sp,sp,-12
 100cbf4:	dfc00215 	stw	ra,8(sp)
 100cbf8:	df000115 	stw	fp,4(sp)
 100cbfc:	df000104 	addi	fp,sp,4
 100cc00:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 100cc04:	e13fff17 	ldw	r4,-4(fp)
 100cc08:	014003c4 	movi	r5,15
 100cc0c:	100c7700 	call	100c770 <alt_up_character_lcd_send_cmd>
}
 100cc10:	e037883a 	mov	sp,fp
 100cc14:	dfc00117 	ldw	ra,4(sp)
 100cc18:	df000017 	ldw	fp,0(sp)
 100cc1c:	dec00204 	addi	sp,sp,8
 100cc20:	f800283a 	ret

0100cc24 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 100cc24:	defffc04 	addi	sp,sp,-16
 100cc28:	dfc00315 	stw	ra,12(sp)
 100cc2c:	df000215 	stw	fp,8(sp)
 100cc30:	df000204 	addi	fp,sp,8
 100cc34:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 100cc38:	e0bfff17 	ldw	r2,-4(fp)
 100cc3c:	10800217 	ldw	r2,8(r2)
 100cc40:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 100cc44:	00000c06 	br	100cc78 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 100cc48:	e13ffe17 	ldw	r4,-8(fp)
 100cc4c:	01404074 	movhi	r5,257
 100cc50:	297b0a04 	addi	r5,r5,-5080
 100cc54:	10080e80 	call	10080e8 <strcmp>
 100cc58:	1004c03a 	cmpne	r2,r2,zero
 100cc5c:	1000031e 	bne	r2,zero,100cc6c <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 100cc60:	e0bffe17 	ldw	r2,-8(fp)
 100cc64:	10000005 	stb	zero,0(r2)
			break;
 100cc68:	00000a06 	br	100cc94 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 100cc6c:	e0bffe17 	ldw	r2,-8(fp)
 100cc70:	10800044 	addi	r2,r2,1
 100cc74:	e0bffe15 	stw	r2,-8(fp)
 100cc78:	e0bffe17 	ldw	r2,-8(fp)
 100cc7c:	10800003 	ldbu	r2,0(r2)
 100cc80:	10803fcc 	andi	r2,r2,255
 100cc84:	1080201c 	xori	r2,r2,128
 100cc88:	10bfe004 	addi	r2,r2,-128
 100cc8c:	1004c03a 	cmpne	r2,r2,zero
 100cc90:	103fed1e 	bne	r2,zero,100cc48 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 100cc94:	e037883a 	mov	sp,fp
 100cc98:	dfc00117 	ldw	ra,4(sp)
 100cc9c:	df000017 	ldw	fp,0(sp)
 100cca0:	dec00204 	addi	sp,sp,8
 100cca4:	f800283a 	ret

0100cca8 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 100cca8:	defffc04 	addi	sp,sp,-16
 100ccac:	dfc00315 	stw	ra,12(sp)
 100ccb0:	df000215 	stw	fp,8(sp)
 100ccb4:	df000204 	addi	fp,sp,8
 100ccb8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 100ccbc:	e13fff17 	ldw	r4,-4(fp)
 100ccc0:	01404074 	movhi	r5,257
 100ccc4:	2941dd04 	addi	r5,r5,1908
 100ccc8:	100d3e80 	call	100d3e8 <alt_find_dev>
 100cccc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100ccd0:	e0bffe17 	ldw	r2,-8(fp)
}
 100ccd4:	e037883a 	mov	sp,fp
 100ccd8:	dfc00117 	ldw	ra,4(sp)
 100ccdc:	df000017 	ldw	fp,0(sp)
 100cce0:	dec00204 	addi	sp,sp,8
 100cce4:	f800283a 	ret

0100cce8 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 100cce8:	defff904 	addi	sp,sp,-28
 100ccec:	df000615 	stw	fp,24(sp)
 100ccf0:	df000604 	addi	fp,sp,24
 100ccf4:	e13ffb15 	stw	r4,-20(fp)
 100ccf8:	e1bffd15 	stw	r6,-12(fp)
 100ccfc:	e1fffe15 	stw	r7,-8(fp)
 100cd00:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 100cd04:	e0bffb17 	ldw	r2,-20(fp)
 100cd08:	10c00c17 	ldw	r3,48(r2)
 100cd0c:	e0bffd17 	ldw	r2,-12(fp)
 100cd10:	10c0042e 	bgeu	r2,r3,100cd24 <alt_up_char_buffer_draw+0x3c>
 100cd14:	e0bffb17 	ldw	r2,-20(fp)
 100cd18:	10c00d17 	ldw	r3,52(r2)
 100cd1c:	e0bffe17 	ldw	r2,-8(fp)
 100cd20:	10c00336 	bltu	r2,r3,100cd30 <alt_up_char_buffer_draw+0x48>
		return -1;
 100cd24:	00bfffc4 	movi	r2,-1
 100cd28:	e0bfff15 	stw	r2,-4(fp)
 100cd2c:	00001d06 	br	100cda4 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 100cd30:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 100cd34:	e0bffb17 	ldw	r2,-20(fp)
 100cd38:	10c00f17 	ldw	r3,60(r2)
 100cd3c:	e0bffd17 	ldw	r2,-12(fp)
 100cd40:	1886703a 	and	r3,r3,r2
 100cd44:	e0bffb17 	ldw	r2,-20(fp)
 100cd48:	10800e17 	ldw	r2,56(r2)
 100cd4c:	1886983a 	sll	r3,r3,r2
 100cd50:	e0bffa17 	ldw	r2,-24(fp)
 100cd54:	10c4b03a 	or	r2,r2,r3
 100cd58:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 100cd5c:	e0bffb17 	ldw	r2,-20(fp)
 100cd60:	10c01117 	ldw	r3,68(r2)
 100cd64:	e0bffe17 	ldw	r2,-8(fp)
 100cd68:	1886703a 	and	r3,r3,r2
 100cd6c:	e0bffb17 	ldw	r2,-20(fp)
 100cd70:	10801017 	ldw	r2,64(r2)
 100cd74:	1886983a 	sll	r3,r3,r2
 100cd78:	e0bffa17 	ldw	r2,-24(fp)
 100cd7c:	10c4b03a 	or	r2,r2,r3
 100cd80:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 100cd84:	e0bffb17 	ldw	r2,-20(fp)
 100cd88:	10800b17 	ldw	r2,44(r2)
 100cd8c:	1007883a 	mov	r3,r2
 100cd90:	e0bffa17 	ldw	r2,-24(fp)
 100cd94:	1885883a 	add	r2,r3,r2
 100cd98:	e0fffc03 	ldbu	r3,-16(fp)
 100cd9c:	10c00025 	stbio	r3,0(r2)

	return 0;
 100cda0:	e03fff15 	stw	zero,-4(fp)
 100cda4:	e0bfff17 	ldw	r2,-4(fp)
}
 100cda8:	e037883a 	mov	sp,fp
 100cdac:	df000017 	ldw	fp,0(sp)
 100cdb0:	dec00104 	addi	sp,sp,4
 100cdb4:	f800283a 	ret

0100cdb8 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 100cdb8:	defff904 	addi	sp,sp,-28
 100cdbc:	df000615 	stw	fp,24(sp)
 100cdc0:	df000604 	addi	fp,sp,24
 100cdc4:	e13ffb15 	stw	r4,-20(fp)
 100cdc8:	e17ffc15 	stw	r5,-16(fp)
 100cdcc:	e1bffd15 	stw	r6,-12(fp)
 100cdd0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 100cdd4:	e0bffb17 	ldw	r2,-20(fp)
 100cdd8:	10c00c17 	ldw	r3,48(r2)
 100cddc:	e0bffd17 	ldw	r2,-12(fp)
 100cde0:	10c0042e 	bgeu	r2,r3,100cdf4 <alt_up_char_buffer_string+0x3c>
 100cde4:	e0bffb17 	ldw	r2,-20(fp)
 100cde8:	10c00d17 	ldw	r3,52(r2)
 100cdec:	e0bffe17 	ldw	r2,-8(fp)
 100cdf0:	10c00336 	bltu	r2,r3,100ce00 <alt_up_char_buffer_string+0x48>
		return -1;
 100cdf4:	00bfffc4 	movi	r2,-1
 100cdf8:	e0bfff15 	stw	r2,-4(fp)
 100cdfc:	00002e06 	br	100ceb8 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 100ce00:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 100ce04:	e0bffb17 	ldw	r2,-20(fp)
 100ce08:	10801017 	ldw	r2,64(r2)
 100ce0c:	1007883a 	mov	r3,r2
 100ce10:	e0bffe17 	ldw	r2,-8(fp)
 100ce14:	10c6983a 	sll	r3,r2,r3
 100ce18:	e0bffd17 	ldw	r2,-12(fp)
 100ce1c:	1885883a 	add	r2,r3,r2
 100ce20:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 100ce24:	00001c06 	br	100ce98 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 100ce28:	e0bffb17 	ldw	r2,-20(fp)
 100ce2c:	10800b17 	ldw	r2,44(r2)
 100ce30:	1007883a 	mov	r3,r2
 100ce34:	e0bffa17 	ldw	r2,-24(fp)
 100ce38:	1889883a 	add	r4,r3,r2
 100ce3c:	e0bffc17 	ldw	r2,-16(fp)
 100ce40:	10800003 	ldbu	r2,0(r2)
 100ce44:	10c03fcc 	andi	r3,r2,255
 100ce48:	18c0201c 	xori	r3,r3,128
 100ce4c:	18ffe004 	addi	r3,r3,-128
 100ce50:	2005883a 	mov	r2,r4
 100ce54:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100ce58:	e0bffc17 	ldw	r2,-16(fp)
 100ce5c:	10800044 	addi	r2,r2,1
 100ce60:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 100ce64:	e0bffd17 	ldw	r2,-12(fp)
 100ce68:	10800044 	addi	r2,r2,1
 100ce6c:	e0bffd15 	stw	r2,-12(fp)
 100ce70:	e0bffb17 	ldw	r2,-20(fp)
 100ce74:	10c00c17 	ldw	r3,48(r2)
 100ce78:	e0bffd17 	ldw	r2,-12(fp)
 100ce7c:	10c00336 	bltu	r2,r3,100ce8c <alt_up_char_buffer_string+0xd4>
			return -1;
 100ce80:	00bfffc4 	movi	r2,-1
 100ce84:	e0bfff15 	stw	r2,-4(fp)
 100ce88:	00000b06 	br	100ceb8 <alt_up_char_buffer_string+0x100>
		++offset;
 100ce8c:	e0bffa17 	ldw	r2,-24(fp)
 100ce90:	10800044 	addi	r2,r2,1
 100ce94:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 100ce98:	e0bffc17 	ldw	r2,-16(fp)
 100ce9c:	10800003 	ldbu	r2,0(r2)
 100cea0:	10803fcc 	andi	r2,r2,255
 100cea4:	1080201c 	xori	r2,r2,128
 100cea8:	10bfe004 	addi	r2,r2,-128
 100ceac:	1004c03a 	cmpne	r2,r2,zero
 100ceb0:	103fdd1e 	bne	r2,zero,100ce28 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 100ceb4:	e03fff15 	stw	zero,-4(fp)
 100ceb8:	e0bfff17 	ldw	r2,-4(fp)
}
 100cebc:	e037883a 	mov	sp,fp
 100cec0:	df000017 	ldw	fp,0(sp)
 100cec4:	dec00104 	addi	sp,sp,4
 100cec8:	f800283a 	ret

0100cecc <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 100cecc:	defffe04 	addi	sp,sp,-8
 100ced0:	df000115 	stw	fp,4(sp)
 100ced4:	df000104 	addi	fp,sp,4
 100ced8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 100cedc:	e0bfff17 	ldw	r2,-4(fp)
 100cee0:	10800a17 	ldw	r2,40(r2)
 100cee4:	10800084 	addi	r2,r2,2
 100cee8:	1007883a 	mov	r3,r2
 100ceec:	00800044 	movi	r2,1
 100cef0:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 100cef4:	e0bfff17 	ldw	r2,-4(fp)
 100cef8:	10800a17 	ldw	r2,40(r2)
 100cefc:	10800084 	addi	r2,r2,2
 100cf00:	10800023 	ldbuio	r2,0(r2)
 100cf04:	1080004c 	andi	r2,r2,1
 100cf08:	10803fcc 	andi	r2,r2,255
 100cf0c:	1004c03a 	cmpne	r2,r2,zero
 100cf10:	103ff81e 	bne	r2,zero,100cef4 <alt_up_char_buffer_clear+0x28>
	return 0;
 100cf14:	0005883a 	mov	r2,zero
}
 100cf18:	e037883a 	mov	sp,fp
 100cf1c:	df000017 	ldw	fp,0(sp)
 100cf20:	dec00104 	addi	sp,sp,4
 100cf24:	f800283a 	ret

0100cf28 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100cf28:	defff404 	addi	sp,sp,-48
 100cf2c:	df000b15 	stw	fp,44(sp)
 100cf30:	df000b04 	addi	fp,sp,44
 100cf34:	e13ffb15 	stw	r4,-20(fp)
 100cf38:	e17ffc15 	stw	r5,-16(fp)
 100cf3c:	e1bffd15 	stw	r6,-12(fp)
 100cf40:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100cf44:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100cf48:	00804074 	movhi	r2,257
 100cf4c:	1088c304 	addi	r2,r2,8972
 100cf50:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100cf54:	1005003a 	cmpeq	r2,r2,zero
 100cf58:	1000411e 	bne	r2,zero,100d060 <alt_alarm_start+0x138>
  {
    if (alarm)
 100cf5c:	e0bffb17 	ldw	r2,-20(fp)
 100cf60:	1005003a 	cmpeq	r2,r2,zero
 100cf64:	10003b1e 	bne	r2,zero,100d054 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100cf68:	e0fffb17 	ldw	r3,-20(fp)
 100cf6c:	e0bffd17 	ldw	r2,-12(fp)
 100cf70:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100cf74:	e0fffb17 	ldw	r3,-20(fp)
 100cf78:	e0bffe17 	ldw	r2,-8(fp)
 100cf7c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cf80:	0005303a 	rdctl	r2,status
 100cf84:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cf88:	e0fff817 	ldw	r3,-32(fp)
 100cf8c:	00bfff84 	movi	r2,-2
 100cf90:	1884703a 	and	r2,r3,r2
 100cf94:	1001703a 	wrctl	status,r2
  
  return context;
 100cf98:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100cf9c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100cfa0:	00804074 	movhi	r2,257
 100cfa4:	1088c404 	addi	r2,r2,8976
 100cfa8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100cfac:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100cfb0:	e0fffc17 	ldw	r3,-16(fp)
 100cfb4:	e0bff917 	ldw	r2,-28(fp)
 100cfb8:	1885883a 	add	r2,r3,r2
 100cfbc:	10c00044 	addi	r3,r2,1
 100cfc0:	e0bffb17 	ldw	r2,-20(fp)
 100cfc4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100cfc8:	e0bffb17 	ldw	r2,-20(fp)
 100cfcc:	10c00217 	ldw	r3,8(r2)
 100cfd0:	e0bff917 	ldw	r2,-28(fp)
 100cfd4:	1880042e 	bgeu	r3,r2,100cfe8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 100cfd8:	e0fffb17 	ldw	r3,-20(fp)
 100cfdc:	00800044 	movi	r2,1
 100cfe0:	18800405 	stb	r2,16(r3)
 100cfe4:	00000206 	br	100cff0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 100cfe8:	e0bffb17 	ldw	r2,-20(fp)
 100cfec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100cff0:	e0fffb17 	ldw	r3,-20(fp)
 100cff4:	00804074 	movhi	r2,257
 100cff8:	1081e204 	addi	r2,r2,1928
 100cffc:	e0bff615 	stw	r2,-40(fp)
 100d000:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100d004:	e0fff717 	ldw	r3,-36(fp)
 100d008:	e0bff617 	ldw	r2,-40(fp)
 100d00c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100d010:	e0bff617 	ldw	r2,-40(fp)
 100d014:	10c00017 	ldw	r3,0(r2)
 100d018:	e0bff717 	ldw	r2,-36(fp)
 100d01c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100d020:	e0bff617 	ldw	r2,-40(fp)
 100d024:	10c00017 	ldw	r3,0(r2)
 100d028:	e0bff717 	ldw	r2,-36(fp)
 100d02c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100d030:	e0fff617 	ldw	r3,-40(fp)
 100d034:	e0bff717 	ldw	r2,-36(fp)
 100d038:	18800015 	stw	r2,0(r3)
 100d03c:	e0bffa17 	ldw	r2,-24(fp)
 100d040:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d044:	e0bff517 	ldw	r2,-44(fp)
 100d048:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100d04c:	e03fff15 	stw	zero,-4(fp)
 100d050:	00000506 	br	100d068 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 100d054:	00bffa84 	movi	r2,-22
 100d058:	e0bfff15 	stw	r2,-4(fp)
 100d05c:	00000206 	br	100d068 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 100d060:	00bfde84 	movi	r2,-134
 100d064:	e0bfff15 	stw	r2,-4(fp)
 100d068:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100d06c:	e037883a 	mov	sp,fp
 100d070:	df000017 	ldw	fp,0(sp)
 100d074:	dec00104 	addi	sp,sp,4
 100d078:	f800283a 	ret

0100d07c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 100d07c:	defffa04 	addi	sp,sp,-24
 100d080:	dfc00515 	stw	ra,20(sp)
 100d084:	df000415 	stw	fp,16(sp)
 100d088:	df000404 	addi	fp,sp,16
 100d08c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 100d090:	008000c4 	movi	r2,3
 100d094:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 100d098:	e0fffc17 	ldw	r3,-16(fp)
 100d09c:	008003f4 	movhi	r2,15
 100d0a0:	10909004 	addi	r2,r2,16960
 100d0a4:	188b383a 	mul	r5,r3,r2
 100d0a8:	0100bef4 	movhi	r4,763
 100d0ac:	213c2004 	addi	r4,r4,-3968
 100d0b0:	100a42c0 	call	100a42c <__udivsi3>
 100d0b4:	100b883a 	mov	r5,r2
 100d0b8:	01200034 	movhi	r4,32768
 100d0bc:	213fffc4 	addi	r4,r4,-1
 100d0c0:	100a42c0 	call	100a42c <__udivsi3>
 100d0c4:	100b883a 	mov	r5,r2
 100d0c8:	e13fff17 	ldw	r4,-4(fp)
 100d0cc:	100a42c0 	call	100a42c <__udivsi3>
 100d0d0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 100d0d4:	e0bffd17 	ldw	r2,-12(fp)
 100d0d8:	1005003a 	cmpeq	r2,r2,zero
 100d0dc:	1000281e 	bne	r2,zero,100d180 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 100d0e0:	e03ffe15 	stw	zero,-8(fp)
 100d0e4:	00001606 	br	100d140 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 100d0e8:	00a00034 	movhi	r2,32768
 100d0ec:	10bfffc4 	addi	r2,r2,-1
 100d0f0:	10bfffc4 	addi	r2,r2,-1
 100d0f4:	103ffe1e 	bne	r2,zero,100d0f0 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 100d0f8:	e0fffc17 	ldw	r3,-16(fp)
 100d0fc:	008003f4 	movhi	r2,15
 100d100:	10909004 	addi	r2,r2,16960
 100d104:	188b383a 	mul	r5,r3,r2
 100d108:	0100bef4 	movhi	r4,763
 100d10c:	213c2004 	addi	r4,r4,-3968
 100d110:	100a42c0 	call	100a42c <__udivsi3>
 100d114:	100b883a 	mov	r5,r2
 100d118:	01200034 	movhi	r4,32768
 100d11c:	213fffc4 	addi	r4,r4,-1
 100d120:	100a42c0 	call	100a42c <__udivsi3>
 100d124:	1007883a 	mov	r3,r2
 100d128:	e0bfff17 	ldw	r2,-4(fp)
 100d12c:	10c5c83a 	sub	r2,r2,r3
 100d130:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 100d134:	e0bffe17 	ldw	r2,-8(fp)
 100d138:	10800044 	addi	r2,r2,1
 100d13c:	e0bffe15 	stw	r2,-8(fp)
 100d140:	e0fffe17 	ldw	r3,-8(fp)
 100d144:	e0bffd17 	ldw	r2,-12(fp)
 100d148:	18bfe716 	blt	r3,r2,100d0e8 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 100d14c:	e0fffc17 	ldw	r3,-16(fp)
 100d150:	008003f4 	movhi	r2,15
 100d154:	10909004 	addi	r2,r2,16960
 100d158:	188b383a 	mul	r5,r3,r2
 100d15c:	0100bef4 	movhi	r4,763
 100d160:	213c2004 	addi	r4,r4,-3968
 100d164:	100a42c0 	call	100a42c <__udivsi3>
 100d168:	1007883a 	mov	r3,r2
 100d16c:	e0bfff17 	ldw	r2,-4(fp)
 100d170:	1885383a 	mul	r2,r3,r2
 100d174:	10bfffc4 	addi	r2,r2,-1
 100d178:	103ffe1e 	bne	r2,zero,100d174 <alt_busy_sleep+0xf8>
 100d17c:	00000c06 	br	100d1b0 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 100d180:	e0fffc17 	ldw	r3,-16(fp)
 100d184:	008003f4 	movhi	r2,15
 100d188:	10909004 	addi	r2,r2,16960
 100d18c:	188b383a 	mul	r5,r3,r2
 100d190:	0100bef4 	movhi	r4,763
 100d194:	213c2004 	addi	r4,r4,-3968
 100d198:	100a42c0 	call	100a42c <__udivsi3>
 100d19c:	1007883a 	mov	r3,r2
 100d1a0:	e0bfff17 	ldw	r2,-4(fp)
 100d1a4:	1885383a 	mul	r2,r3,r2
 100d1a8:	10bfffc4 	addi	r2,r2,-1
 100d1ac:	00bffe16 	blt	zero,r2,100d1a8 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 100d1b0:	0005883a 	mov	r2,zero
}
 100d1b4:	e037883a 	mov	sp,fp
 100d1b8:	dfc00117 	ldw	ra,4(sp)
 100d1bc:	df000017 	ldw	fp,0(sp)
 100d1c0:	dec00204 	addi	sp,sp,8
 100d1c4:	f800283a 	ret

0100d1c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100d1c8:	defffe04 	addi	sp,sp,-8
 100d1cc:	df000115 	stw	fp,4(sp)
 100d1d0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100d1d4:	e03fff15 	stw	zero,-4(fp)
 100d1d8:	00000506 	br	100d1f0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 100d1dc:	e0bfff17 	ldw	r2,-4(fp)
 100d1e0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100d1e4:	e0bfff17 	ldw	r2,-4(fp)
 100d1e8:	10800804 	addi	r2,r2,32
 100d1ec:	e0bfff15 	stw	r2,-4(fp)
 100d1f0:	e0bfff17 	ldw	r2,-4(fp)
 100d1f4:	10820030 	cmpltui	r2,r2,2048
 100d1f8:	103ff81e 	bne	r2,zero,100d1dc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100d1fc:	e037883a 	mov	sp,fp
 100d200:	df000017 	ldw	fp,0(sp)
 100d204:	dec00104 	addi	sp,sp,4
 100d208:	f800283a 	ret

0100d20c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100d20c:	defff904 	addi	sp,sp,-28
 100d210:	dfc00615 	stw	ra,24(sp)
 100d214:	df000515 	stw	fp,20(sp)
 100d218:	df000504 	addi	fp,sp,20
 100d21c:	e13ffd15 	stw	r4,-12(fp)
 100d220:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100d224:	e0bffd17 	ldw	r2,-12(fp)
 100d228:	1005003a 	cmpeq	r2,r2,zero
 100d22c:	1000041e 	bne	r2,zero,100d240 <alt_dev_llist_insert+0x34>
 100d230:	e0bffd17 	ldw	r2,-12(fp)
 100d234:	10800217 	ldw	r2,8(r2)
 100d238:	1004c03a 	cmpne	r2,r2,zero
 100d23c:	1000071e 	bne	r2,zero,100d25c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 100d240:	100d2c00 	call	100d2c0 <alt_get_errno>
 100d244:	1007883a 	mov	r3,r2
 100d248:	00800584 	movi	r2,22
 100d24c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100d250:	00bffa84 	movi	r2,-22
 100d254:	e0bfff15 	stw	r2,-4(fp)
 100d258:	00001306 	br	100d2a8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100d25c:	e0fffd17 	ldw	r3,-12(fp)
 100d260:	e0bffe17 	ldw	r2,-8(fp)
 100d264:	e0bffb15 	stw	r2,-20(fp)
 100d268:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100d26c:	e0fffc17 	ldw	r3,-16(fp)
 100d270:	e0bffb17 	ldw	r2,-20(fp)
 100d274:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100d278:	e0bffb17 	ldw	r2,-20(fp)
 100d27c:	10c00017 	ldw	r3,0(r2)
 100d280:	e0bffc17 	ldw	r2,-16(fp)
 100d284:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100d288:	e0bffb17 	ldw	r2,-20(fp)
 100d28c:	10c00017 	ldw	r3,0(r2)
 100d290:	e0bffc17 	ldw	r2,-16(fp)
 100d294:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100d298:	e0fffb17 	ldw	r3,-20(fp)
 100d29c:	e0bffc17 	ldw	r2,-16(fp)
 100d2a0:	18800015 	stw	r2,0(r3)

  return 0;  
 100d2a4:	e03fff15 	stw	zero,-4(fp)
 100d2a8:	e0bfff17 	ldw	r2,-4(fp)
}
 100d2ac:	e037883a 	mov	sp,fp
 100d2b0:	dfc00117 	ldw	ra,4(sp)
 100d2b4:	df000017 	ldw	fp,0(sp)
 100d2b8:	dec00204 	addi	sp,sp,8
 100d2bc:	f800283a 	ret

0100d2c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d2c0:	defffd04 	addi	sp,sp,-12
 100d2c4:	dfc00215 	stw	ra,8(sp)
 100d2c8:	df000115 	stw	fp,4(sp)
 100d2cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100d2d0:	00804074 	movhi	r2,257
 100d2d4:	1081e004 	addi	r2,r2,1920
 100d2d8:	10800017 	ldw	r2,0(r2)
 100d2dc:	1005003a 	cmpeq	r2,r2,zero
 100d2e0:	1000061e 	bne	r2,zero,100d2fc <alt_get_errno+0x3c>
 100d2e4:	00804074 	movhi	r2,257
 100d2e8:	1081e004 	addi	r2,r2,1920
 100d2ec:	10800017 	ldw	r2,0(r2)
 100d2f0:	103ee83a 	callr	r2
 100d2f4:	e0bfff15 	stw	r2,-4(fp)
 100d2f8:	00000306 	br	100d308 <alt_get_errno+0x48>
 100d2fc:	00804074 	movhi	r2,257
 100d300:	1088bf04 	addi	r2,r2,8956
 100d304:	e0bfff15 	stw	r2,-4(fp)
 100d308:	e0bfff17 	ldw	r2,-4(fp)
}
 100d30c:	e037883a 	mov	sp,fp
 100d310:	dfc00117 	ldw	ra,4(sp)
 100d314:	df000017 	ldw	fp,0(sp)
 100d318:	dec00204 	addi	sp,sp,8
 100d31c:	f800283a 	ret

0100d320 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100d320:	defffd04 	addi	sp,sp,-12
 100d324:	dfc00215 	stw	ra,8(sp)
 100d328:	df000115 	stw	fp,4(sp)
 100d32c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100d330:	00bfff04 	movi	r2,-4
 100d334:	00c04074 	movhi	r3,257
 100d338:	18f96c04 	addi	r3,r3,-6736
 100d33c:	1885883a 	add	r2,r3,r2
 100d340:	e0bfff15 	stw	r2,-4(fp)
 100d344:	00000606 	br	100d360 <_do_ctors+0x40>
        (*ctor) (); 
 100d348:	e0bfff17 	ldw	r2,-4(fp)
 100d34c:	10800017 	ldw	r2,0(r2)
 100d350:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100d354:	e0bfff17 	ldw	r2,-4(fp)
 100d358:	10bfff04 	addi	r2,r2,-4
 100d35c:	e0bfff15 	stw	r2,-4(fp)
 100d360:	e0ffff17 	ldw	r3,-4(fp)
 100d364:	00804074 	movhi	r2,257
 100d368:	10b96b04 	addi	r2,r2,-6740
 100d36c:	18bff62e 	bgeu	r3,r2,100d348 <_do_ctors+0x28>
        (*ctor) (); 
}
 100d370:	e037883a 	mov	sp,fp
 100d374:	dfc00117 	ldw	ra,4(sp)
 100d378:	df000017 	ldw	fp,0(sp)
 100d37c:	dec00204 	addi	sp,sp,8
 100d380:	f800283a 	ret

0100d384 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100d384:	defffd04 	addi	sp,sp,-12
 100d388:	dfc00215 	stw	ra,8(sp)
 100d38c:	df000115 	stw	fp,4(sp)
 100d390:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100d394:	00bfff04 	movi	r2,-4
 100d398:	00c04074 	movhi	r3,257
 100d39c:	18f96c04 	addi	r3,r3,-6736
 100d3a0:	1885883a 	add	r2,r3,r2
 100d3a4:	e0bfff15 	stw	r2,-4(fp)
 100d3a8:	00000606 	br	100d3c4 <_do_dtors+0x40>
        (*dtor) (); 
 100d3ac:	e0bfff17 	ldw	r2,-4(fp)
 100d3b0:	10800017 	ldw	r2,0(r2)
 100d3b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100d3b8:	e0bfff17 	ldw	r2,-4(fp)
 100d3bc:	10bfff04 	addi	r2,r2,-4
 100d3c0:	e0bfff15 	stw	r2,-4(fp)
 100d3c4:	e0ffff17 	ldw	r3,-4(fp)
 100d3c8:	00804074 	movhi	r2,257
 100d3cc:	10b96c04 	addi	r2,r2,-6736
 100d3d0:	18bff62e 	bgeu	r3,r2,100d3ac <_do_dtors+0x28>
        (*dtor) (); 
}
 100d3d4:	e037883a 	mov	sp,fp
 100d3d8:	dfc00117 	ldw	ra,4(sp)
 100d3dc:	df000017 	ldw	fp,0(sp)
 100d3e0:	dec00204 	addi	sp,sp,8
 100d3e4:	f800283a 	ret

0100d3e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100d3e8:	defff904 	addi	sp,sp,-28
 100d3ec:	dfc00615 	stw	ra,24(sp)
 100d3f0:	df000515 	stw	fp,20(sp)
 100d3f4:	df000504 	addi	fp,sp,20
 100d3f8:	e13ffd15 	stw	r4,-12(fp)
 100d3fc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100d400:	e0bffe17 	ldw	r2,-8(fp)
 100d404:	10800017 	ldw	r2,0(r2)
 100d408:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100d40c:	e13ffd17 	ldw	r4,-12(fp)
 100d410:	10014500 	call	1001450 <strlen>
 100d414:	10800044 	addi	r2,r2,1
 100d418:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100d41c:	00000d06 	br	100d454 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100d420:	e0bffc17 	ldw	r2,-16(fp)
 100d424:	11000217 	ldw	r4,8(r2)
 100d428:	e1bffb17 	ldw	r6,-20(fp)
 100d42c:	e17ffd17 	ldw	r5,-12(fp)
 100d430:	100de4c0 	call	100de4c <memcmp>
 100d434:	1004c03a 	cmpne	r2,r2,zero
 100d438:	1000031e 	bne	r2,zero,100d448 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100d43c:	e0bffc17 	ldw	r2,-16(fp)
 100d440:	e0bfff15 	stw	r2,-4(fp)
 100d444:	00000706 	br	100d464 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100d448:	e0bffc17 	ldw	r2,-16(fp)
 100d44c:	10800017 	ldw	r2,0(r2)
 100d450:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100d454:	e0fffe17 	ldw	r3,-8(fp)
 100d458:	e0bffc17 	ldw	r2,-16(fp)
 100d45c:	10fff01e 	bne	r2,r3,100d420 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100d460:	e03fff15 	stw	zero,-4(fp)
 100d464:	e0bfff17 	ldw	r2,-4(fp)
}
 100d468:	e037883a 	mov	sp,fp
 100d46c:	dfc00117 	ldw	ra,4(sp)
 100d470:	df000017 	ldw	fp,0(sp)
 100d474:	dec00204 	addi	sp,sp,8
 100d478:	f800283a 	ret

0100d47c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100d47c:	defffe04 	addi	sp,sp,-8
 100d480:	dfc00115 	stw	ra,4(sp)
 100d484:	df000015 	stw	fp,0(sp)
 100d488:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 100d48c:	0009883a 	mov	r4,zero
 100d490:	01440004 	movi	r5,4096
 100d494:	100dd700 	call	100dd70 <alt_icache_flush>
#endif
}
 100d498:	e037883a 	mov	sp,fp
 100d49c:	dfc00117 	ldw	ra,4(sp)
 100d4a0:	df000017 	ldw	fp,0(sp)
 100d4a4:	dec00204 	addi	sp,sp,8
 100d4a8:	f800283a 	ret

0100d4ac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100d4ac:	defff904 	addi	sp,sp,-28
 100d4b0:	dfc00615 	stw	ra,24(sp)
 100d4b4:	df000515 	stw	fp,20(sp)
 100d4b8:	df000504 	addi	fp,sp,20
 100d4bc:	e13ffc15 	stw	r4,-16(fp)
 100d4c0:	e17ffd15 	stw	r5,-12(fp)
 100d4c4:	e1bffe15 	stw	r6,-8(fp)
 100d4c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 100d4cc:	e0800217 	ldw	r2,8(fp)
 100d4d0:	d8800015 	stw	r2,0(sp)
 100d4d4:	e13ffc17 	ldw	r4,-16(fp)
 100d4d8:	e17ffd17 	ldw	r5,-12(fp)
 100d4dc:	e1bffe17 	ldw	r6,-8(fp)
 100d4e0:	e1ffff17 	ldw	r7,-4(fp)
 100d4e4:	100d6800 	call	100d680 <alt_iic_isr_register>
}  
 100d4e8:	e037883a 	mov	sp,fp
 100d4ec:	dfc00117 	ldw	ra,4(sp)
 100d4f0:	df000017 	ldw	fp,0(sp)
 100d4f4:	dec00204 	addi	sp,sp,8
 100d4f8:	f800283a 	ret

0100d4fc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 100d4fc:	defff904 	addi	sp,sp,-28
 100d500:	df000615 	stw	fp,24(sp)
 100d504:	df000604 	addi	fp,sp,24
 100d508:	e13ffe15 	stw	r4,-8(fp)
 100d50c:	e17fff15 	stw	r5,-4(fp)
 100d510:	e0bfff17 	ldw	r2,-4(fp)
 100d514:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d518:	0005303a 	rdctl	r2,status
 100d51c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d520:	e0fffb17 	ldw	r3,-20(fp)
 100d524:	00bfff84 	movi	r2,-2
 100d528:	1884703a 	and	r2,r3,r2
 100d52c:	1001703a 	wrctl	status,r2
  
  return context;
 100d530:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100d534:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 100d538:	e0fffc17 	ldw	r3,-16(fp)
 100d53c:	00800044 	movi	r2,1
 100d540:	10c4983a 	sll	r2,r2,r3
 100d544:	1007883a 	mov	r3,r2
 100d548:	00804074 	movhi	r2,257
 100d54c:	1088c704 	addi	r2,r2,8988
 100d550:	10800017 	ldw	r2,0(r2)
 100d554:	1886b03a 	or	r3,r3,r2
 100d558:	00804074 	movhi	r2,257
 100d55c:	1088c704 	addi	r2,r2,8988
 100d560:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100d564:	00804074 	movhi	r2,257
 100d568:	1088c704 	addi	r2,r2,8988
 100d56c:	10800017 	ldw	r2,0(r2)
 100d570:	100170fa 	wrctl	ienable,r2
 100d574:	e0bffd17 	ldw	r2,-12(fp)
 100d578:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d57c:	e0bffa17 	ldw	r2,-24(fp)
 100d580:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100d584:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 100d588:	e037883a 	mov	sp,fp
 100d58c:	df000017 	ldw	fp,0(sp)
 100d590:	dec00104 	addi	sp,sp,4
 100d594:	f800283a 	ret

0100d598 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100d598:	defff904 	addi	sp,sp,-28
 100d59c:	df000615 	stw	fp,24(sp)
 100d5a0:	df000604 	addi	fp,sp,24
 100d5a4:	e13ffe15 	stw	r4,-8(fp)
 100d5a8:	e17fff15 	stw	r5,-4(fp)
 100d5ac:	e0bfff17 	ldw	r2,-4(fp)
 100d5b0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d5b4:	0005303a 	rdctl	r2,status
 100d5b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d5bc:	e0fffb17 	ldw	r3,-20(fp)
 100d5c0:	00bfff84 	movi	r2,-2
 100d5c4:	1884703a 	and	r2,r3,r2
 100d5c8:	1001703a 	wrctl	status,r2
  
  return context;
 100d5cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100d5d0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 100d5d4:	e0fffc17 	ldw	r3,-16(fp)
 100d5d8:	00800044 	movi	r2,1
 100d5dc:	10c4983a 	sll	r2,r2,r3
 100d5e0:	0084303a 	nor	r2,zero,r2
 100d5e4:	1007883a 	mov	r3,r2
 100d5e8:	00804074 	movhi	r2,257
 100d5ec:	1088c704 	addi	r2,r2,8988
 100d5f0:	10800017 	ldw	r2,0(r2)
 100d5f4:	1886703a 	and	r3,r3,r2
 100d5f8:	00804074 	movhi	r2,257
 100d5fc:	1088c704 	addi	r2,r2,8988
 100d600:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100d604:	00804074 	movhi	r2,257
 100d608:	1088c704 	addi	r2,r2,8988
 100d60c:	10800017 	ldw	r2,0(r2)
 100d610:	100170fa 	wrctl	ienable,r2
 100d614:	e0bffd17 	ldw	r2,-12(fp)
 100d618:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d61c:	e0bffa17 	ldw	r2,-24(fp)
 100d620:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100d624:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 100d628:	e037883a 	mov	sp,fp
 100d62c:	df000017 	ldw	fp,0(sp)
 100d630:	dec00104 	addi	sp,sp,4
 100d634:	f800283a 	ret

0100d638 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100d638:	defffc04 	addi	sp,sp,-16
 100d63c:	df000315 	stw	fp,12(sp)
 100d640:	df000304 	addi	fp,sp,12
 100d644:	e13ffe15 	stw	r4,-8(fp)
 100d648:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 100d64c:	000530fa 	rdctl	r2,ienable
 100d650:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 100d654:	e0ffff17 	ldw	r3,-4(fp)
 100d658:	00800044 	movi	r2,1
 100d65c:	10c4983a 	sll	r2,r2,r3
 100d660:	1007883a 	mov	r3,r2
 100d664:	e0bffd17 	ldw	r2,-12(fp)
 100d668:	1884703a 	and	r2,r3,r2
 100d66c:	1004c03a 	cmpne	r2,r2,zero
}
 100d670:	e037883a 	mov	sp,fp
 100d674:	df000017 	ldw	fp,0(sp)
 100d678:	dec00104 	addi	sp,sp,4
 100d67c:	f800283a 	ret

0100d680 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100d680:	defff404 	addi	sp,sp,-48
 100d684:	dfc00b15 	stw	ra,44(sp)
 100d688:	df000a15 	stw	fp,40(sp)
 100d68c:	df000a04 	addi	fp,sp,40
 100d690:	e13ffb15 	stw	r4,-20(fp)
 100d694:	e17ffc15 	stw	r5,-16(fp)
 100d698:	e1bffd15 	stw	r6,-12(fp)
 100d69c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 100d6a0:	00bffa84 	movi	r2,-22
 100d6a4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100d6a8:	e0bffc17 	ldw	r2,-16(fp)
 100d6ac:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100d6b0:	e0bff917 	ldw	r2,-28(fp)
 100d6b4:	10800808 	cmpgei	r2,r2,32
 100d6b8:	1000291e 	bne	r2,zero,100d760 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d6bc:	0005303a 	rdctl	r2,status
 100d6c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d6c4:	e0fff717 	ldw	r3,-36(fp)
 100d6c8:	00bfff84 	movi	r2,-2
 100d6cc:	1884703a 	and	r2,r3,r2
 100d6d0:	1001703a 	wrctl	status,r2
  
  return context;
 100d6d4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 100d6d8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 100d6dc:	e0bff917 	ldw	r2,-28(fp)
 100d6e0:	00c04074 	movhi	r3,257
 100d6e4:	18c8d204 	addi	r3,r3,9032
 100d6e8:	100490fa 	slli	r2,r2,3
 100d6ec:	10c7883a 	add	r3,r2,r3
 100d6f0:	e0bffd17 	ldw	r2,-12(fp)
 100d6f4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 100d6f8:	e0bff917 	ldw	r2,-28(fp)
 100d6fc:	00c04074 	movhi	r3,257
 100d700:	18c8d204 	addi	r3,r3,9032
 100d704:	100490fa 	slli	r2,r2,3
 100d708:	10c5883a 	add	r2,r2,r3
 100d70c:	10c00104 	addi	r3,r2,4
 100d710:	e0bffe17 	ldw	r2,-8(fp)
 100d714:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100d718:	e0bffd17 	ldw	r2,-12(fp)
 100d71c:	1005003a 	cmpeq	r2,r2,zero
 100d720:	1000051e 	bne	r2,zero,100d738 <alt_iic_isr_register+0xb8>
 100d724:	e17ff917 	ldw	r5,-28(fp)
 100d728:	e13ffb17 	ldw	r4,-20(fp)
 100d72c:	100d4fc0 	call	100d4fc <alt_ic_irq_enable>
 100d730:	e0bfff15 	stw	r2,-4(fp)
 100d734:	00000406 	br	100d748 <alt_iic_isr_register+0xc8>
 100d738:	e17ff917 	ldw	r5,-28(fp)
 100d73c:	e13ffb17 	ldw	r4,-20(fp)
 100d740:	100d5980 	call	100d598 <alt_ic_irq_disable>
 100d744:	e0bfff15 	stw	r2,-4(fp)
 100d748:	e0bfff17 	ldw	r2,-4(fp)
 100d74c:	e0bffa15 	stw	r2,-24(fp)
 100d750:	e0bff817 	ldw	r2,-32(fp)
 100d754:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d758:	e0bff617 	ldw	r2,-40(fp)
 100d75c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 100d760:	e0bffa17 	ldw	r2,-24(fp)
}
 100d764:	e037883a 	mov	sp,fp
 100d768:	dfc00117 	ldw	ra,4(sp)
 100d76c:	df000017 	ldw	fp,0(sp)
 100d770:	dec00204 	addi	sp,sp,8
 100d774:	f800283a 	ret

0100d778 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100d778:	defff904 	addi	sp,sp,-28
 100d77c:	dfc00615 	stw	ra,24(sp)
 100d780:	df000515 	stw	fp,20(sp)
 100d784:	df000504 	addi	fp,sp,20
 100d788:	e13ffc15 	stw	r4,-16(fp)
 100d78c:	e17ffd15 	stw	r5,-12(fp)
 100d790:	e1bffe15 	stw	r6,-8(fp)
 100d794:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100d798:	e13ffd17 	ldw	r4,-12(fp)
 100d79c:	e17ffe17 	ldw	r5,-8(fp)
 100d7a0:	e1bfff17 	ldw	r6,-4(fp)
 100d7a4:	100d9900 	call	100d990 <open>
 100d7a8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100d7ac:	e0bffb17 	ldw	r2,-20(fp)
 100d7b0:	1004803a 	cmplt	r2,r2,zero
 100d7b4:	10001c1e 	bne	r2,zero,100d828 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 100d7b8:	e0bffb17 	ldw	r2,-20(fp)
 100d7bc:	00c04074 	movhi	r3,257
 100d7c0:	18fd2004 	addi	r3,r3,-2944
 100d7c4:	10800324 	muli	r2,r2,12
 100d7c8:	10c5883a 	add	r2,r2,r3
 100d7cc:	10c00017 	ldw	r3,0(r2)
 100d7d0:	e0bffc17 	ldw	r2,-16(fp)
 100d7d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100d7d8:	e0bffb17 	ldw	r2,-20(fp)
 100d7dc:	00c04074 	movhi	r3,257
 100d7e0:	18fd2004 	addi	r3,r3,-2944
 100d7e4:	10800324 	muli	r2,r2,12
 100d7e8:	10c5883a 	add	r2,r2,r3
 100d7ec:	10800104 	addi	r2,r2,4
 100d7f0:	10c00017 	ldw	r3,0(r2)
 100d7f4:	e0bffc17 	ldw	r2,-16(fp)
 100d7f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100d7fc:	e0bffb17 	ldw	r2,-20(fp)
 100d800:	00c04074 	movhi	r3,257
 100d804:	18fd2004 	addi	r3,r3,-2944
 100d808:	10800324 	muli	r2,r2,12
 100d80c:	10c5883a 	add	r2,r2,r3
 100d810:	10800204 	addi	r2,r2,8
 100d814:	10c00017 	ldw	r3,0(r2)
 100d818:	e0bffc17 	ldw	r2,-16(fp)
 100d81c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100d820:	e13ffb17 	ldw	r4,-20(fp)
 100d824:	100b1b00 	call	100b1b0 <alt_release_fd>
  }
} 
 100d828:	e037883a 	mov	sp,fp
 100d82c:	dfc00117 	ldw	ra,4(sp)
 100d830:	df000017 	ldw	fp,0(sp)
 100d834:	dec00204 	addi	sp,sp,8
 100d838:	f800283a 	ret

0100d83c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100d83c:	defffb04 	addi	sp,sp,-20
 100d840:	dfc00415 	stw	ra,16(sp)
 100d844:	df000315 	stw	fp,12(sp)
 100d848:	df000304 	addi	fp,sp,12
 100d84c:	e13ffd15 	stw	r4,-12(fp)
 100d850:	e17ffe15 	stw	r5,-8(fp)
 100d854:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100d858:	01004074 	movhi	r4,257
 100d85c:	213d2304 	addi	r4,r4,-2932
 100d860:	e17ffd17 	ldw	r5,-12(fp)
 100d864:	01800044 	movi	r6,1
 100d868:	01c07fc4 	movi	r7,511
 100d86c:	100d7780 	call	100d778 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100d870:	01004074 	movhi	r4,257
 100d874:	213d2004 	addi	r4,r4,-2944
 100d878:	e17ffe17 	ldw	r5,-8(fp)
 100d87c:	000d883a 	mov	r6,zero
 100d880:	01c07fc4 	movi	r7,511
 100d884:	100d7780 	call	100d778 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100d888:	01004074 	movhi	r4,257
 100d88c:	213d2604 	addi	r4,r4,-2920
 100d890:	e17fff17 	ldw	r5,-4(fp)
 100d894:	01800044 	movi	r6,1
 100d898:	01c07fc4 	movi	r7,511
 100d89c:	100d7780 	call	100d778 <alt_open_fd>
}  
 100d8a0:	e037883a 	mov	sp,fp
 100d8a4:	dfc00117 	ldw	ra,4(sp)
 100d8a8:	df000017 	ldw	fp,0(sp)
 100d8ac:	dec00204 	addi	sp,sp,8
 100d8b0:	f800283a 	ret

0100d8b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100d8b4:	defffc04 	addi	sp,sp,-16
 100d8b8:	df000315 	stw	fp,12(sp)
 100d8bc:	df000304 	addi	fp,sp,12
 100d8c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100d8c4:	e0bffe17 	ldw	r2,-8(fp)
 100d8c8:	10800217 	ldw	r2,8(r2)
 100d8cc:	10d00034 	orhi	r3,r2,16384
 100d8d0:	e0bffe17 	ldw	r2,-8(fp)
 100d8d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100d8d8:	e03ffd15 	stw	zero,-12(fp)
 100d8dc:	00002006 	br	100d960 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100d8e0:	e0bffd17 	ldw	r2,-12(fp)
 100d8e4:	00c04074 	movhi	r3,257
 100d8e8:	18fd2004 	addi	r3,r3,-2944
 100d8ec:	10800324 	muli	r2,r2,12
 100d8f0:	10c5883a 	add	r2,r2,r3
 100d8f4:	10c00017 	ldw	r3,0(r2)
 100d8f8:	e0bffe17 	ldw	r2,-8(fp)
 100d8fc:	10800017 	ldw	r2,0(r2)
 100d900:	1880141e 	bne	r3,r2,100d954 <alt_file_locked+0xa0>
 100d904:	e0bffd17 	ldw	r2,-12(fp)
 100d908:	00c04074 	movhi	r3,257
 100d90c:	18fd2004 	addi	r3,r3,-2944
 100d910:	10800324 	muli	r2,r2,12
 100d914:	10c5883a 	add	r2,r2,r3
 100d918:	10800204 	addi	r2,r2,8
 100d91c:	10800017 	ldw	r2,0(r2)
 100d920:	1004403a 	cmpge	r2,r2,zero
 100d924:	10000b1e 	bne	r2,zero,100d954 <alt_file_locked+0xa0>
 100d928:	e0bffd17 	ldw	r2,-12(fp)
 100d92c:	10800324 	muli	r2,r2,12
 100d930:	1007883a 	mov	r3,r2
 100d934:	00804074 	movhi	r2,257
 100d938:	10bd2004 	addi	r2,r2,-2944
 100d93c:	1887883a 	add	r3,r3,r2
 100d940:	e0bffe17 	ldw	r2,-8(fp)
 100d944:	18800326 	beq	r3,r2,100d954 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100d948:	00bffcc4 	movi	r2,-13
 100d94c:	e0bfff15 	stw	r2,-4(fp)
 100d950:	00000a06 	br	100d97c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100d954:	e0bffd17 	ldw	r2,-12(fp)
 100d958:	10800044 	addi	r2,r2,1
 100d95c:	e0bffd15 	stw	r2,-12(fp)
 100d960:	00804074 	movhi	r2,257
 100d964:	1081df04 	addi	r2,r2,1916
 100d968:	10800017 	ldw	r2,0(r2)
 100d96c:	1007883a 	mov	r3,r2
 100d970:	e0bffd17 	ldw	r2,-12(fp)
 100d974:	18bfda2e 	bgeu	r3,r2,100d8e0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100d978:	e03fff15 	stw	zero,-4(fp)
 100d97c:	e0bfff17 	ldw	r2,-4(fp)
}
 100d980:	e037883a 	mov	sp,fp
 100d984:	df000017 	ldw	fp,0(sp)
 100d988:	dec00104 	addi	sp,sp,4
 100d98c:	f800283a 	ret

0100d990 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100d990:	defff404 	addi	sp,sp,-48
 100d994:	dfc00b15 	stw	ra,44(sp)
 100d998:	df000a15 	stw	fp,40(sp)
 100d99c:	df000a04 	addi	fp,sp,40
 100d9a0:	e13ffb15 	stw	r4,-20(fp)
 100d9a4:	e17ffc15 	stw	r5,-16(fp)
 100d9a8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100d9ac:	00bfffc4 	movi	r2,-1
 100d9b0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 100d9b4:	00bffb44 	movi	r2,-19
 100d9b8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 100d9bc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100d9c0:	e13ffb17 	ldw	r4,-20(fp)
 100d9c4:	01404074 	movhi	r5,257
 100d9c8:	2941dd04 	addi	r5,r5,1908
 100d9cc:	100d3e80 	call	100d3e8 <alt_find_dev>
 100d9d0:	e0bffa15 	stw	r2,-24(fp)
 100d9d4:	e0bffa17 	ldw	r2,-24(fp)
 100d9d8:	1004c03a 	cmpne	r2,r2,zero
 100d9dc:	1000051e 	bne	r2,zero,100d9f4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100d9e0:	e13ffb17 	ldw	r4,-20(fp)
 100d9e4:	100db980 	call	100db98 <alt_find_file>
 100d9e8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 100d9ec:	00800044 	movi	r2,1
 100d9f0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100d9f4:	e0bffa17 	ldw	r2,-24(fp)
 100d9f8:	1005003a 	cmpeq	r2,r2,zero
 100d9fc:	1000301e 	bne	r2,zero,100dac0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100da00:	e13ffa17 	ldw	r4,-24(fp)
 100da04:	100dcb80 	call	100dcb8 <alt_get_fd>
 100da08:	e0bff815 	stw	r2,-32(fp)
 100da0c:	e0bff817 	ldw	r2,-32(fp)
 100da10:	1004403a 	cmpge	r2,r2,zero
 100da14:	1000031e 	bne	r2,zero,100da24 <open+0x94>
    {
      status = index;
 100da18:	e0bff817 	ldw	r2,-32(fp)
 100da1c:	e0bff715 	stw	r2,-36(fp)
 100da20:	00002906 	br	100dac8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 100da24:	e0bff817 	ldw	r2,-32(fp)
 100da28:	10800324 	muli	r2,r2,12
 100da2c:	1007883a 	mov	r3,r2
 100da30:	00804074 	movhi	r2,257
 100da34:	10bd2004 	addi	r2,r2,-2944
 100da38:	1885883a 	add	r2,r3,r2
 100da3c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100da40:	e0fffc17 	ldw	r3,-16(fp)
 100da44:	00900034 	movhi	r2,16384
 100da48:	10bfffc4 	addi	r2,r2,-1
 100da4c:	1886703a 	and	r3,r3,r2
 100da50:	e0bff917 	ldw	r2,-28(fp)
 100da54:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100da58:	e0bff617 	ldw	r2,-40(fp)
 100da5c:	1004c03a 	cmpne	r2,r2,zero
 100da60:	1000061e 	bne	r2,zero,100da7c <open+0xec>
 100da64:	e13ff917 	ldw	r4,-28(fp)
 100da68:	100d8b40 	call	100d8b4 <alt_file_locked>
 100da6c:	e0bff715 	stw	r2,-36(fp)
 100da70:	e0bff717 	ldw	r2,-36(fp)
 100da74:	1004803a 	cmplt	r2,r2,zero
 100da78:	1000131e 	bne	r2,zero,100dac8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100da7c:	e0bffa17 	ldw	r2,-24(fp)
 100da80:	10800317 	ldw	r2,12(r2)
 100da84:	1005003a 	cmpeq	r2,r2,zero
 100da88:	1000091e 	bne	r2,zero,100dab0 <open+0x120>
 100da8c:	e0bffa17 	ldw	r2,-24(fp)
 100da90:	10800317 	ldw	r2,12(r2)
 100da94:	e13ff917 	ldw	r4,-28(fp)
 100da98:	e17ffb17 	ldw	r5,-20(fp)
 100da9c:	e1bffc17 	ldw	r6,-16(fp)
 100daa0:	e1fffd17 	ldw	r7,-12(fp)
 100daa4:	103ee83a 	callr	r2
 100daa8:	e0bfff15 	stw	r2,-4(fp)
 100daac:	00000106 	br	100dab4 <open+0x124>
 100dab0:	e03fff15 	stw	zero,-4(fp)
 100dab4:	e0bfff17 	ldw	r2,-4(fp)
 100dab8:	e0bff715 	stw	r2,-36(fp)
 100dabc:	00000206 	br	100dac8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100dac0:	00bffb44 	movi	r2,-19
 100dac4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100dac8:	e0bff717 	ldw	r2,-36(fp)
 100dacc:	1004403a 	cmpge	r2,r2,zero
 100dad0:	1000091e 	bne	r2,zero,100daf8 <open+0x168>
  {
    alt_release_fd (index);  
 100dad4:	e13ff817 	ldw	r4,-32(fp)
 100dad8:	100b1b00 	call	100b1b0 <alt_release_fd>
    ALT_ERRNO = -status;
 100dadc:	100db180 	call	100db18 <alt_get_errno>
 100dae0:	e0fff717 	ldw	r3,-36(fp)
 100dae4:	00c7c83a 	sub	r3,zero,r3
 100dae8:	10c00015 	stw	r3,0(r2)
    return -1;
 100daec:	00bfffc4 	movi	r2,-1
 100daf0:	e0bffe15 	stw	r2,-8(fp)
 100daf4:	00000206 	br	100db00 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 100daf8:	e0bff817 	ldw	r2,-32(fp)
 100dafc:	e0bffe15 	stw	r2,-8(fp)
 100db00:	e0bffe17 	ldw	r2,-8(fp)
}
 100db04:	e037883a 	mov	sp,fp
 100db08:	dfc00117 	ldw	ra,4(sp)
 100db0c:	df000017 	ldw	fp,0(sp)
 100db10:	dec00204 	addi	sp,sp,8
 100db14:	f800283a 	ret

0100db18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100db18:	defffd04 	addi	sp,sp,-12
 100db1c:	dfc00215 	stw	ra,8(sp)
 100db20:	df000115 	stw	fp,4(sp)
 100db24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100db28:	00804074 	movhi	r2,257
 100db2c:	1081e004 	addi	r2,r2,1920
 100db30:	10800017 	ldw	r2,0(r2)
 100db34:	1005003a 	cmpeq	r2,r2,zero
 100db38:	1000061e 	bne	r2,zero,100db54 <alt_get_errno+0x3c>
 100db3c:	00804074 	movhi	r2,257
 100db40:	1081e004 	addi	r2,r2,1920
 100db44:	10800017 	ldw	r2,0(r2)
 100db48:	103ee83a 	callr	r2
 100db4c:	e0bfff15 	stw	r2,-4(fp)
 100db50:	00000306 	br	100db60 <alt_get_errno+0x48>
 100db54:	00804074 	movhi	r2,257
 100db58:	1088bf04 	addi	r2,r2,8956
 100db5c:	e0bfff15 	stw	r2,-4(fp)
 100db60:	e0bfff17 	ldw	r2,-4(fp)
}
 100db64:	e037883a 	mov	sp,fp
 100db68:	dfc00117 	ldw	ra,4(sp)
 100db6c:	df000017 	ldw	fp,0(sp)
 100db70:	dec00204 	addi	sp,sp,8
 100db74:	f800283a 	ret

0100db78 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 100db78:	deffff04 	addi	sp,sp,-4
 100db7c:	df000015 	stw	fp,0(sp)
 100db80:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100db84:	000170fa 	wrctl	ienable,zero
}
 100db88:	e037883a 	mov	sp,fp
 100db8c:	df000017 	ldw	fp,0(sp)
 100db90:	dec00104 	addi	sp,sp,4
 100db94:	f800283a 	ret

0100db98 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100db98:	defffa04 	addi	sp,sp,-24
 100db9c:	dfc00515 	stw	ra,20(sp)
 100dba0:	df000415 	stw	fp,16(sp)
 100dba4:	df000404 	addi	fp,sp,16
 100dba8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100dbac:	00804074 	movhi	r2,257
 100dbb0:	1081db04 	addi	r2,r2,1900
 100dbb4:	10800017 	ldw	r2,0(r2)
 100dbb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100dbbc:	00003306 	br	100dc8c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 100dbc0:	e0bffd17 	ldw	r2,-12(fp)
 100dbc4:	11000217 	ldw	r4,8(r2)
 100dbc8:	10014500 	call	1001450 <strlen>
 100dbcc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 100dbd0:	e0bffd17 	ldw	r2,-12(fp)
 100dbd4:	10c00217 	ldw	r3,8(r2)
 100dbd8:	e0bffc17 	ldw	r2,-16(fp)
 100dbdc:	1885883a 	add	r2,r3,r2
 100dbe0:	10bfffc4 	addi	r2,r2,-1
 100dbe4:	10800003 	ldbu	r2,0(r2)
 100dbe8:	10803fcc 	andi	r2,r2,255
 100dbec:	1080201c 	xori	r2,r2,128
 100dbf0:	10bfe004 	addi	r2,r2,-128
 100dbf4:	10800bd8 	cmpnei	r2,r2,47
 100dbf8:	1000031e 	bne	r2,zero,100dc08 <alt_find_file+0x70>
    {
      len -= 1;
 100dbfc:	e0bffc17 	ldw	r2,-16(fp)
 100dc00:	10bfffc4 	addi	r2,r2,-1
 100dc04:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100dc08:	e0bffc17 	ldw	r2,-16(fp)
 100dc0c:	1007883a 	mov	r3,r2
 100dc10:	e0bffe17 	ldw	r2,-8(fp)
 100dc14:	1885883a 	add	r2,r3,r2
 100dc18:	10800003 	ldbu	r2,0(r2)
 100dc1c:	10803fcc 	andi	r2,r2,255
 100dc20:	1080201c 	xori	r2,r2,128
 100dc24:	10bfe004 	addi	r2,r2,-128
 100dc28:	10800be0 	cmpeqi	r2,r2,47
 100dc2c:	10000a1e 	bne	r2,zero,100dc58 <alt_find_file+0xc0>
 100dc30:	e0bffc17 	ldw	r2,-16(fp)
 100dc34:	1007883a 	mov	r3,r2
 100dc38:	e0bffe17 	ldw	r2,-8(fp)
 100dc3c:	1885883a 	add	r2,r3,r2
 100dc40:	10800003 	ldbu	r2,0(r2)
 100dc44:	10803fcc 	andi	r2,r2,255
 100dc48:	1080201c 	xori	r2,r2,128
 100dc4c:	10bfe004 	addi	r2,r2,-128
 100dc50:	1004c03a 	cmpne	r2,r2,zero
 100dc54:	10000a1e 	bne	r2,zero,100dc80 <alt_find_file+0xe8>
 100dc58:	e0bffd17 	ldw	r2,-12(fp)
 100dc5c:	11000217 	ldw	r4,8(r2)
 100dc60:	e1bffc17 	ldw	r6,-16(fp)
 100dc64:	e17ffe17 	ldw	r5,-8(fp)
 100dc68:	100de4c0 	call	100de4c <memcmp>
 100dc6c:	1004c03a 	cmpne	r2,r2,zero
 100dc70:	1000031e 	bne	r2,zero,100dc80 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100dc74:	e0bffd17 	ldw	r2,-12(fp)
 100dc78:	e0bfff15 	stw	r2,-4(fp)
 100dc7c:	00000806 	br	100dca0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 100dc80:	e0bffd17 	ldw	r2,-12(fp)
 100dc84:	10800017 	ldw	r2,0(r2)
 100dc88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100dc8c:	00c04074 	movhi	r3,257
 100dc90:	18c1db04 	addi	r3,r3,1900
 100dc94:	e0bffd17 	ldw	r2,-12(fp)
 100dc98:	10ffc91e 	bne	r2,r3,100dbc0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100dc9c:	e03fff15 	stw	zero,-4(fp)
 100dca0:	e0bfff17 	ldw	r2,-4(fp)
}
 100dca4:	e037883a 	mov	sp,fp
 100dca8:	dfc00117 	ldw	ra,4(sp)
 100dcac:	df000017 	ldw	fp,0(sp)
 100dcb0:	dec00204 	addi	sp,sp,8
 100dcb4:	f800283a 	ret

0100dcb8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100dcb8:	defffc04 	addi	sp,sp,-16
 100dcbc:	df000315 	stw	fp,12(sp)
 100dcc0:	df000304 	addi	fp,sp,12
 100dcc4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100dcc8:	00bffa04 	movi	r2,-24
 100dccc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100dcd0:	e03ffe15 	stw	zero,-8(fp)
 100dcd4:	00001e06 	br	100dd50 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 100dcd8:	e0bffe17 	ldw	r2,-8(fp)
 100dcdc:	00c04074 	movhi	r3,257
 100dce0:	18fd2004 	addi	r3,r3,-2944
 100dce4:	10800324 	muli	r2,r2,12
 100dce8:	10c5883a 	add	r2,r2,r3
 100dcec:	10800017 	ldw	r2,0(r2)
 100dcf0:	1004c03a 	cmpne	r2,r2,zero
 100dcf4:	1000131e 	bne	r2,zero,100dd44 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 100dcf8:	e0bffe17 	ldw	r2,-8(fp)
 100dcfc:	00c04074 	movhi	r3,257
 100dd00:	18fd2004 	addi	r3,r3,-2944
 100dd04:	10800324 	muli	r2,r2,12
 100dd08:	10c7883a 	add	r3,r2,r3
 100dd0c:	e0bfff17 	ldw	r2,-4(fp)
 100dd10:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 100dd14:	00804074 	movhi	r2,257
 100dd18:	1081df04 	addi	r2,r2,1916
 100dd1c:	10c00017 	ldw	r3,0(r2)
 100dd20:	e0bffe17 	ldw	r2,-8(fp)
 100dd24:	1880040e 	bge	r3,r2,100dd38 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 100dd28:	00c04074 	movhi	r3,257
 100dd2c:	18c1df04 	addi	r3,r3,1916
 100dd30:	e0bffe17 	ldw	r2,-8(fp)
 100dd34:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 100dd38:	e0bffe17 	ldw	r2,-8(fp)
 100dd3c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 100dd40:	00000606 	br	100dd5c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100dd44:	e0bffe17 	ldw	r2,-8(fp)
 100dd48:	10800044 	addi	r2,r2,1
 100dd4c:	e0bffe15 	stw	r2,-8(fp)
 100dd50:	e0bffe17 	ldw	r2,-8(fp)
 100dd54:	10800810 	cmplti	r2,r2,32
 100dd58:	103fdf1e 	bne	r2,zero,100dcd8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100dd5c:	e0bffd17 	ldw	r2,-12(fp)
}
 100dd60:	e037883a 	mov	sp,fp
 100dd64:	df000017 	ldw	fp,0(sp)
 100dd68:	dec00104 	addi	sp,sp,4
 100dd6c:	f800283a 	ret

0100dd70 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 100dd70:	defffb04 	addi	sp,sp,-20
 100dd74:	df000415 	stw	fp,16(sp)
 100dd78:	df000404 	addi	fp,sp,16
 100dd7c:	e13ffe15 	stw	r4,-8(fp)
 100dd80:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100dd84:	e0bfff17 	ldw	r2,-4(fp)
 100dd88:	10840070 	cmpltui	r2,r2,4097
 100dd8c:	1000021e 	bne	r2,zero,100dd98 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 100dd90:	00840004 	movi	r2,4096
 100dd94:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100dd98:	e0fffe17 	ldw	r3,-8(fp)
 100dd9c:	e0bfff17 	ldw	r2,-4(fp)
 100dda0:	1885883a 	add	r2,r3,r2
 100dda4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100dda8:	e0bffe17 	ldw	r2,-8(fp)
 100ddac:	e0bffd15 	stw	r2,-12(fp)
 100ddb0:	00000506 	br	100ddc8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100ddb4:	e0bffd17 	ldw	r2,-12(fp)
 100ddb8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100ddbc:	e0bffd17 	ldw	r2,-12(fp)
 100ddc0:	10800804 	addi	r2,r2,32
 100ddc4:	e0bffd15 	stw	r2,-12(fp)
 100ddc8:	e0fffd17 	ldw	r3,-12(fp)
 100ddcc:	e0bffc17 	ldw	r2,-16(fp)
 100ddd0:	18bff836 	bltu	r3,r2,100ddb4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100ddd4:	e0bffe17 	ldw	r2,-8(fp)
 100ddd8:	108007cc 	andi	r2,r2,31
 100dddc:	1005003a 	cmpeq	r2,r2,zero
 100dde0:	1000021e 	bne	r2,zero,100ddec <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100dde4:	e0bffd17 	ldw	r2,-12(fp)
 100dde8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100ddec:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100ddf0:	e037883a 	mov	sp,fp
 100ddf4:	df000017 	ldw	fp,0(sp)
 100ddf8:	dec00104 	addi	sp,sp,4
 100ddfc:	f800283a 	ret

0100de00 <atexit>:
 100de00:	200b883a 	mov	r5,r4
 100de04:	000d883a 	mov	r6,zero
 100de08:	0009883a 	mov	r4,zero
 100de0c:	000f883a 	mov	r7,zero
 100de10:	100e1f81 	jmpi	100e1f8 <__register_exitproc>

0100de14 <exit>:
 100de14:	defffe04 	addi	sp,sp,-8
 100de18:	000b883a 	mov	r5,zero
 100de1c:	dc000015 	stw	r16,0(sp)
 100de20:	dfc00115 	stw	ra,4(sp)
 100de24:	2021883a 	mov	r16,r4
 100de28:	100e3300 	call	100e330 <__call_exitprocs>
 100de2c:	00804074 	movhi	r2,257
 100de30:	1081d604 	addi	r2,r2,1880
 100de34:	11000017 	ldw	r4,0(r2)
 100de38:	20800f17 	ldw	r2,60(r4)
 100de3c:	10000126 	beq	r2,zero,100de44 <exit+0x30>
 100de40:	103ee83a 	callr	r2
 100de44:	8009883a 	mov	r4,r16
 100de48:	100e5200 	call	100e520 <_exit>

0100de4c <memcmp>:
 100de4c:	00c000c4 	movi	r3,3
 100de50:	1980032e 	bgeu	r3,r6,100de60 <memcmp+0x14>
 100de54:	2144b03a 	or	r2,r4,r5
 100de58:	10c4703a 	and	r2,r2,r3
 100de5c:	10000f26 	beq	r2,zero,100de9c <memcmp+0x50>
 100de60:	31ffffc4 	addi	r7,r6,-1
 100de64:	3000061e 	bne	r6,zero,100de80 <memcmp+0x34>
 100de68:	00000a06 	br	100de94 <memcmp+0x48>
 100de6c:	39ffffc4 	addi	r7,r7,-1
 100de70:	00bfffc4 	movi	r2,-1
 100de74:	21000044 	addi	r4,r4,1
 100de78:	29400044 	addi	r5,r5,1
 100de7c:	38800526 	beq	r7,r2,100de94 <memcmp+0x48>
 100de80:	20c00003 	ldbu	r3,0(r4)
 100de84:	28800003 	ldbu	r2,0(r5)
 100de88:	18bff826 	beq	r3,r2,100de6c <memcmp+0x20>
 100de8c:	1885c83a 	sub	r2,r3,r2
 100de90:	f800283a 	ret
 100de94:	0005883a 	mov	r2,zero
 100de98:	f800283a 	ret
 100de9c:	180f883a 	mov	r7,r3
 100dea0:	20c00017 	ldw	r3,0(r4)
 100dea4:	28800017 	ldw	r2,0(r5)
 100dea8:	18bfed1e 	bne	r3,r2,100de60 <memcmp+0x14>
 100deac:	31bfff04 	addi	r6,r6,-4
 100deb0:	21000104 	addi	r4,r4,4
 100deb4:	29400104 	addi	r5,r5,4
 100deb8:	39bff936 	bltu	r7,r6,100dea0 <memcmp+0x54>
 100debc:	003fe806 	br	100de60 <memcmp+0x14>

0100dec0 <putc>:
 100dec0:	defffc04 	addi	sp,sp,-16
 100dec4:	dc800215 	stw	r18,8(sp)
 100dec8:	04804074 	movhi	r18,257
 100decc:	9481d504 	addi	r18,r18,1876
 100ded0:	90c00017 	ldw	r3,0(r18)
 100ded4:	dc400115 	stw	r17,4(sp)
 100ded8:	dc000015 	stw	r16,0(sp)
 100dedc:	dfc00315 	stw	ra,12(sp)
 100dee0:	2023883a 	mov	r17,r4
 100dee4:	2821883a 	mov	r16,r5
 100dee8:	18000226 	beq	r3,zero,100def4 <putc+0x34>
 100deec:	18800e17 	ldw	r2,56(r3)
 100def0:	10001126 	beq	r2,zero,100df38 <putc+0x78>
 100def4:	80800217 	ldw	r2,8(r16)
 100def8:	10ffffc4 	addi	r3,r2,-1
 100defc:	80c00215 	stw	r3,8(r16)
 100df00:	18001316 	blt	r3,zero,100df50 <putc+0x90>
 100df04:	80800017 	ldw	r2,0(r16)
 100df08:	14400005 	stb	r17,0(r2)
 100df0c:	80c00017 	ldw	r3,0(r16)
 100df10:	18800044 	addi	r2,r3,1
 100df14:	18c00003 	ldbu	r3,0(r3)
 100df18:	80800015 	stw	r2,0(r16)
 100df1c:	1805883a 	mov	r2,r3
 100df20:	dfc00317 	ldw	ra,12(sp)
 100df24:	dc800217 	ldw	r18,8(sp)
 100df28:	dc400117 	ldw	r17,4(sp)
 100df2c:	dc000017 	ldw	r16,0(sp)
 100df30:	dec00404 	addi	sp,sp,16
 100df34:	f800283a 	ret
 100df38:	1809883a 	mov	r4,r3
 100df3c:	1004f8c0 	call	1004f8c <__sinit>
 100df40:	80800217 	ldw	r2,8(r16)
 100df44:	10ffffc4 	addi	r3,r2,-1
 100df48:	80c00215 	stw	r3,8(r16)
 100df4c:	183fed0e 	bge	r3,zero,100df04 <putc+0x44>
 100df50:	80800617 	ldw	r2,24(r16)
 100df54:	18800f16 	blt	r3,r2,100df94 <putc+0xd4>
 100df58:	80800017 	ldw	r2,0(r16)
 100df5c:	14400005 	stb	r17,0(r2)
 100df60:	81000017 	ldw	r4,0(r16)
 100df64:	00800284 	movi	r2,10
 100df68:	20c00003 	ldbu	r3,0(r4)
 100df6c:	18801226 	beq	r3,r2,100dfb8 <putc+0xf8>
 100df70:	20800044 	addi	r2,r4,1
 100df74:	80800015 	stw	r2,0(r16)
 100df78:	1805883a 	mov	r2,r3
 100df7c:	dfc00317 	ldw	ra,12(sp)
 100df80:	dc800217 	ldw	r18,8(sp)
 100df84:	dc400117 	ldw	r17,4(sp)
 100df88:	dc000017 	ldw	r16,0(sp)
 100df8c:	dec00404 	addi	sp,sp,16
 100df90:	f800283a 	ret
 100df94:	91000017 	ldw	r4,0(r18)
 100df98:	880b883a 	mov	r5,r17
 100df9c:	800d883a 	mov	r6,r16
 100dfa0:	dfc00317 	ldw	ra,12(sp)
 100dfa4:	dc800217 	ldw	r18,8(sp)
 100dfa8:	dc400117 	ldw	r17,4(sp)
 100dfac:	dc000017 	ldw	r16,0(sp)
 100dfb0:	dec00404 	addi	sp,sp,16
 100dfb4:	100e0ac1 	jmpi	100e0ac <__swbuf_r>
 100dfb8:	91000017 	ldw	r4,0(r18)
 100dfbc:	180b883a 	mov	r5,r3
 100dfc0:	003ff606 	br	100df9c <putc+0xdc>

0100dfc4 <_putc_r>:
 100dfc4:	defffc04 	addi	sp,sp,-16
 100dfc8:	dc400215 	stw	r17,8(sp)
 100dfcc:	dc000115 	stw	r16,4(sp)
 100dfd0:	dfc00315 	stw	ra,12(sp)
 100dfd4:	2021883a 	mov	r16,r4
 100dfd8:	2823883a 	mov	r17,r5
 100dfdc:	20000226 	beq	r4,zero,100dfe8 <_putc_r+0x24>
 100dfe0:	20800e17 	ldw	r2,56(r4)
 100dfe4:	10001026 	beq	r2,zero,100e028 <_putc_r+0x64>
 100dfe8:	30800217 	ldw	r2,8(r6)
 100dfec:	10ffffc4 	addi	r3,r2,-1
 100dff0:	30c00215 	stw	r3,8(r6)
 100dff4:	18001316 	blt	r3,zero,100e044 <_putc_r+0x80>
 100dff8:	30800017 	ldw	r2,0(r6)
 100dffc:	14400005 	stb	r17,0(r2)
 100e000:	30c00017 	ldw	r3,0(r6)
 100e004:	18800044 	addi	r2,r3,1
 100e008:	18c00003 	ldbu	r3,0(r3)
 100e00c:	30800015 	stw	r2,0(r6)
 100e010:	1805883a 	mov	r2,r3
 100e014:	dfc00317 	ldw	ra,12(sp)
 100e018:	dc400217 	ldw	r17,8(sp)
 100e01c:	dc000117 	ldw	r16,4(sp)
 100e020:	dec00404 	addi	sp,sp,16
 100e024:	f800283a 	ret
 100e028:	d9800015 	stw	r6,0(sp)
 100e02c:	1004f8c0 	call	1004f8c <__sinit>
 100e030:	d9800017 	ldw	r6,0(sp)
 100e034:	30800217 	ldw	r2,8(r6)
 100e038:	10ffffc4 	addi	r3,r2,-1
 100e03c:	30c00215 	stw	r3,8(r6)
 100e040:	183fed0e 	bge	r3,zero,100dff8 <_putc_r+0x34>
 100e044:	30800617 	ldw	r2,24(r6)
 100e048:	18800e16 	blt	r3,r2,100e084 <_putc_r+0xc0>
 100e04c:	30800017 	ldw	r2,0(r6)
 100e050:	14400005 	stb	r17,0(r2)
 100e054:	31000017 	ldw	r4,0(r6)
 100e058:	00800284 	movi	r2,10
 100e05c:	20c00003 	ldbu	r3,0(r4)
 100e060:	18800f26 	beq	r3,r2,100e0a0 <_putc_r+0xdc>
 100e064:	20800044 	addi	r2,r4,1
 100e068:	30800015 	stw	r2,0(r6)
 100e06c:	1805883a 	mov	r2,r3
 100e070:	dfc00317 	ldw	ra,12(sp)
 100e074:	dc400217 	ldw	r17,8(sp)
 100e078:	dc000117 	ldw	r16,4(sp)
 100e07c:	dec00404 	addi	sp,sp,16
 100e080:	f800283a 	ret
 100e084:	8009883a 	mov	r4,r16
 100e088:	880b883a 	mov	r5,r17
 100e08c:	dfc00317 	ldw	ra,12(sp)
 100e090:	dc400217 	ldw	r17,8(sp)
 100e094:	dc000117 	ldw	r16,4(sp)
 100e098:	dec00404 	addi	sp,sp,16
 100e09c:	100e0ac1 	jmpi	100e0ac <__swbuf_r>
 100e0a0:	8009883a 	mov	r4,r16
 100e0a4:	180b883a 	mov	r5,r3
 100e0a8:	003ff806 	br	100e08c <_putc_r+0xc8>

0100e0ac <__swbuf_r>:
 100e0ac:	defffc04 	addi	sp,sp,-16
 100e0b0:	dc400215 	stw	r17,8(sp)
 100e0b4:	dc000115 	stw	r16,4(sp)
 100e0b8:	dfc00315 	stw	ra,12(sp)
 100e0bc:	2023883a 	mov	r17,r4
 100e0c0:	2821883a 	mov	r16,r5
 100e0c4:	20000226 	beq	r4,zero,100e0d0 <__swbuf_r+0x24>
 100e0c8:	20800e17 	ldw	r2,56(r4)
 100e0cc:	10002f26 	beq	r2,zero,100e18c <__swbuf_r+0xe0>
 100e0d0:	3080030b 	ldhu	r2,12(r6)
 100e0d4:	30c00617 	ldw	r3,24(r6)
 100e0d8:	1080020c 	andi	r2,r2,8
 100e0dc:	30c00215 	stw	r3,8(r6)
 100e0e0:	10002226 	beq	r2,zero,100e16c <__swbuf_r+0xc0>
 100e0e4:	30c00417 	ldw	r3,16(r6)
 100e0e8:	18002026 	beq	r3,zero,100e16c <__swbuf_r+0xc0>
 100e0ec:	31000017 	ldw	r4,0(r6)
 100e0f0:	30800517 	ldw	r2,20(r6)
 100e0f4:	20c7c83a 	sub	r3,r4,r3
 100e0f8:	18802f0e 	bge	r3,r2,100e1b8 <__swbuf_r+0x10c>
 100e0fc:	19400044 	addi	r5,r3,1
 100e100:	30800217 	ldw	r2,8(r6)
 100e104:	84003fcc 	andi	r16,r16,255
 100e108:	20c00044 	addi	r3,r4,1
 100e10c:	10bfffc4 	addi	r2,r2,-1
 100e110:	30800215 	stw	r2,8(r6)
 100e114:	24000005 	stb	r16,0(r4)
 100e118:	30800517 	ldw	r2,20(r6)
 100e11c:	30c00015 	stw	r3,0(r6)
 100e120:	11400c26 	beq	r2,r5,100e154 <__swbuf_r+0xa8>
 100e124:	3080030b 	ldhu	r2,12(r6)
 100e128:	1080004c 	andi	r2,r2,1
 100e12c:	1005003a 	cmpeq	r2,r2,zero
 100e130:	10000626 	beq	r2,zero,100e14c <__swbuf_r+0xa0>
 100e134:	8005883a 	mov	r2,r16
 100e138:	dfc00317 	ldw	ra,12(sp)
 100e13c:	dc400217 	ldw	r17,8(sp)
 100e140:	dc000117 	ldw	r16,4(sp)
 100e144:	dec00404 	addi	sp,sp,16
 100e148:	f800283a 	ret
 100e14c:	00800284 	movi	r2,10
 100e150:	80bff81e 	bne	r16,r2,100e134 <__swbuf_r+0x88>
 100e154:	8809883a 	mov	r4,r17
 100e158:	300b883a 	mov	r5,r6
 100e15c:	1004cf40 	call	1004cf4 <_fflush_r>
 100e160:	103ff426 	beq	r2,zero,100e134 <__swbuf_r+0x88>
 100e164:	043fffc4 	movi	r16,-1
 100e168:	003ff206 	br	100e134 <__swbuf_r+0x88>
 100e16c:	300b883a 	mov	r5,r6
 100e170:	8809883a 	mov	r4,r17
 100e174:	d9800015 	stw	r6,0(sp)
 100e178:	10033ec0 	call	10033ec <__swsetup_r>
 100e17c:	d9800017 	ldw	r6,0(sp)
 100e180:	1000061e 	bne	r2,zero,100e19c <__swbuf_r+0xf0>
 100e184:	30c00417 	ldw	r3,16(r6)
 100e188:	003fd806 	br	100e0ec <__swbuf_r+0x40>
 100e18c:	d9800015 	stw	r6,0(sp)
 100e190:	1004f8c0 	call	1004f8c <__sinit>
 100e194:	d9800017 	ldw	r6,0(sp)
 100e198:	003fcd06 	br	100e0d0 <__swbuf_r+0x24>
 100e19c:	3080030b 	ldhu	r2,12(r6)
 100e1a0:	00c00244 	movi	r3,9
 100e1a4:	043fffc4 	movi	r16,-1
 100e1a8:	10801014 	ori	r2,r2,64
 100e1ac:	3080030d 	sth	r2,12(r6)
 100e1b0:	88c00015 	stw	r3,0(r17)
 100e1b4:	003fdf06 	br	100e134 <__swbuf_r+0x88>
 100e1b8:	300b883a 	mov	r5,r6
 100e1bc:	8809883a 	mov	r4,r17
 100e1c0:	d9800015 	stw	r6,0(sp)
 100e1c4:	1004cf40 	call	1004cf4 <_fflush_r>
 100e1c8:	d9800017 	ldw	r6,0(sp)
 100e1cc:	103fe51e 	bne	r2,zero,100e164 <__swbuf_r+0xb8>
 100e1d0:	31000017 	ldw	r4,0(r6)
 100e1d4:	01400044 	movi	r5,1
 100e1d8:	003fc906 	br	100e100 <__swbuf_r+0x54>

0100e1dc <__swbuf>:
 100e1dc:	01804074 	movhi	r6,257
 100e1e0:	3181d504 	addi	r6,r6,1876
 100e1e4:	2007883a 	mov	r3,r4
 100e1e8:	31000017 	ldw	r4,0(r6)
 100e1ec:	280d883a 	mov	r6,r5
 100e1f0:	180b883a 	mov	r5,r3
 100e1f4:	100e0ac1 	jmpi	100e0ac <__swbuf_r>

0100e1f8 <__register_exitproc>:
 100e1f8:	defffa04 	addi	sp,sp,-24
 100e1fc:	00804074 	movhi	r2,257
 100e200:	1081d604 	addi	r2,r2,1880
 100e204:	dc000015 	stw	r16,0(sp)
 100e208:	14000017 	ldw	r16,0(r2)
 100e20c:	dd000415 	stw	r20,16(sp)
 100e210:	2829883a 	mov	r20,r5
 100e214:	81405217 	ldw	r5,328(r16)
 100e218:	dcc00315 	stw	r19,12(sp)
 100e21c:	dc800215 	stw	r18,8(sp)
 100e220:	dc400115 	stw	r17,4(sp)
 100e224:	dfc00515 	stw	ra,20(sp)
 100e228:	2023883a 	mov	r17,r4
 100e22c:	3027883a 	mov	r19,r6
 100e230:	3825883a 	mov	r18,r7
 100e234:	28002526 	beq	r5,zero,100e2cc <__register_exitproc+0xd4>
 100e238:	29000117 	ldw	r4,4(r5)
 100e23c:	008007c4 	movi	r2,31
 100e240:	11002716 	blt	r2,r4,100e2e0 <__register_exitproc+0xe8>
 100e244:	8800101e 	bne	r17,zero,100e288 <__register_exitproc+0x90>
 100e248:	2105883a 	add	r2,r4,r4
 100e24c:	1085883a 	add	r2,r2,r2
 100e250:	20c00044 	addi	r3,r4,1
 100e254:	1145883a 	add	r2,r2,r5
 100e258:	0009883a 	mov	r4,zero
 100e25c:	15000215 	stw	r20,8(r2)
 100e260:	28c00115 	stw	r3,4(r5)
 100e264:	2005883a 	mov	r2,r4
 100e268:	dfc00517 	ldw	ra,20(sp)
 100e26c:	dd000417 	ldw	r20,16(sp)
 100e270:	dcc00317 	ldw	r19,12(sp)
 100e274:	dc800217 	ldw	r18,8(sp)
 100e278:	dc400117 	ldw	r17,4(sp)
 100e27c:	dc000017 	ldw	r16,0(sp)
 100e280:	dec00604 	addi	sp,sp,24
 100e284:	f800283a 	ret
 100e288:	29802204 	addi	r6,r5,136
 100e28c:	00800044 	movi	r2,1
 100e290:	110e983a 	sll	r7,r2,r4
 100e294:	30c04017 	ldw	r3,256(r6)
 100e298:	2105883a 	add	r2,r4,r4
 100e29c:	1085883a 	add	r2,r2,r2
 100e2a0:	1185883a 	add	r2,r2,r6
 100e2a4:	19c6b03a 	or	r3,r3,r7
 100e2a8:	14802015 	stw	r18,128(r2)
 100e2ac:	14c00015 	stw	r19,0(r2)
 100e2b0:	00800084 	movi	r2,2
 100e2b4:	30c04015 	stw	r3,256(r6)
 100e2b8:	88bfe31e 	bne	r17,r2,100e248 <__register_exitproc+0x50>
 100e2bc:	30804117 	ldw	r2,260(r6)
 100e2c0:	11c4b03a 	or	r2,r2,r7
 100e2c4:	30804115 	stw	r2,260(r6)
 100e2c8:	003fdf06 	br	100e248 <__register_exitproc+0x50>
 100e2cc:	00804074 	movhi	r2,257
 100e2d0:	10891204 	addi	r2,r2,9288
 100e2d4:	100b883a 	mov	r5,r2
 100e2d8:	80805215 	stw	r2,328(r16)
 100e2dc:	003fd606 	br	100e238 <__register_exitproc+0x40>
 100e2e0:	00800034 	movhi	r2,0
 100e2e4:	10800004 	addi	r2,r2,0
 100e2e8:	1000021e 	bne	r2,zero,100e2f4 <__register_exitproc+0xfc>
 100e2ec:	013fffc4 	movi	r4,-1
 100e2f0:	003fdc06 	br	100e264 <__register_exitproc+0x6c>
 100e2f4:	01006404 	movi	r4,400
 100e2f8:	103ee83a 	callr	r2
 100e2fc:	1007883a 	mov	r3,r2
 100e300:	103ffa26 	beq	r2,zero,100e2ec <__register_exitproc+0xf4>
 100e304:	80805217 	ldw	r2,328(r16)
 100e308:	180b883a 	mov	r5,r3
 100e30c:	18000115 	stw	zero,4(r3)
 100e310:	18800015 	stw	r2,0(r3)
 100e314:	80c05215 	stw	r3,328(r16)
 100e318:	18006215 	stw	zero,392(r3)
 100e31c:	18006315 	stw	zero,396(r3)
 100e320:	0009883a 	mov	r4,zero
 100e324:	883fc826 	beq	r17,zero,100e248 <__register_exitproc+0x50>
 100e328:	003fd706 	br	100e288 <__register_exitproc+0x90>

0100e32c <register_fini>:
 100e32c:	f800283a 	ret

0100e330 <__call_exitprocs>:
 100e330:	00804074 	movhi	r2,257
 100e334:	1081d604 	addi	r2,r2,1880
 100e338:	10800017 	ldw	r2,0(r2)
 100e33c:	defff304 	addi	sp,sp,-52
 100e340:	df000b15 	stw	fp,44(sp)
 100e344:	d8800115 	stw	r2,4(sp)
 100e348:	00800034 	movhi	r2,0
 100e34c:	10800004 	addi	r2,r2,0
 100e350:	1005003a 	cmpeq	r2,r2,zero
 100e354:	d8800215 	stw	r2,8(sp)
 100e358:	d8800117 	ldw	r2,4(sp)
 100e35c:	dd400815 	stw	r21,32(sp)
 100e360:	dd000715 	stw	r20,28(sp)
 100e364:	10805204 	addi	r2,r2,328
 100e368:	dfc00c15 	stw	ra,48(sp)
 100e36c:	ddc00a15 	stw	r23,40(sp)
 100e370:	dd800915 	stw	r22,36(sp)
 100e374:	dcc00615 	stw	r19,24(sp)
 100e378:	dc800515 	stw	r18,20(sp)
 100e37c:	dc400415 	stw	r17,16(sp)
 100e380:	dc000315 	stw	r16,12(sp)
 100e384:	282b883a 	mov	r21,r5
 100e388:	2039883a 	mov	fp,r4
 100e38c:	d8800015 	stw	r2,0(sp)
 100e390:	2829003a 	cmpeq	r20,r5,zero
 100e394:	d8800117 	ldw	r2,4(sp)
 100e398:	14405217 	ldw	r17,328(r2)
 100e39c:	88001026 	beq	r17,zero,100e3e0 <__call_exitprocs+0xb0>
 100e3a0:	ddc00017 	ldw	r23,0(sp)
 100e3a4:	88800117 	ldw	r2,4(r17)
 100e3a8:	8c802204 	addi	r18,r17,136
 100e3ac:	143fffc4 	addi	r16,r2,-1
 100e3b0:	80000916 	blt	r16,zero,100e3d8 <__call_exitprocs+0xa8>
 100e3b4:	05bfffc4 	movi	r22,-1
 100e3b8:	a000151e 	bne	r20,zero,100e410 <__call_exitprocs+0xe0>
 100e3bc:	8409883a 	add	r4,r16,r16
 100e3c0:	2105883a 	add	r2,r4,r4
 100e3c4:	1485883a 	add	r2,r2,r18
 100e3c8:	10c02017 	ldw	r3,128(r2)
 100e3cc:	a8c01126 	beq	r21,r3,100e414 <__call_exitprocs+0xe4>
 100e3d0:	843fffc4 	addi	r16,r16,-1
 100e3d4:	85bff81e 	bne	r16,r22,100e3b8 <__call_exitprocs+0x88>
 100e3d8:	d8800217 	ldw	r2,8(sp)
 100e3dc:	10003126 	beq	r2,zero,100e4a4 <__call_exitprocs+0x174>
 100e3e0:	dfc00c17 	ldw	ra,48(sp)
 100e3e4:	df000b17 	ldw	fp,44(sp)
 100e3e8:	ddc00a17 	ldw	r23,40(sp)
 100e3ec:	dd800917 	ldw	r22,36(sp)
 100e3f0:	dd400817 	ldw	r21,32(sp)
 100e3f4:	dd000717 	ldw	r20,28(sp)
 100e3f8:	dcc00617 	ldw	r19,24(sp)
 100e3fc:	dc800517 	ldw	r18,20(sp)
 100e400:	dc400417 	ldw	r17,16(sp)
 100e404:	dc000317 	ldw	r16,12(sp)
 100e408:	dec00d04 	addi	sp,sp,52
 100e40c:	f800283a 	ret
 100e410:	8409883a 	add	r4,r16,r16
 100e414:	88c00117 	ldw	r3,4(r17)
 100e418:	2105883a 	add	r2,r4,r4
 100e41c:	1445883a 	add	r2,r2,r17
 100e420:	18ffffc4 	addi	r3,r3,-1
 100e424:	11800217 	ldw	r6,8(r2)
 100e428:	1c001526 	beq	r3,r16,100e480 <__call_exitprocs+0x150>
 100e42c:	10000215 	stw	zero,8(r2)
 100e430:	303fe726 	beq	r6,zero,100e3d0 <__call_exitprocs+0xa0>
 100e434:	00c00044 	movi	r3,1
 100e438:	1c06983a 	sll	r3,r3,r16
 100e43c:	90804017 	ldw	r2,256(r18)
 100e440:	8cc00117 	ldw	r19,4(r17)
 100e444:	1884703a 	and	r2,r3,r2
 100e448:	10001426 	beq	r2,zero,100e49c <__call_exitprocs+0x16c>
 100e44c:	90804117 	ldw	r2,260(r18)
 100e450:	1884703a 	and	r2,r3,r2
 100e454:	10000c1e 	bne	r2,zero,100e488 <__call_exitprocs+0x158>
 100e458:	2105883a 	add	r2,r4,r4
 100e45c:	1485883a 	add	r2,r2,r18
 100e460:	11400017 	ldw	r5,0(r2)
 100e464:	e009883a 	mov	r4,fp
 100e468:	303ee83a 	callr	r6
 100e46c:	88800117 	ldw	r2,4(r17)
 100e470:	98bfc81e 	bne	r19,r2,100e394 <__call_exitprocs+0x64>
 100e474:	b8800017 	ldw	r2,0(r23)
 100e478:	147fd526 	beq	r2,r17,100e3d0 <__call_exitprocs+0xa0>
 100e47c:	003fc506 	br	100e394 <__call_exitprocs+0x64>
 100e480:	8c000115 	stw	r16,4(r17)
 100e484:	003fea06 	br	100e430 <__call_exitprocs+0x100>
 100e488:	2105883a 	add	r2,r4,r4
 100e48c:	1485883a 	add	r2,r2,r18
 100e490:	11000017 	ldw	r4,0(r2)
 100e494:	303ee83a 	callr	r6
 100e498:	003ff406 	br	100e46c <__call_exitprocs+0x13c>
 100e49c:	303ee83a 	callr	r6
 100e4a0:	003ff206 	br	100e46c <__call_exitprocs+0x13c>
 100e4a4:	88800117 	ldw	r2,4(r17)
 100e4a8:	1000081e 	bne	r2,zero,100e4cc <__call_exitprocs+0x19c>
 100e4ac:	89000017 	ldw	r4,0(r17)
 100e4b0:	20000726 	beq	r4,zero,100e4d0 <__call_exitprocs+0x1a0>
 100e4b4:	b9000015 	stw	r4,0(r23)
 100e4b8:	8809883a 	mov	r4,r17
 100e4bc:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 100e4c0:	bc400017 	ldw	r17,0(r23)
 100e4c4:	883fb71e 	bne	r17,zero,100e3a4 <__call_exitprocs+0x74>
 100e4c8:	003fc506 	br	100e3e0 <__call_exitprocs+0xb0>
 100e4cc:	89000017 	ldw	r4,0(r17)
 100e4d0:	882f883a 	mov	r23,r17
 100e4d4:	2023883a 	mov	r17,r4
 100e4d8:	883fb21e 	bne	r17,zero,100e3a4 <__call_exitprocs+0x74>
 100e4dc:	003fc006 	br	100e3e0 <__call_exitprocs+0xb0>

0100e4e0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100e4e0:	defffd04 	addi	sp,sp,-12
 100e4e4:	df000215 	stw	fp,8(sp)
 100e4e8:	df000204 	addi	fp,sp,8
 100e4ec:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100e4f0:	e0bfff17 	ldw	r2,-4(fp)
 100e4f4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100e4f8:	e0bffe17 	ldw	r2,-8(fp)
 100e4fc:	1005003a 	cmpeq	r2,r2,zero
 100e500:	1000021e 	bne	r2,zero,100e50c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100e504:	002af070 	cmpltui	zero,zero,43969
 100e508:	00000106 	br	100e510 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100e50c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100e510:	e037883a 	mov	sp,fp
 100e514:	df000017 	ldw	fp,0(sp)
 100e518:	dec00104 	addi	sp,sp,4
 100e51c:	f800283a 	ret

0100e520 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100e520:	defffd04 	addi	sp,sp,-12
 100e524:	dfc00215 	stw	ra,8(sp)
 100e528:	df000115 	stw	fp,4(sp)
 100e52c:	df000104 	addi	fp,sp,4
 100e530:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100e534:	e13fff17 	ldw	r4,-4(fp)
 100e538:	100e4e00 	call	100e4e0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100e53c:	003fff06 	br	100e53c <_exit+0x1c>
 100e540:	00000010 	cmplti	zero,zero,0
 100e544:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 100e548:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory2_0+0x527a0>
 100e54c:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory2_0+0x11f7c0>
 100e550:	001b0c0b 	ldhu	zero,27696(zero)
 100e554:	00000028 	cmpgeui	zero,zero,0
 100e558:	00000018 	cmpnei	zero,zero,0
 100e55c:	01008638 	rdprs	r4,zero,536
 100e560:	000005dc 	xori	zero,zero,23
 100e564:	400e4400 	call	400e440 <__alt_data_end+0x280e440>
 100e568:	92099170 	cmpltui	r8,r18,9797
 100e56c:	95079308 	cmpgei	r20,r18,7756
 100e570:	97049605 	stb	fp,4696(r18)
 100e574:	90019f03 	ldbu	zero,1660(r18)
 100e578:	9c06940a 	0x9c06940a
 100e57c:	00000002 	0x2
 100e580:	00000028 	cmpgeui	zero,zero,0
 100e584:	00000044 	movi	zero,1
 100e588:	01008c14 	movui	r4,560
 100e58c:	000005b0 	cmpltui	zero,zero,22
 100e590:	3c0e4400 	call	3c0e440 <__alt_data_end+0x240e440>
 100e594:	92099168 	cmpgeui	r8,r18,9797
 100e598:	95079308 	cmpgei	r20,r18,7756
 100e59c:	9c039705 	stb	r16,3676(r19)
 100e5a0:	90019f02 	0x90019f02
 100e5a4:	9606940a 	0x9606940a
 100e5a8:	00000004 	movi	zero,0
 100e5ac:	0100e32c 	andhi	r4,zero,908
